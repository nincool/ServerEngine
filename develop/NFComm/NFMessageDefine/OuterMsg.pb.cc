// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMsg.proto

#include "OuterMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttachData_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GUID_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuidName_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LetterData_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectDataPack_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDataList_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyInt_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PropertyList_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyString_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListCreate_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListData_MapDataEntry_DoNotUse_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListDataAck_MapDataEntry_DoNotUse_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListRangeData_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListRangeData_MapDataEntry_DoNotUse_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListRankAck_MapDataEntry_DoNotUse_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RankListScore_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordList_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleLiteInfo_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConnectInfo_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfoReport_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfoReportList_ServerListEntry_DoNotUse_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldParam_OuterMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldParam_ExtraServerEntry_DoNotUse_OuterMsg_2eproto;
namespace OuterMsg {
class MsgEmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgEmpty> _instance;
} _MsgEmpty_default_instance_;
class MsgReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgReply> _instance;
} _MsgReply_default_instance_;
class ViewCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewCreate> _instance;
} _ViewCreate_default_instance_;
class ViewAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewAdd> _instance;
} _ViewAdd_default_instance_;
class ViewRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewRemove> _instance;
} _ViewRemove_default_instance_;
class ViewChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewChange> _instance;
} _ViewChange_default_instance_;
class ViewCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewClose> _instance;
} _ViewClose_default_instance_;
class ViewPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewProperty> _instance;
} _ViewProperty_default_instance_;
class ViewRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewRecord> _instance;
} _ViewRecord_default_instance_;
class ViewCellPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewCellProperty> _instance;
} _ViewCellProperty_default_instance_;
class ViewCellRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewCellRecord> _instance;
} _ViewCellRecord_default_instance_;
class ObjectVisRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectVisRecord> _instance;
} _ObjectVisRecord_default_instance_;
class MsgBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBase> _instance;
} _MsgBase_default_instance_;
class AckEventResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckEventResult> _instance;
} _AckEventResult_default_instance_;
class ReqAccountLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAccountLogin> _instance;
} _ReqAccountLogin_default_instance_;
class ReqAccountLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAccountLogout> _instance;
} _ReqAccountLogout_default_instance_;
class ServerInfoReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfoReport> _instance;
} _ServerInfoReport_default_instance_;
class NetTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetTest> _instance;
} _NetTest_default_instance_;
class ServerInfoReportList_ServerListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfoReportList_ServerListEntry_DoNotUse> _instance;
} _ServerInfoReportList_ServerListEntry_DoNotUse_default_instance_;
class ServerInfoReportListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfoReportList> _instance;
} _ServerInfoReportList_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
class ServerHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerHeartBeat> _instance;
} _ServerHeartBeat_default_instance_;
class AckWorldListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckWorldList> _instance;
} _AckWorldList_default_instance_;
class ReqConnectWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqConnectWorld> _instance;
} _ReqConnectWorld_default_instance_;
class AckConnectWorldResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckConnectWorldResult> _instance;
} _AckConnectWorldResult_default_instance_;
class WorldParam_ExtraServerEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldParam_ExtraServerEntry_DoNotUse> _instance;
} _WorldParam_ExtraServerEntry_DoNotUse_default_instance_;
class WorldParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldParam> _instance;
} _WorldParam_default_instance_;
class ReqRoleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqRoleList> _instance;
} _ReqRoleList_default_instance_;
class RoleLiteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleLiteInfo> _instance;
} _RoleLiteInfo_default_instance_;
class AckRoleLiteInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckRoleLiteInfoList> _instance;
} _AckRoleLiteInfoList_default_instance_;
class ReqCreateRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCreateRole> _instance;
} _ReqCreateRole_default_instance_;
class ReqDeleteRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqDeleteRole> _instance;
} _ReqDeleteRole_default_instance_;
class RoleOnlineNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleOnlineNotify> _instance;
} _RoleOnlineNotify_default_instance_;
class RoleOfflineNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleOfflineNotify> _instance;
} _RoleOfflineNotify_default_instance_;
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqEnterGameServer> _instance;
} _ReqEnterGameServer_default_instance_;
class ReqAckEnterGameSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckEnterGameSuccess> _instance;
} _ReqAckEnterGameSuccess_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqLeaveGameServer> _instance;
} _ReqLeaveGameServer_default_instance_;
class CommandMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandMsg> _instance;
} _CommandMsg_default_instance_;
class LetterDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LetterData> _instance;
} _LetterData_default_instance_;
class LetterDataPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LetterDataPack> _instance;
} _LetterDataPack_default_instance_;
class ReqLookLetterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqLookLetter> _instance;
} _ReqLookLetter_default_instance_;
class ReqDeleteLetterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqDeleteLetter> _instance;
} _ReqDeleteLetter_default_instance_;
class AckQueryLetterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckQueryLetter> _instance;
} _AckQueryLetter_default_instance_;
class PubOpDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PubOpData> _instance;
} _PubOpData_default_instance_;
class AckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckResult> _instance;
} _AckResult_default_instance_;
class PubNameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PubNameData> _instance;
} _PubNameData_default_instance_;
class ChatRemoveRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRemoveRoom> _instance;
} _ChatRemoveRoom_default_instance_;
class ChatAddPlayerToRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatAddPlayerToRoom> _instance;
} _ChatAddPlayerToRoom_default_instance_;
class ChatRemovePlayerToRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRemovePlayerToRoom> _instance;
} _ChatRemovePlayerToRoom_default_instance_;
class ChatPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatPlayerInfo> _instance;
} _ChatPlayerInfo_default_instance_;
class ChatPlayerBannedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatPlayerBanned> _instance;
} _ChatPlayerBanned_default_instance_;
class ChatClientDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatClientData> _instance;
} _ChatClientData_default_instance_;
class ChatMsgRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMsgRoom> _instance;
} _ChatMsgRoom_default_instance_;
class ChatMsgPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMsgPlayer> _instance;
} _ChatMsgPlayer_default_instance_;
class ChatRecordingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRecording> _instance;
} _ChatRecording_default_instance_;
class PlayerRenameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerRename> _instance;
} _PlayerRename_default_instance_;
class ExtraMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtraMsg> _instance;
} _ExtraMsg_default_instance_;
class AttachDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttachData> _instance;
} _AttachData_default_instance_;
class RankListCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListCreate> _instance;
} _RankListCreate_default_instance_;
class RankListCreateAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListCreateAck> _instance;
} _RankListCreateAck_default_instance_;
class RankListDeleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDelete> _instance;
} _RankListDelete_default_instance_;
class RankListDeleteAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDeleteAck> _instance;
} _RankListDeleteAck_default_instance_;
class RankListScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListScore> _instance;
} _RankListScore_default_instance_;
class RankListScoreAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListScoreAck> _instance;
} _RankListScoreAck_default_instance_;
class RankListData_MapDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListData_MapDataEntry_DoNotUse> _instance;
} _RankListData_MapDataEntry_DoNotUse_default_instance_;
class RankListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListData> _instance;
} _RankListData_default_instance_;
class RankListDataAck_MapDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDataAck_MapDataEntry_DoNotUse> _instance;
} _RankListDataAck_MapDataEntry_DoNotUse_default_instance_;
class RankListDataAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDataAck> _instance;
} _RankListDataAck_default_instance_;
class RankListDataArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDataArray> _instance;
} _RankListDataArray_default_instance_;
class RankListDataArrayAck_RankDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDataArrayAck_RankData> _instance;
} _RankListDataArrayAck_RankData_default_instance_;
class RankListDataArrayAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListDataArrayAck> _instance;
} _RankListDataArrayAck_default_instance_;
class RankListRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRank> _instance;
} _RankListRank_default_instance_;
class RankListRankAck_MapDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRankAck_MapDataEntry_DoNotUse> _instance;
} _RankListRankAck_MapDataEntry_DoNotUse_default_instance_;
class RankListRankAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRankAck> _instance;
} _RankListRankAck_default_instance_;
class RankListRankArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRankArray> _instance;
} _RankListRankArray_default_instance_;
class RankListRankArrayAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRankArrayAck> _instance;
} _RankListRankArrayAck_default_instance_;
class RankListRangeData_MapDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRangeData_MapDataEntry_DoNotUse> _instance;
} _RankListRangeData_MapDataEntry_DoNotUse_default_instance_;
class RankListRangeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRangeData> _instance;
} _RankListRangeData_default_instance_;
class RankListRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRange> _instance;
} _RankListRange_default_instance_;
class RankListRangeAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListRangeAck> _instance;
} _RankListRangeAck_default_instance_;
class RankListInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListInit> _instance;
} _RankListInit_default_instance_;
class RankListUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListUpdate> _instance;
} _RankListUpdate_default_instance_;
class RankListSwapRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListSwapRank> _instance;
} _RankListSwapRank_default_instance_;
class RankListSwapRankAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankListSwapRankAck> _instance;
} _RankListSwapRankAck_default_instance_;
class ServerConnectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConnectInfo> _instance;
} _ServerConnectInfo_default_instance_;
class ClientConnectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientConnectInfo> _instance;
} _ClientConnectInfo_default_instance_;
class GuidNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuidName> _instance;
} _GuidName_default_instance_;
class GuidNameListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuidNameList> _instance;
} _GuidNameList_default_instance_;
class OptServerIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptServerID> _instance;
} _OptServerID_default_instance_;
class ColdDataStoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColdDataStore> _instance;
} _ColdDataStore_default_instance_;
class LogToDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogToDB> _instance;
} _LogToDB_default_instance_;
class ServerConnectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConnectList> _instance;
} _ServerConnectList_default_instance_;
}  // namespace OuterMsg
static void InitDefaultsscc_info_AckConnectWorldResult_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AckConnectWorldResult_default_instance_;
    new (ptr) ::OuterMsg::AckConnectWorldResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AckConnectWorldResult::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AckConnectWorldResult_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AckConnectWorldResult_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_WorldParam_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_AckEventResult_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AckEventResult_default_instance_;
    new (ptr) ::OuterMsg::AckEventResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AckEventResult::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckEventResult_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckEventResult_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_AckQueryLetter_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AckQueryLetter_default_instance_;
    new (ptr) ::OuterMsg::AckQueryLetter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AckQueryLetter::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckQueryLetter_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckQueryLetter_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_AckResult_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AckResult_default_instance_;
    new (ptr) ::OuterMsg::AckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AckResult::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckResult_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckResult_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_AckRoleLiteInfoList_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AckRoleLiteInfoList_default_instance_;
    new (ptr) ::OuterMsg::AckRoleLiteInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AckRoleLiteInfoList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckRoleLiteInfoList_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckRoleLiteInfoList_OuterMsg_2eproto}, {
      &scc_info_RoleLiteInfo_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_AckWorldList_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AckWorldList_default_instance_;
    new (ptr) ::OuterMsg::AckWorldList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AckWorldList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckWorldList_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckWorldList_OuterMsg_2eproto}, {
      &scc_info_ServerInfo_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_AttachData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_AttachData_default_instance_;
    new (ptr) ::OuterMsg::AttachData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::AttachData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttachData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AttachData_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ChatAddPlayerToRoom_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatAddPlayerToRoom_default_instance_;
    new (ptr) ::OuterMsg::ChatAddPlayerToRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatAddPlayerToRoom::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatAddPlayerToRoom_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatAddPlayerToRoom_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatClientData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatClientData_default_instance_;
    new (ptr) ::OuterMsg::ChatClientData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatClientData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatClientData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatClientData_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatMsgPlayer_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatMsgPlayer_default_instance_;
    new (ptr) ::OuterMsg::ChatMsgPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatMsgPlayer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatMsgPlayer_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatMsgPlayer_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatMsgRoom_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatMsgRoom_default_instance_;
    new (ptr) ::OuterMsg::ChatMsgRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatMsgRoom::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatMsgRoom_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatMsgRoom_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatPlayerBanned_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatPlayerBanned_default_instance_;
    new (ptr) ::OuterMsg::ChatPlayerBanned();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatPlayerBanned::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatPlayerBanned_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatPlayerBanned_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatPlayerInfo_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatPlayerInfo_default_instance_;
    new (ptr) ::OuterMsg::ChatPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatPlayerInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatPlayerInfo_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatPlayerInfo_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatRecording_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatRecording_default_instance_;
    new (ptr) ::OuterMsg::ChatRecording();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatRecording::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRecording_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChatRecording_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ChatRemovePlayerToRoom_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatRemovePlayerToRoom_default_instance_;
    new (ptr) ::OuterMsg::ChatRemovePlayerToRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatRemovePlayerToRoom::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatRemovePlayerToRoom_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChatRemovePlayerToRoom_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ChatRemoveRoom_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ChatRemoveRoom_default_instance_;
    new (ptr) ::OuterMsg::ChatRemoveRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ChatRemoveRoom::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRemoveRoom_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChatRemoveRoom_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ClientConnectInfo_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ClientConnectInfo_default_instance_;
    new (ptr) ::OuterMsg::ClientConnectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ClientConnectInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientConnectInfo_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientConnectInfo_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ColdDataStore_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ColdDataStore_default_instance_;
    new (ptr) ::OuterMsg::ColdDataStore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ColdDataStore::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColdDataStore_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ColdDataStore_OuterMsg_2eproto}, {
      &scc_info_PropertyString_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_CommandMsg_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_CommandMsg_default_instance_;
    new (ptr) ::OuterMsg::CommandMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::CommandMsg::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandMsg_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CommandMsg_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_PBDataList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ExtraMsg_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ExtraMsg_default_instance_;
    new (ptr) ::OuterMsg::ExtraMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ExtraMsg::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtraMsg_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtraMsg_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_GuidName_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_GuidName_default_instance_;
    new (ptr) ::OuterMsg::GuidName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::GuidName::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuidName_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GuidName_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_GuidNameList_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_GuidNameList_default_instance_;
    new (ptr) ::OuterMsg::GuidNameList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::GuidNameList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuidNameList_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GuidNameList_OuterMsg_2eproto}, {
      &scc_info_GuidName_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_LetterData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_LetterData_default_instance_;
    new (ptr) ::OuterMsg::LetterData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::LetterData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LetterData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LetterData_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_PBDataList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_LetterDataPack_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_LetterDataPack_default_instance_;
    new (ptr) ::OuterMsg::LetterDataPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::LetterDataPack::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LetterDataPack_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LetterDataPack_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_LetterData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_LogToDB_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_LogToDB_default_instance_;
    new (ptr) ::OuterMsg::LogToDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::LogToDB::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogToDB_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LogToDB_OuterMsg_2eproto}, {
      &scc_info_PBDataList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_MsgBase_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_MsgBase_default_instance_;
    new (ptr) ::OuterMsg::MsgBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::MsgBase::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBase_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MsgBase_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_MsgEmpty_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_MsgEmpty_default_instance_;
    new (ptr) ::OuterMsg::MsgEmpty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::MsgEmpty::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgEmpty_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MsgEmpty_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_MsgReply_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_MsgReply_default_instance_;
    new (ptr) ::OuterMsg::MsgReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::MsgReply::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgReply_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MsgReply_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_NetTest_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_NetTest_default_instance_;
    new (ptr) ::OuterMsg::NetTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::NetTest::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetTest_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetTest_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ObjectVisRecord_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ObjectVisRecord_default_instance_;
    new (ptr) ::OuterMsg::ObjectVisRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ObjectVisRecord::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectVisRecord_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObjectVisRecord_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RecordList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_OptServerID_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_OptServerID_default_instance_;
    new (ptr) ::OuterMsg::OptServerID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::OptServerID::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptServerID_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OptServerID_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_PlayerRename_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PlayerRename_default_instance_;
    new (ptr) ::OuterMsg::PlayerRename();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PlayerRename::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerRename_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlayerRename_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PubNameData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PubNameData_default_instance_;
    new (ptr) ::OuterMsg::PubNameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PubNameData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PubNameData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PubNameData_OuterMsg_2eproto}, {
      &scc_info_ObjectDataPack_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PubOpData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PubOpData_default_instance_;
    new (ptr) ::OuterMsg::PubOpData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PubOpData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PubOpData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PubOpData_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RankListCreate_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListCreate_default_instance_;
    new (ptr) ::OuterMsg::RankListCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListCreate::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListCreate_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListCreate_OuterMsg_2eproto}, {
      &scc_info_PropertyInt_OuterBase_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListCreateAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListCreateAck_default_instance_;
    new (ptr) ::OuterMsg::RankListCreateAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListCreateAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankListCreateAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RankListCreateAck_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListData_default_instance_;
    new (ptr) ::OuterMsg::RankListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RankListData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RankListData_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RankListData_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListData_MapDataEntry_DoNotUse_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListData_MapDataEntry_DoNotUse_default_instance_;
    new (ptr) ::OuterMsg::RankListData_MapDataEntry_DoNotUse();
  }
  ::OuterMsg::RankListData_MapDataEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListData_MapDataEntry_DoNotUse_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RankListData_MapDataEntry_DoNotUse_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_RankListDataAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDataAck_default_instance_;
    new (ptr) ::OuterMsg::RankListDataAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListDataAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RankListDataAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RankListDataAck_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RankListDataAck_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListDataAck_MapDataEntry_DoNotUse_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDataAck_MapDataEntry_DoNotUse_default_instance_;
    new (ptr) ::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse();
  }
  ::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListDataAck_MapDataEntry_DoNotUse_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RankListDataAck_MapDataEntry_DoNotUse_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_RankListDataArray_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDataArray_default_instance_;
    new (ptr) ::OuterMsg::RankListDataArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListDataArray::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListDataArray_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListDataArray_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListDataArrayAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDataArrayAck_default_instance_;
    new (ptr) ::OuterMsg::RankListDataArrayAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListDataArrayAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListDataArrayAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListDataArrayAck_OuterMsg_2eproto}, {
      &scc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDataArrayAck_RankData_default_instance_;
    new (ptr) ::OuterMsg::RankListDataArrayAck_RankData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListDataArrayAck_RankData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RankListDelete_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDelete_default_instance_;
    new (ptr) ::OuterMsg::RankListDelete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListDelete::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankListDelete_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RankListDelete_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListDeleteAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListDeleteAck_default_instance_;
    new (ptr) ::OuterMsg::RankListDeleteAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListDeleteAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankListDeleteAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RankListDeleteAck_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListInit_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListInit_default_instance_;
    new (ptr) ::OuterMsg::RankListInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListInit::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListInit_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListInit_OuterMsg_2eproto}, {
      &scc_info_RankListCreate_OuterMsg_2eproto.base,
      &scc_info_RankListScore_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListRange_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRange_default_instance_;
    new (ptr) ::OuterMsg::RankListRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRange::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankListRange_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RankListRange_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListRangeAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRangeAck_default_instance_;
    new (ptr) ::OuterMsg::RankListRangeAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRangeAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListRangeAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListRangeAck_OuterMsg_2eproto}, {
      &scc_info_RankListRangeData_OuterMsg_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListRangeData_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRangeData_default_instance_;
    new (ptr) ::OuterMsg::RankListRangeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRangeData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListRangeData_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListRangeData_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RankListRangeData_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListRangeData_MapDataEntry_DoNotUse_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRangeData_MapDataEntry_DoNotUse_default_instance_;
    new (ptr) ::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse();
  }
  ::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListRangeData_MapDataEntry_DoNotUse_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RankListRangeData_MapDataEntry_DoNotUse_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_RankListRank_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRank_default_instance_;
    new (ptr) ::OuterMsg::RankListRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRank::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListRank_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListRank_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListRankAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRankAck_default_instance_;
    new (ptr) ::OuterMsg::RankListRankAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRankAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RankListRankAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RankListRankAck_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RankListRankAck_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListRankAck_MapDataEntry_DoNotUse_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRankAck_MapDataEntry_DoNotUse_default_instance_;
    new (ptr) ::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse();
  }
  ::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankListRankAck_MapDataEntry_DoNotUse_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RankListRankAck_MapDataEntry_DoNotUse_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_RankListRankArray_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRankArray_default_instance_;
    new (ptr) ::OuterMsg::RankListRankArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRankArray::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListRankArray_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListRankArray_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RankListRankArrayAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListRankArrayAck_default_instance_;
    new (ptr) ::OuterMsg::RankListRankArrayAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListRankArrayAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListRankArrayAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListRankArrayAck_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RankListScore_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListScore_default_instance_;
    new (ptr) ::OuterMsg::RankListScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListScore::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RankListScore_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RankListScore_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_PropertyInt_OuterBase_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListScoreAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListScoreAck_default_instance_;
    new (ptr) ::OuterMsg::RankListScoreAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListScoreAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListScoreAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListScoreAck_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_AttachData_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_RankListSwapRank_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListSwapRank_default_instance_;
    new (ptr) ::OuterMsg::RankListSwapRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListSwapRank::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListSwapRank_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListSwapRank_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RankListSwapRankAck_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListSwapRankAck_default_instance_;
    new (ptr) ::OuterMsg::RankListSwapRankAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListSwapRankAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListSwapRankAck_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListSwapRankAck_OuterMsg_2eproto}, {
      &scc_info_AttachData_OuterMsg_2eproto.base,
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RankListUpdate_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RankListUpdate_default_instance_;
    new (ptr) ::OuterMsg::RankListUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RankListUpdate::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankListUpdate_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RankListUpdate_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RankListScore_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_ReqAccountLogin_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqAccountLogin_default_instance_;
    new (ptr) ::OuterMsg::ReqAccountLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqAccountLogin::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAccountLogin_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqAccountLogin_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ReqAccountLogout_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqAccountLogout_default_instance_;
    new (ptr) ::OuterMsg::ReqAccountLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqAccountLogout::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAccountLogout_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqAccountLogout_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckEnterGameSuccess_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqAckEnterGameSuccess_default_instance_;
    new (ptr) ::OuterMsg::ReqAckEnterGameSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqAckEnterGameSuccess::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckEnterGameSuccess_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqAckEnterGameSuccess_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ReqConnectWorld_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqConnectWorld_default_instance_;
    new (ptr) ::OuterMsg::ReqConnectWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqConnectWorld::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqConnectWorld_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqConnectWorld_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqCreateRole_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqCreateRole_default_instance_;
    new (ptr) ::OuterMsg::ReqCreateRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqCreateRole::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqCreateRole_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ReqCreateRole_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_ObjectDataPack_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqDeleteLetter_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqDeleteLetter_default_instance_;
    new (ptr) ::OuterMsg::ReqDeleteLetter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqDeleteLetter::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqDeleteLetter_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqDeleteLetter_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqDeleteRole_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqDeleteRole_default_instance_;
    new (ptr) ::OuterMsg::ReqDeleteRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqDeleteRole::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqDeleteRole_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqDeleteRole_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ReqEnterGameServer_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::OuterMsg::ReqEnterGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqEnterGameServer_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqEnterGameServer_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqLeaveGameServer_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::OuterMsg::ReqLeaveGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqLeaveGameServer_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqLeaveGameServer_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ReqLookLetter_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqLookLetter_default_instance_;
    new (ptr) ::OuterMsg::ReqLookLetter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqLookLetter::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqLookLetter_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqLookLetter_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqRoleList_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ReqRoleList_default_instance_;
    new (ptr) ::OuterMsg::ReqRoleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ReqRoleList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqRoleList_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqRoleList_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_RoleLiteInfo_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RoleLiteInfo_default_instance_;
    new (ptr) ::OuterMsg::RoleLiteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RoleLiteInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleLiteInfo_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoleLiteInfo_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RoleOfflineNotify_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RoleOfflineNotify_default_instance_;
    new (ptr) ::OuterMsg::RoleOfflineNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RoleOfflineNotify::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleOfflineNotify_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoleOfflineNotify_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RoleOnlineNotify_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RoleOnlineNotify_default_instance_;
    new (ptr) ::OuterMsg::RoleOnlineNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RoleOnlineNotify::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleOnlineNotify_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoleOnlineNotify_OuterMsg_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ServerConnectInfo_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerConnectInfo_default_instance_;
    new (ptr) ::OuterMsg::ServerConnectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ServerConnectInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConnectInfo_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerConnectInfo_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ServerConnectList_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerConnectList_default_instance_;
    new (ptr) ::OuterMsg::ServerConnectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ServerConnectList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerConnectList_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServerConnectList_OuterMsg_2eproto}, {
      &scc_info_ServerConnectInfo_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_ServerHeartBeat_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerHeartBeat_default_instance_;
    new (ptr) ::OuterMsg::ServerHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ServerHeartBeat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerHeartBeat_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerHeartBeat_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfo_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerInfo_default_instance_;
    new (ptr) ::OuterMsg::ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ServerInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerInfo_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfoReport_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerInfoReport_default_instance_;
    new (ptr) ::OuterMsg::ServerInfoReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ServerInfoReport::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfoReport_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerInfoReport_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfoReportList_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerInfoReportList_default_instance_;
    new (ptr) ::OuterMsg::ServerInfoReportList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ServerInfoReportList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfoReportList_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServerInfoReportList_OuterMsg_2eproto}, {
      &scc_info_ServerInfoReportList_ServerListEntry_DoNotUse_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_ServerInfoReportList_ServerListEntry_DoNotUse_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ServerInfoReportList_ServerListEntry_DoNotUse_default_instance_;
    new (ptr) ::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse();
  }
  ::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfoReportList_ServerListEntry_DoNotUse_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServerInfoReportList_ServerListEntry_DoNotUse_OuterMsg_2eproto}, {
      &scc_info_ServerInfoReport_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_ViewAdd_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewAdd_default_instance_;
    new (ptr) ::OuterMsg::ViewAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewAdd::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewAdd_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViewAdd_OuterMsg_2eproto}, {
      &scc_info_PropertyList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ViewCellProperty_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewCellProperty_default_instance_;
    new (ptr) ::OuterMsg::ViewCellProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewCellProperty::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewCellProperty_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViewCellProperty_OuterMsg_2eproto}, {
      &scc_info_PropertyList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ViewCellRecord_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewCellRecord_default_instance_;
    new (ptr) ::OuterMsg::ViewCellRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewCellRecord::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewCellRecord_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViewCellRecord_OuterMsg_2eproto}, {
      &scc_info_RecordList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ViewChange_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewChange_default_instance_;
    new (ptr) ::OuterMsg::ViewChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewChange::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewChange_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ViewChange_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ViewClose_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewClose_default_instance_;
    new (ptr) ::OuterMsg::ViewClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewClose::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewClose_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ViewClose_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_ViewCreate_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewCreate_default_instance_;
    new (ptr) ::OuterMsg::ViewCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewCreate::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewCreate_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViewCreate_OuterMsg_2eproto}, {
      &scc_info_PropertyList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ViewProperty_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewProperty_default_instance_;
    new (ptr) ::OuterMsg::ViewProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewProperty::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewProperty_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViewProperty_OuterMsg_2eproto}, {
      &scc_info_PropertyList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ViewRecord_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewRecord_default_instance_;
    new (ptr) ::OuterMsg::ViewRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewRecord::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewRecord_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViewRecord_OuterMsg_2eproto}, {
      &scc_info_RecordList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ViewRemove_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ViewRemove_default_instance_;
    new (ptr) ::OuterMsg::ViewRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ViewRemove::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewRemove_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ViewRemove_OuterMsg_2eproto}, {}};

static void InitDefaultsscc_info_WorldParam_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_WorldParam_default_instance_;
    new (ptr) ::OuterMsg::WorldParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::WorldParam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldParam_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WorldParam_OuterMsg_2eproto}, {
      &scc_info_WorldParam_ExtraServerEntry_DoNotUse_OuterMsg_2eproto.base,}};

static void InitDefaultsscc_info_WorldParam_ExtraServerEntry_DoNotUse_OuterMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_WorldParam_ExtraServerEntry_DoNotUse_default_instance_;
    new (ptr) ::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse();
  }
  ::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldParam_ExtraServerEntry_DoNotUse_OuterMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WorldParam_ExtraServerEntry_DoNotUse_OuterMsg_2eproto}, {
      &scc_info_ServerConnectInfo_OuterMsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OuterMsg_2eproto[92];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_OuterMsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OuterMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OuterMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgEmpty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgReply, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgReply, extra_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCreate, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCreate, capacity_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCreate, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewAdd, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewAdd, index_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewAdd, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRemove, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRemove, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewChange, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewChange, old_index_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewChange, new_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewClose, view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewProperty, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewProperty, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRecord, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRecord, opera_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewRecord, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellProperty, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellProperty, index_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellProperty, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellRecord, view_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellRecord, index_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellRecord, opera_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ViewCellRecord, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectVisRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectVisRecord, ident_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectVisRecord, opera_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectVisRecord, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgBase, player_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgBase, msg_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgBase, player_Client_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::MsgBase, hash_ident_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckEventResult, event_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckEventResult, event_object_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckEventResult, event_client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, password_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, security_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, clientVersion_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, clientMAC_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, device_info_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, extra_info_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, platform_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, world_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, login_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogin, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogout, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAccountLogout, extra_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_port_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_max_online_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_cur_count_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_state_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, server_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, app_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, district_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, maintain_ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, maintain_port_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, wlan_ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, wlan_port_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, notes_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, state_info_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, net_callback_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReport, net_callback_sock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::NetTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::NetTest, client_sock_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::NetTest, client_send_time_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::NetTest, src_server_sock_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::NetTest, word_server_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::NetTest, data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfoReportList, server_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfo, wait_count_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerHeartBeat, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckWorldList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckWorldList, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, world_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, sender_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, login_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, clientVersion_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqConnectWorld, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, world_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, sender_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, login_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, world_ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, world_port_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, world_key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, world_param_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, client_ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckConnectWorldResult, event_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::WorldParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::WorldParam, extra_server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqRoleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqRoleList, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleLiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleLiteInfo, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleLiteInfo, info_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleLiteInfo, open_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckRoleLiteInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckRoleLiteInfoList, char_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckRoleLiteInfoList, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqCreateRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqCreateRole, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqCreateRole, noob_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqCreateRole, client_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqCreateRole, msg_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqCreateRole, roleData_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqDeleteRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqDeleteRole, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqDeleteRole, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOnlineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOnlineNotify, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOnlineNotify, game_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOnlineNotify, proxy_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOnlineNotify, client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOfflineNotify, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOfflineNotify, game_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RoleOfflineNotify, proxy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, device_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, device_mac_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqEnterGameServer, os_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAckEnterGameSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqAckEnterGameSuccess, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqLeaveGameServer, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::CommandMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::CommandMsg, Id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::CommandMsg, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::CommandMsg, target_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::CommandMsg, target_class_Name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::CommandMsg, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, ID_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, sender_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, sendname_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, time_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, receiver_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, title_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, content_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, args_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterData, append_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterDataPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterDataPack, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LetterDataPack, letter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqLookLetter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqLookLetter, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqLookLetter, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqDeleteLetter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqDeleteLetter, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ReqDeleteLetter, letterID_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckQueryLetter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckQueryLetter, self_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckQueryLetter, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PubOpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PubOpData, PubName_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PubOpData, pub_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckResult, event_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckResult, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AckResult, obj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PubNameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PubNameData, class_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PubNameData, object_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRemoveRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRemoveRoom, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatAddPlayerToRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatAddPlayerToRoom, player_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatAddPlayerToRoom, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatAddPlayerToRoom, room_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatAddPlayerToRoom, chat_recording_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatAddPlayerToRoom, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRemovePlayerToRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRemovePlayerToRoom, player_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRemovePlayerToRoom, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRemovePlayerToRoom, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatPlayerInfo, player_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatPlayerInfo, custom_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatPlayerBanned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatPlayerBanned, player_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatPlayerBanned, banned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatClientData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatClientData, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgRoom, room_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgRoom, msg_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgRoom, sender_info_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgRoom, sender_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgPlayer, target_player_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgPlayer, msg_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgPlayer, sender_info_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatMsgPlayer, sender_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRecording, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRecording, room_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRecording, start_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRecording, count_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ChatRecording, msg_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PlayerRename, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PlayerRename, account_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PlayerRename, player_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PlayerRename, player_name_new_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PlayerRename, player_name_old_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, server_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, msg_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, game_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, object_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, socket_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ExtraMsg, msg_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AttachData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AttachData, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::AttachData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreate, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreate, limit_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreate, order_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreate, data_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreate, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreateAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreateAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListCreateAck, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDelete, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDelete, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDeleteAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDeleteAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDeleteAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDeleteAck, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScore, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScore, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScore, arr_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScore, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScore, insert_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScoreAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScoreAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScoreAck, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScoreAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListScoreAck, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData, map_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListData, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck, map_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataAck, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArray, id_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArray, name_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArray, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck_RankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck_RankData, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck_RankData, data_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck, name_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck, data_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListDataArrayAck, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRank, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRank, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRank, no_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRank, data_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRank, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, rank_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, map_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankAck, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArray, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArray, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArray, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArrayAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArrayAck, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArrayAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArrayAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArrayAck, ids_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRankArrayAck, ranks_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData, rank_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeData, map_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, start_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, count_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, arr_rank_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, no_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, data_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRange, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, start_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, count_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, max_rank_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListRangeAck, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListInit, create_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListInit, data_rank_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListInit, finish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListUpdate, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListUpdate, del_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListUpdate, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRank, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRank, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRank, key1_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRank, key2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, attach_data_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, key1_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, key2_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, rank1_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RankListSwapRankAck, rank2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectInfo, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectInfo, port_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectInfo, webport_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectInfo, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ClientConnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ClientConnectInfo, client_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ClientConnectInfo, player_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ClientConnectInfo, game_id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ClientConnectInfo, gate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GuidName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GuidName, id_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GuidName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GuidNameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GuidNameList, state_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GuidNameList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::OptServerID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::OptServerID, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ColdDataStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ColdDataStore, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LogToDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LogToDB, rec_name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::LogToDB, data_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectList, OptType_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ServerConnectList, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OuterMsg::MsgEmpty)},
  { 5, -1, sizeof(::OuterMsg::MsgReply)},
  { 12, -1, sizeof(::OuterMsg::ViewCreate)},
  { 20, -1, sizeof(::OuterMsg::ViewAdd)},
  { 28, -1, sizeof(::OuterMsg::ViewRemove)},
  { 35, -1, sizeof(::OuterMsg::ViewChange)},
  { 43, -1, sizeof(::OuterMsg::ViewClose)},
  { 49, -1, sizeof(::OuterMsg::ViewProperty)},
  { 56, -1, sizeof(::OuterMsg::ViewRecord)},
  { 64, -1, sizeof(::OuterMsg::ViewCellProperty)},
  { 72, -1, sizeof(::OuterMsg::ViewCellRecord)},
  { 81, -1, sizeof(::OuterMsg::ObjectVisRecord)},
  { 89, -1, sizeof(::OuterMsg::MsgBase)},
  { 98, -1, sizeof(::OuterMsg::AckEventResult)},
  { 106, -1, sizeof(::OuterMsg::ReqAccountLogin)},
  { 122, -1, sizeof(::OuterMsg::ReqAccountLogout)},
  { 129, -1, sizeof(::OuterMsg::ServerInfoReport)},
  { 152, -1, sizeof(::OuterMsg::NetTest)},
  { 162, 169, sizeof(::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse)},
  { 171, -1, sizeof(::OuterMsg::ServerInfoReportList)},
  { 177, -1, sizeof(::OuterMsg::ServerInfo)},
  { 186, -1, sizeof(::OuterMsg::ServerHeartBeat)},
  { 192, -1, sizeof(::OuterMsg::AckWorldList)},
  { 198, -1, sizeof(::OuterMsg::ReqConnectWorld)},
  { 209, -1, sizeof(::OuterMsg::AckConnectWorldResult)},
  { 224, 231, sizeof(::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse)},
  { 233, -1, sizeof(::OuterMsg::WorldParam)},
  { 239, -1, sizeof(::OuterMsg::ReqRoleList)},
  { 245, -1, sizeof(::OuterMsg::RoleLiteInfo)},
  { 253, -1, sizeof(::OuterMsg::AckRoleLiteInfoList)},
  { 260, -1, sizeof(::OuterMsg::ReqCreateRole)},
  { 270, -1, sizeof(::OuterMsg::ReqDeleteRole)},
  { 277, -1, sizeof(::OuterMsg::RoleOnlineNotify)},
  { 286, -1, sizeof(::OuterMsg::RoleOfflineNotify)},
  { 294, -1, sizeof(::OuterMsg::ReqEnterGameServer)},
  { 305, -1, sizeof(::OuterMsg::ReqAckEnterGameSuccess)},
  { 311, -1, sizeof(::OuterMsg::ReqLeaveGameServer)},
  { 317, -1, sizeof(::OuterMsg::CommandMsg)},
  { 327, -1, sizeof(::OuterMsg::LetterData)},
  { 341, -1, sizeof(::OuterMsg::LetterDataPack)},
  { 348, -1, sizeof(::OuterMsg::ReqLookLetter)},
  { 355, -1, sizeof(::OuterMsg::ReqDeleteLetter)},
  { 362, -1, sizeof(::OuterMsg::AckQueryLetter)},
  { 369, -1, sizeof(::OuterMsg::PubOpData)},
  { 376, -1, sizeof(::OuterMsg::AckResult)},
  { 384, -1, sizeof(::OuterMsg::PubNameData)},
  { 391, -1, sizeof(::OuterMsg::ChatRemoveRoom)},
  { 397, -1, sizeof(::OuterMsg::ChatAddPlayerToRoom)},
  { 407, -1, sizeof(::OuterMsg::ChatRemovePlayerToRoom)},
  { 415, -1, sizeof(::OuterMsg::ChatPlayerInfo)},
  { 422, -1, sizeof(::OuterMsg::ChatPlayerBanned)},
  { 429, -1, sizeof(::OuterMsg::ChatClientData)},
  { 435, -1, sizeof(::OuterMsg::ChatMsgRoom)},
  { 444, -1, sizeof(::OuterMsg::ChatMsgPlayer)},
  { 453, -1, sizeof(::OuterMsg::ChatRecording)},
  { 462, -1, sizeof(::OuterMsg::PlayerRename)},
  { 471, -1, sizeof(::OuterMsg::ExtraMsg)},
  { 483, -1, sizeof(::OuterMsg::AttachData)},
  { 490, -1, sizeof(::OuterMsg::RankListCreate)},
  { 500, -1, sizeof(::OuterMsg::RankListCreateAck)},
  { 508, -1, sizeof(::OuterMsg::RankListDelete)},
  { 515, -1, sizeof(::OuterMsg::RankListDeleteAck)},
  { 523, -1, sizeof(::OuterMsg::RankListScore)},
  { 533, -1, sizeof(::OuterMsg::RankListScoreAck)},
  { 542, 549, sizeof(::OuterMsg::RankListData_MapDataEntry_DoNotUse)},
  { 551, -1, sizeof(::OuterMsg::RankListData)},
  { 559, 566, sizeof(::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse)},
  { 568, -1, sizeof(::OuterMsg::RankListDataAck)},
  { 577, -1, sizeof(::OuterMsg::RankListDataArray)},
  { 585, -1, sizeof(::OuterMsg::RankListDataArrayAck_RankData)},
  { 592, -1, sizeof(::OuterMsg::RankListDataArrayAck)},
  { 601, -1, sizeof(::OuterMsg::RankListRank)},
  { 611, 618, sizeof(::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse)},
  { 620, -1, sizeof(::OuterMsg::RankListRankAck)},
  { 631, -1, sizeof(::OuterMsg::RankListRankArray)},
  { 639, -1, sizeof(::OuterMsg::RankListRankArrayAck)},
  { 649, 656, sizeof(::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse)},
  { 658, -1, sizeof(::OuterMsg::RankListRangeData)},
  { 666, -1, sizeof(::OuterMsg::RankListRange)},
  { 678, -1, sizeof(::OuterMsg::RankListRangeAck)},
  { 690, -1, sizeof(::OuterMsg::RankListInit)},
  { 698, -1, sizeof(::OuterMsg::RankListUpdate)},
  { 706, -1, sizeof(::OuterMsg::RankListSwapRank)},
  { 715, -1, sizeof(::OuterMsg::RankListSwapRankAck)},
  { 727, -1, sizeof(::OuterMsg::ServerConnectInfo)},
  { 737, -1, sizeof(::OuterMsg::ClientConnectInfo)},
  { 746, -1, sizeof(::OuterMsg::GuidName)},
  { 753, -1, sizeof(::OuterMsg::GuidNameList)},
  { 760, -1, sizeof(::OuterMsg::OptServerID)},
  { 766, -1, sizeof(::OuterMsg::ColdDataStore)},
  { 772, -1, sizeof(::OuterMsg::LogToDB)},
  { 779, -1, sizeof(::OuterMsg::ServerConnectList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_MsgEmpty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_MsgReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewCellProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ViewCellRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ObjectVisRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_MsgBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AckEventResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqAccountLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqAccountLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerInfoReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_NetTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerInfoReportList_ServerListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerInfoReportList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AckWorldList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqConnectWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AckConnectWorldResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_WorldParam_ExtraServerEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_WorldParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqRoleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RoleLiteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AckRoleLiteInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqCreateRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqDeleteRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RoleOnlineNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RoleOfflineNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqAckEnterGameSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_CommandMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_LetterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_LetterDataPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqLookLetter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ReqDeleteLetter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AckQueryLetter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PubOpData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PubNameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatRemoveRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatAddPlayerToRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatRemovePlayerToRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatPlayerBanned_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatClientData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatMsgRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatMsgPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ChatRecording_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PlayerRename_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ExtraMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_AttachData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListCreateAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDelete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDeleteAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListScoreAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListData_MapDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDataAck_MapDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDataAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDataArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDataArrayAck_RankData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListDataArrayAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRankAck_MapDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRankAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRankArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRankArrayAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRangeData_MapDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRangeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListRangeAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListSwapRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RankListSwapRankAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerConnectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ClientConnectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_GuidName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_GuidNameList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_OptServerID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ColdDataStore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_LogToDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ServerConnectList_default_instance_),
};

const char descriptor_table_protodef_OuterMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016OuterMsg.proto\022\010OuterMsg\032\017OuterBase.pr"
  "oto\032\016NFDefine.proto\"\n\n\010MsgEmpty\"0\n\010MsgRe"
  "ply\022\020\n\010ret_code\030\001 \001(\005\022\022\n\nextra_data\030\002 \001("
  "\014\"^\n\nViewCreate\022\017\n\007view_id\030\001 \001(\005\022\020\n\010capa"
  "city\030\002 \001(\005\022-\n\rproperty_list\030\003 \001(\0132\026.Oute"
  "rMsg.PropertyList\"X\n\007ViewAdd\022\017\n\007view_id\030"
  "\001 \001(\005\022\r\n\005index\030\002 \001(\005\022-\n\rproperty_list\030\003 "
  "\001(\0132\026.OuterMsg.PropertyList\",\n\nViewRemov"
  "e\022\017\n\007view_id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\"C\n\nVie"
  "wChange\022\017\n\007view_id\030\001 \001(\005\022\021\n\told_index\030\002 "
  "\001(\005\022\021\n\tnew_index\030\003 \001(\005\"\034\n\tViewClose\022\017\n\007v"
  "iew_id\030\001 \001(\005\"N\n\014ViewProperty\022\017\n\007view_id\030"
  "\001 \001(\005\022-\n\rproperty_list\030\002 \001(\0132\026.OuterMsg."
  "PropertyList\"z\n\nViewRecord\022\017\n\007view_id\030\001 "
  "\001(\005\0220\n\nopera_type\030\002 \001(\0162\034.OuterMsg.Recor"
  "dOperatorType\022)\n\013record_list\030\003 \001(\0132\024.Out"
  "erMsg.RecordList\"a\n\020ViewCellProperty\022\017\n\007"
  "view_id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022-\n\rproperty"
  "_list\030\003 \001(\0132\026.OuterMsg.PropertyList\"\215\001\n\016"
  "ViewCellRecord\022\017\n\007view_id\030\001 \001(\005\022\r\n\005index"
  "\030\002 \001(\005\0220\n\nopera_type\030\003 \001(\0162\034.OuterMsg.Re"
  "cordOperatorType\022)\n\013record_list\030\004 \001(\0132\024."
  "OuterMsg.RecordList\"\215\001\n\017ObjectVisRecord\022"
  "\035\n\005ident\030\001 \001(\0132\016.OuterMsg.GUID\0220\n\nopera_"
  "type\030\002 \001(\0162\034.OuterMsg.RecordOperatorType"
  "\022)\n\013record_list\030\003 \001(\0132\024.OuterMsg.RecordL"
  "ist\"\216\001\n\007MsgBase\022!\n\tplayer_id\030\001 \001(\0132\016.Out"
  "erMsg.GUID\022\020\n\010msg_data\030\002 \001(\014\022*\n\022player_C"
  "lient_list\030\003 \003(\0132\016.OuterMsg.GUID\022\"\n\nhash"
  "_ident\030\004 \001(\0132\016.OuterMsg.GUID\"\212\001\n\016AckEven"
  "tResult\022,\n\nevent_code\030\001 \001(\0162\030.OuterMsg.E"
  "GameEventCode\022$\n\014event_object\030\002 \001(\0132\016.Ou"
  "terMsg.GUID\022$\n\014event_client\030\003 \001(\0132\016.Oute"
  "rMsg.GUID\"\354\001\n\017ReqAccountLogin\022\017\n\007account"
  "\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\022\025\n\rsecurity_cod"
  "e\030\003 \001(\014\022\025\n\rclientVersion\030\004 \001(\005\022\021\n\tclient"
  "MAC\030\005 \001(\003\022\023\n\013device_info\030\006 \001(\014\022\022\n\nextra_"
  "info\030\007 \001(\014\022\025\n\rplatform_type\030\010 \001(\005\022\020\n\010wor"
  "ld_id\030\t \001(\005\022\020\n\010login_id\030\n \001(\005\022\021\n\tclient_"
  "ip\030\013 \001(\014\"7\n\020ReqAccountLogout\022\017\n\007account\030"
  "\002 \001(\014\022\022\n\nextra_info\030\003 \001(\014\"\243\003\n\020ServerInfo"
  "Report\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_name"
  "\030\002 \001(\014\022\021\n\tserver_ip\030\003 \001(\014\022\023\n\013server_port"
  "\030\004 \001(\005\022\031\n\021server_max_online\030\005 \001(\005\022\030\n\020ser"
  "ver_cur_count\030\006 \001(\005\022,\n\014server_state\030\007 \001("
  "\0162\026.OuterMsg.EServerState\022\023\n\013server_type"
  "\030\010 \001(\005\022\016\n\006app_id\030\t \001(\005\022\023\n\013district_id\030\n "
  "\001(\005\022\023\n\013maintain_ip\030\013 \001(\014\022\025\n\rmaintain_por"
  "t\030\014 \001(\005\022\017\n\007wlan_ip\030\r \001(\014\022\021\n\twlan_port\030\016 "
  "\001(\005\022\r\n\005notes\030\017 \001(\014\022\022\n\nstate_info\030\020 \001(\014\022\024"
  "\n\014net_callback\030\021 \001(\004\022\031\n\021net_callback_soc"
  "k\030\022 \001(\004\"w\n\007NetTest\022\023\n\013client_sock\030\001 \001(\003\022"
  "\030\n\020client_send_time\030\002 \001(\003\022\027\n\017src_server_"
  "sock\030\003 \001(\003\022\026\n\016word_server_id\030\004 \001(\005\022\014\n\004da"
  "ta\030\005 \001(\014\"\252\001\n\024ServerInfoReportList\022C\n\013ser"
  "ver_list\030\001 \003(\0132..OuterMsg.ServerInfoRepo"
  "rtList.ServerListEntry\032M\n\017ServerListEntr"
  "y\022\013\n\003key\030\001 \001(\005\022)\n\005value\030\002 \001(\0132\032.OuterMsg"
  ".ServerInfoReport:\0028\001\"i\n\nServerInfo\022\021\n\ts"
  "erver_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\022\n\nwait_cou"
  "nt\030\003 \001(\005\022&\n\006status\030\004 \001(\0162\026.OuterMsg.ESer"
  "verState\" \n\017ServerHeartBeat\022\r\n\005count\030\001 \001"
  "(\005\"2\n\014AckWorldList\022\"\n\004info\030\001 \003(\0132\024.Outer"
  "Msg.ServerInfo\"\220\001\n\017ReqConnectWorld\022\020\n\010wo"
  "rld_id\030\001 \001(\005\022\017\n\007account\030\002 \001(\014\022\036\n\006sender\030"
  "\003 \001(\0132\016.OuterMsg.GUID\022\020\n\010login_id\030\004 \001(\005\022"
  "\025\n\rclientVersion\030\005 \001(\005\022\021\n\tclient_ip\030\006 \001("
  "\014\"\221\002\n\025AckConnectWorldResult\022\020\n\010world_id\030"
  "\001 \001(\005\022\036\n\006sender\030\002 \001(\0132\016.OuterMsg.GUID\022\020\n"
  "\010login_id\030\003 \001(\005\022\017\n\007account\030\004 \001(\014\022\020\n\010worl"
  "d_ip\030\005 \001(\014\022\022\n\nworld_port\030\006 \001(\005\022\021\n\tworld_"
  "key\030\007 \001(\014\022)\n\013world_param\030\010 \001(\0132\024.OuterMs"
  "g.WorldParam\022\021\n\tclient_ip\030\t \001(\014\022,\n\nevent"
  "_code\030\n \001(\0162\030.OuterMsg.EGameEventCode\"\232\001"
  "\n\nWorldParam\022;\n\014extra_server\030\001 \003(\0132%.Out"
  "erMsg.WorldParam.ExtraServerEntry\032O\n\020Ext"
  "raServerEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001("
  "\0132\033.OuterMsg.ServerConnectInfo:\0028\001\"\036\n\013Re"
  "qRoleList\022\017\n\007account\030\001 \001(\014\"K\n\014RoleLiteIn"
  "fo\022\032\n\002id\030\001 \001(\0132\016.OuterMsg.GUID\022\014\n\004info\030\002"
  " \001(\014\022\021\n\topen_time\030\003 \001(\005\"Q\n\023AckRoleLiteIn"
  "foList\022)\n\tchar_data\030\001 \003(\0132\026.OuterMsg.Rol"
  "eLiteInfo\022\017\n\007account\030\002 \001(\014\"\224\001\n\rReqCreate"
  "Role\022\017\n\007account\030\001 \001(\014\022\021\n\tnoob_name\030\002 \001(\014"
  "\022!\n\tclient_id\030\003 \001(\0132\016.OuterMsg.GUID\022\020\n\010m"
  "sg_data\030\004 \001(\014\022*\n\010roleData\030\005 \001(\0132\030.OuterM"
  "sg.ObjectDataPack\".\n\rReqDeleteRole\022\017\n\007ac"
  "count\030\001 \001(\014\022\014\n\004name\030\002 \001(\014\"m\n\020RoleOnlineN"
  "otify\022\034\n\004self\030\001 \001(\0132\016.OuterMsg.GUID\022\014\n\004g"
  "ame\030\002 \001(\005\022\r\n\005proxy\030\003 \001(\005\022\036\n\006client\030\004 \001(\013"
  "2\016.OuterMsg.GUID\"N\n\021RoleOfflineNotify\022\034\n"
  "\004self\030\001 \001(\0132\016.OuterMsg.GUID\022\014\n\004game\030\002 \001("
  "\005\022\r\n\005proxy\030\003 \001(\005\"\227\001\n\022ReqEnterGameServer\022"
  "\032\n\002id\030\001 \001(\0132\016.OuterMsg.GUID\022\017\n\007account\030\002"
  " \001(\014\022\n\n\002ip\030\003 \001(\014\022\021\n\tdevice_id\030\004 \001(\014\022\022\n\nd"
  "evice_mac\030\005 \001(\014\022!\n\007os_type\030\006 \001(\0162\020.Outer"
  "Msg.OsType\"%\n\026ReqAckEnterGameSuccess\022\013\n\003"
  "arg\030\001 \001(\005\"!\n\022ReqLeaveGameServer\022\013\n\003arg\030\001"
  " \001(\005\"\225\001\n\nCommandMsg\022\n\n\002Id\030\001 \001(\005\022\034\n\004self\030"
  "\002 \001(\0132\016.OuterMsg.GUID\022\036\n\006target\030\003 \001(\0132\016."
  "OuterMsg.GUID\022\031\n\021target_class_Name\030\004 \001(\014"
  "\022\"\n\004data\030\005 \001(\0132\024.OuterMsg.PBDataList\"\316\001\n"
  "\nLetterData\022\n\n\002ID\030\001 \001(\014\022\036\n\006sender\030\002 \001(\0132"
  "\016.OuterMsg.GUID\022\020\n\010sendname\030\003 \001(\014\022\014\n\004tim"
  "e\030\004 \001(\003\022 \n\010receiver\030\005 \001(\0132\016.OuterMsg.GUI"
  "D\022\r\n\005title\030\006 \001(\014\022\017\n\007content\030\007 \001(\014\022\"\n\004arg"
  "s\030\010 \001(\0132\024.OuterMsg.PBDataList\022\016\n\006append\030"
  "\t \001(\014\"T\n\016LetterDataPack\022\034\n\004self\030\001 \001(\0132\016."
  "OuterMsg.GUID\022$\n\006letter\030\002 \003(\0132\024.OuterMsg"
  ".LetterData\":\n\rReqLookLetter\022\034\n\004self\030\001 \001"
  "(\0132\016.OuterMsg.GUID\022\013\n\003num\030\002 \001(\005\"A\n\017ReqDe"
  "leteLetter\022\034\n\004self\030\001 \001(\0132\016.OuterMsg.GUID"
  "\022\020\n\010letterID\030\002 \001(\014\";\n\016AckQueryLetter\022\034\n\004"
  "self\030\001 \001(\0132\016.OuterMsg.GUID\022\013\n\003num\030\002 \001(\005\""
  "<\n\tPubOpData\022\017\n\007PubName\030\001 \001(\014\022\036\n\006pub_id\030"
  "\002 \001(\0132\016.OuterMsg.GUID\"g\n\tAckResult\022,\n\nev"
  "ent_code\030\001 \001(\0162\030.OuterMsg.EGameEventCode"
  "\022\014\n\004name\030\002 \001(\014\022\036\n\006obj_id\030\003 \001(\0132\016.OuterMs"
  "g.GUID\"P\n\013PubNameData\022\022\n\nclass_name\030\001 \001("
  "\014\022-\n\013object_data\030\002 \001(\0132\030.OuterMsg.Object"
  "DataPack\"\035\n\016ChatRemoveRoom\022\013\n\003key\030\001 \001(\014\""
  "y\n\023ChatAddPlayerToRoom\022\036\n\006player\030\001 \001(\0132\016"
  ".OuterMsg.GUID\022\013\n\003key\030\002 \001(\014\022\017\n\007room_id\030\003"
  " \001(\005\022\026\n\016chat_recording\030\004 \001(\005\022\014\n\004type\030\005 \001"
  "(\005\"S\n\026ChatRemovePlayerToRoom\022\036\n\006player\030\001"
  " \001(\0132\016.OuterMsg.GUID\022\013\n\003key\030\002 \001(\014\022\014\n\004typ"
  "e\030\003 \001(\005\"E\n\016ChatPlayerInfo\022\036\n\006player\030\001 \001("
  "\0132\016.OuterMsg.GUID\022\023\n\013custom_info\030\002 \001(\014\"B"
  "\n\020ChatPlayerBanned\022\036\n\006player\030\001 \001(\0132\016.Out"
  "erMsg.GUID\022\016\n\006banned\030\002 \001(\005\"0\n\016ChatClient"
  "Data\022\036\n\006player\030\001 \001(\0132\016.OuterMsg.GUID\"g\n\013"
  "ChatMsgRoom\022\017\n\007room_id\030\001 \001(\005\022\013\n\003msg\030\002 \001("
  "\014\022\023\n\013sender_info\030\003 \001(\014\022%\n\rsender_player\030"
  "\004 \001(\0132\016.OuterMsg.GUID\"\177\n\rChatMsgPlayer\022%"
  "\n\rtarget_player\030\001 \001(\0132\016.OuterMsg.GUID\022\013\n"
  "\003msg\030\002 \001(\014\022\023\n\013sender_info\030\003 \001(\014\022%\n\rsende"
  "r_player\030\004 \001(\0132\016.OuterMsg.GUID\"P\n\rChatRe"
  "cording\022\017\n\007room_id\030\001 \001(\005\022\r\n\005start\030\002 \001(\005\022"
  "\r\n\005count\030\003 \001(\005\022\020\n\010msg_list\030\004 \003(\014\"t\n\014Play"
  "erRename\022\017\n\007account\030\001 \001(\014\022!\n\tplayer_id\030\002"
  " \001(\0132\016.OuterMsg.GUID\022\027\n\017player_name_new\030"
  "\003 \001(\014\022\027\n\017player_name_old\030\004 \001(\014\"\223\001\n\010Extra"
  "Msg\022\023\n\013server_type\030\001 \001(\005\022\016\n\006msg_id\030\002 \001(\005"
  "\022\017\n\007game_id\030\003 \001(\005\022!\n\tobject_id\030\004 \001(\0132\016.O"
  "uterMsg.GUID\022\014\n\004data\030\005 \001(\014\022\016\n\006socket\030\006 \001"
  "(\003\022\020\n\010msg_type\030\007 \001(\005\"&\n\nAttachData\022\n\n\002id"
  "\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"\221\001\n\016RankListCreate\022"
  "\014\n\004name\030\001 \001(\014\022\r\n\005limit\030\002 \001(\005\022$\n\005order\030\003 "
  "\003(\0132\025.OuterMsg.PropertyInt\022\021\n\tdata_name\030"
  "\004 \003(\014\022)\n\013attach_data\030\005 \001(\0132\024.OuterMsg.At"
  "tachData\"v\n\021RankListCreateAck\022\014\n\004name\030\001 "
  "\001(\014\022(\n\010ret_code\030\002 \001(\0162\026.OuterMsg.RankLis"
  "tCode\022)\n\013attach_data\030\003 \001(\0132\024.OuterMsg.At"
  "tachData\"I\n\016RankListDelete\022\014\n\004name\030\001 \001(\014"
  "\022)\n\013attach_data\030\002 \001(\0132\024.OuterMsg.AttachD"
  "ata\"v\n\021RankListDeleteAck\022\014\n\004name\030\001 \001(\014\022("
  "\n\010ret_code\030\002 \001(\0162\026.OuterMsg.RankListCode"
  "\022)\n\013attach_data\030\003 \001(\0132\024.OuterMsg.AttachD"
  "ata\"\242\001\n\rRankListScore\022\014\n\004name\030\001 \001(\014\022\032\n\002i"
  "d\030\002 \001(\0132\016.OuterMsg.GUID\022\'\n\010arr_data\030\003 \003("
  "\0132\025.OuterMsg.PropertyInt\022)\n\013attach_data\030"
  "\004 \001(\0132\024.OuterMsg.AttachData\022\023\n\013insert_ti"
  "me\030\005 \001(\003\"\221\001\n\020RankListScoreAck\022\014\n\004name\030\001 "
  "\001(\014\022\032\n\002id\030\002 \001(\0132\016.OuterMsg.GUID\022(\n\010ret_c"
  "ode\030\003 \001(\0162\026.OuterMsg.RankListCode\022)\n\013att"
  "ach_data\030\004 \001(\0132\024.OuterMsg.AttachData\"\274\001\n"
  "\014RankListData\022\032\n\002id\030\001 \001(\0132\016.OuterMsg.GUI"
  "D\0225\n\010map_data\030\002 \003(\0132#.OuterMsg.RankListD"
  "ata.MapDataEntry\022)\n\013attach_data\030\003 \001(\0132\024."
  "OuterMsg.AttachData\032.\n\014MapDataEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\354\001\n\017RankList"
  "DataAck\022\032\n\002id\030\001 \001(\0132\016.OuterMsg.GUID\0228\n\010m"
  "ap_data\030\002 \003(\0132&.OuterMsg.RankListDataAck"
  ".MapDataEntry\022(\n\010ret_code\030\003 \001(\0162\026.OuterM"
  "sg.RankListCode\022)\n\013attach_data\030\004 \001(\0132\024.O"
  "uterMsg.AttachData\032.\n\014MapDataEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"r\n\021RankListDa"
  "taArray\022\037\n\007id_list\030\001 \003(\0132\016.OuterMsg.GUID"
  "\022\021\n\tname_list\030\002 \003(\014\022)\n\013attach_data\030\003 \001(\013"
  "2\024.OuterMsg.AttachData\"\365\001\n\024RankListDataA"
  "rrayAck\022\021\n\tname_list\030\001 \003(\014\022:\n\tdata_list\030"
  "\002 \003(\0132\'.OuterMsg.RankListDataArrayAck.Ra"
  "nkData\022(\n\010ret_code\030\003 \001(\0162\026.OuterMsg.Rank"
  "ListCode\022)\n\013attach_data\030\004 \001(\0132\024.OuterMsg"
  ".AttachData\0329\n\010RankData\022\032\n\002id\030\001 \001(\0132\016.Ou"
  "terMsg.GUID\022\021\n\tdata_list\030\002 \003(\014\"\207\001\n\014RankL"
  "istRank\022\014\n\004name\030\001 \001(\014\022\032\n\002id\030\002 \001(\0132\016.Oute"
  "rMsg.GUID\022\017\n\007no_data\030\003 \001(\005\022\021\n\tdata_name\030"
  "\004 \003(\014\022)\n\013attach_data\030\005 \001(\0132\024.OuterMsg.At"
  "tachData\"\210\002\n\017RankListRankAck\022\014\n\004name\030\001 \001"
  "(\014\022\032\n\002id\030\002 \001(\0132\016.OuterMsg.GUID\022\014\n\004rank\030\003"
  " \001(\005\0228\n\010map_data\030\004 \003(\0132&.OuterMsg.RankLi"
  "stRankAck.MapDataEntry\022(\n\010ret_code\030\005 \001(\016"
  "2\026.OuterMsg.RankListCode\022)\n\013attach_data\030"
  "\006 \001(\0132\024.OuterMsg.AttachData\032.\n\014MapDataEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"i\n\021R"
  "ankListRankArray\022)\n\013attach_data\030\001 \001(\0132\024."
  "OuterMsg.AttachData\022\014\n\004name\030\003 \001(\014\022\033\n\003ids"
  "\030\004 \003(\0132\016.OuterMsg.GUID\"\245\001\n\024RankListRankA"
  "rrayAck\022)\n\013attach_data\030\001 \001(\0132\024.OuterMsg."
  "AttachData\022(\n\010ret_code\030\002 \001(\0162\026.OuterMsg."
  "RankListCode\022\014\n\004name\030\003 \001(\014\022\033\n\003ids\030\004 \003(\0132"
  "\016.OuterMsg.GUID\022\r\n\005ranks\030\005 \003(\005\"\251\001\n\021RankL"
  "istRangeData\022\032\n\002id\030\001 \001(\0132\016.OuterMsg.GUID"
  "\022\014\n\004rank\030\002 \001(\005\022:\n\010map_data\030\003 \003(\0132(.Outer"
  "Msg.RankListRangeData.MapDataEntry\032.\n\014Ma"
  "pDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\002"
  "8\001\"\234\001\n\rRankListRange\022\014\n\004name\030\001 \001(\014\022\r\n\005st"
  "art\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\020\n\010arr_rank\030\004 \003"
  "(\005\022\017\n\007no_data\030\005 \001(\005\022\021\n\tdata_name\030\006 \003(\014\022)"
  "\n\013attach_data\030\007 \001(\0132\024.OuterMsg.AttachDat"
  "a\"\320\001\n\020RankListRangeAck\022\014\n\004name\030\001 \001(\014\022\r\n\005"
  "start\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\020\n\010max_rank\030\004"
  " \001(\005\022)\n\004data\030\005 \003(\0132\033.OuterMsg.RankListRa"
  "ngeData\022(\n\010ret_code\030\006 \001(\0162\026.OuterMsg.Ran"
  "kListCode\022)\n\013attach_data\030\007 \001(\0132\024.OuterMs"
  "g.AttachData\"t\n\014RankListInit\022(\n\006create\030\001"
  " \001(\0132\030.OuterMsg.RankListCreate\022*\n\tdata_r"
  "ank\030\002 \003(\0132\027.OuterMsg.RankListScore\022\016\n\006fi"
  "nish\030\003 \001(\005\"d\n\016RankListUpdate\022\014\n\004name\030\001 \001"
  "(\014\022\033\n\003del\030\002 \001(\0132\016.OuterMsg.GUID\022\'\n\006updat"
  "e\030\003 \001(\0132\027.OuterMsg.RankListScore\"\207\001\n\020Ran"
  "kListSwapRank\022)\n\013attach_data\030\001 \001(\0132\024.Out"
  "erMsg.AttachData\022\014\n\004name\030\003 \001(\014\022\034\n\004key1\030\004"
  " \001(\0132\016.OuterMsg.GUID\022\034\n\004key2\030\005 \001(\0132\016.Out"
  "erMsg.GUID\"\322\001\n\023RankListSwapRankAck\022)\n\013at"
  "tach_data\030\001 \001(\0132\024.OuterMsg.AttachData\022(\n"
  "\010ret_code\030\002 \001(\0162\026.OuterMsg.RankListCode\022"
  "\014\n\004name\030\003 \001(\014\022\034\n\004key1\030\004 \001(\0132\016.OuterMsg.G"
  "UID\022\034\n\004key2\030\005 \001(\0132\016.OuterMsg.GUID\022\r\n\005ran"
  "k1\030\006 \001(\005\022\r\n\005rank2\030\007 \001(\005\"X\n\021ServerConnect"
  "Info\022\n\n\002id\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\022\014\n\004port\030\003 \001"
  "(\005\022\017\n\007webport\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\"u\n\021Cli"
  "entConnectInfo\022\036\n\006client\030\001 \001(\0132\016.OuterMs"
  "g.GUID\022\036\n\006player\030\002 \001(\0132\016.OuterMsg.GUID\022\017"
  "\n\007game_id\030\003 \001(\005\022\017\n\007gate_id\030\004 \001(\005\"4\n\010Guid"
  "Name\022\032\n\002id\030\001 \001(\0132\016.OuterMsg.GUID\022\014\n\004name"
  "\030\002 \001(\014\"\216\001\n\014GuidNameList\022+\n\005state\030\001 \001(\0162\034"
  ".OuterMsg.GuidNameList.State\022 \n\004list\030\002 \003"
  "(\0132\022.OuterMsg.GuidName\"/\n\005State\022\007\n\003ADD\020\000"
  "\022\014\n\010INIT_ADD\020\001\022\017\n\013INIT_FINISH\020\002\" \n\013OptSe"
  "rverID\022\021\n\tserver_id\030\001 \001(\005\"7\n\rColdDataSto"
  "re\022&\n\004data\030\001 \003(\0132\030.OuterMsg.PropertyStri"
  "ng\"D\n\007LogToDB\022\020\n\010rec_name\030\001 \001(\014\022\'\n\tdata_"
  "list\030\002 \001(\0132\024.OuterMsg.PBDataList\"\236\001\n\021Ser"
  "verConnectList\0225\n\007OptType\030\001 \001(\0162$.OuterM"
  "sg.ServerConnectList.EOptType\022)\n\004data\030\002 "
  "\003(\0132\033.OuterMsg.ServerConnectInfo\"\'\n\010EOpt"
  "Type\022\013\n\007OPT_ADD\020\000\022\016\n\nOPT_REMOVE\020\001b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OuterMsg_2eproto_deps[2] = {
  &::descriptor_table_NFDefine_2eproto,
  &::descriptor_table_OuterBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OuterMsg_2eproto_sccs[92] = {
  &scc_info_AckConnectWorldResult_OuterMsg_2eproto.base,
  &scc_info_AckEventResult_OuterMsg_2eproto.base,
  &scc_info_AckQueryLetter_OuterMsg_2eproto.base,
  &scc_info_AckResult_OuterMsg_2eproto.base,
  &scc_info_AckRoleLiteInfoList_OuterMsg_2eproto.base,
  &scc_info_AckWorldList_OuterMsg_2eproto.base,
  &scc_info_AttachData_OuterMsg_2eproto.base,
  &scc_info_ChatAddPlayerToRoom_OuterMsg_2eproto.base,
  &scc_info_ChatClientData_OuterMsg_2eproto.base,
  &scc_info_ChatMsgPlayer_OuterMsg_2eproto.base,
  &scc_info_ChatMsgRoom_OuterMsg_2eproto.base,
  &scc_info_ChatPlayerBanned_OuterMsg_2eproto.base,
  &scc_info_ChatPlayerInfo_OuterMsg_2eproto.base,
  &scc_info_ChatRecording_OuterMsg_2eproto.base,
  &scc_info_ChatRemovePlayerToRoom_OuterMsg_2eproto.base,
  &scc_info_ChatRemoveRoom_OuterMsg_2eproto.base,
  &scc_info_ClientConnectInfo_OuterMsg_2eproto.base,
  &scc_info_ColdDataStore_OuterMsg_2eproto.base,
  &scc_info_CommandMsg_OuterMsg_2eproto.base,
  &scc_info_ExtraMsg_OuterMsg_2eproto.base,
  &scc_info_GuidName_OuterMsg_2eproto.base,
  &scc_info_GuidNameList_OuterMsg_2eproto.base,
  &scc_info_LetterData_OuterMsg_2eproto.base,
  &scc_info_LetterDataPack_OuterMsg_2eproto.base,
  &scc_info_LogToDB_OuterMsg_2eproto.base,
  &scc_info_MsgBase_OuterMsg_2eproto.base,
  &scc_info_MsgEmpty_OuterMsg_2eproto.base,
  &scc_info_MsgReply_OuterMsg_2eproto.base,
  &scc_info_NetTest_OuterMsg_2eproto.base,
  &scc_info_ObjectVisRecord_OuterMsg_2eproto.base,
  &scc_info_OptServerID_OuterMsg_2eproto.base,
  &scc_info_PlayerRename_OuterMsg_2eproto.base,
  &scc_info_PubNameData_OuterMsg_2eproto.base,
  &scc_info_PubOpData_OuterMsg_2eproto.base,
  &scc_info_RankListCreate_OuterMsg_2eproto.base,
  &scc_info_RankListCreateAck_OuterMsg_2eproto.base,
  &scc_info_RankListData_OuterMsg_2eproto.base,
  &scc_info_RankListData_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
  &scc_info_RankListDataAck_OuterMsg_2eproto.base,
  &scc_info_RankListDataAck_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
  &scc_info_RankListDataArray_OuterMsg_2eproto.base,
  &scc_info_RankListDataArrayAck_OuterMsg_2eproto.base,
  &scc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto.base,
  &scc_info_RankListDelete_OuterMsg_2eproto.base,
  &scc_info_RankListDeleteAck_OuterMsg_2eproto.base,
  &scc_info_RankListInit_OuterMsg_2eproto.base,
  &scc_info_RankListRange_OuterMsg_2eproto.base,
  &scc_info_RankListRangeAck_OuterMsg_2eproto.base,
  &scc_info_RankListRangeData_OuterMsg_2eproto.base,
  &scc_info_RankListRangeData_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
  &scc_info_RankListRank_OuterMsg_2eproto.base,
  &scc_info_RankListRankAck_OuterMsg_2eproto.base,
  &scc_info_RankListRankAck_MapDataEntry_DoNotUse_OuterMsg_2eproto.base,
  &scc_info_RankListRankArray_OuterMsg_2eproto.base,
  &scc_info_RankListRankArrayAck_OuterMsg_2eproto.base,
  &scc_info_RankListScore_OuterMsg_2eproto.base,
  &scc_info_RankListScoreAck_OuterMsg_2eproto.base,
  &scc_info_RankListSwapRank_OuterMsg_2eproto.base,
  &scc_info_RankListSwapRankAck_OuterMsg_2eproto.base,
  &scc_info_RankListUpdate_OuterMsg_2eproto.base,
  &scc_info_ReqAccountLogin_OuterMsg_2eproto.base,
  &scc_info_ReqAccountLogout_OuterMsg_2eproto.base,
  &scc_info_ReqAckEnterGameSuccess_OuterMsg_2eproto.base,
  &scc_info_ReqConnectWorld_OuterMsg_2eproto.base,
  &scc_info_ReqCreateRole_OuterMsg_2eproto.base,
  &scc_info_ReqDeleteLetter_OuterMsg_2eproto.base,
  &scc_info_ReqDeleteRole_OuterMsg_2eproto.base,
  &scc_info_ReqEnterGameServer_OuterMsg_2eproto.base,
  &scc_info_ReqLeaveGameServer_OuterMsg_2eproto.base,
  &scc_info_ReqLookLetter_OuterMsg_2eproto.base,
  &scc_info_ReqRoleList_OuterMsg_2eproto.base,
  &scc_info_RoleLiteInfo_OuterMsg_2eproto.base,
  &scc_info_RoleOfflineNotify_OuterMsg_2eproto.base,
  &scc_info_RoleOnlineNotify_OuterMsg_2eproto.base,
  &scc_info_ServerConnectInfo_OuterMsg_2eproto.base,
  &scc_info_ServerConnectList_OuterMsg_2eproto.base,
  &scc_info_ServerHeartBeat_OuterMsg_2eproto.base,
  &scc_info_ServerInfo_OuterMsg_2eproto.base,
  &scc_info_ServerInfoReport_OuterMsg_2eproto.base,
  &scc_info_ServerInfoReportList_OuterMsg_2eproto.base,
  &scc_info_ServerInfoReportList_ServerListEntry_DoNotUse_OuterMsg_2eproto.base,
  &scc_info_ViewAdd_OuterMsg_2eproto.base,
  &scc_info_ViewCellProperty_OuterMsg_2eproto.base,
  &scc_info_ViewCellRecord_OuterMsg_2eproto.base,
  &scc_info_ViewChange_OuterMsg_2eproto.base,
  &scc_info_ViewClose_OuterMsg_2eproto.base,
  &scc_info_ViewCreate_OuterMsg_2eproto.base,
  &scc_info_ViewProperty_OuterMsg_2eproto.base,
  &scc_info_ViewRecord_OuterMsg_2eproto.base,
  &scc_info_ViewRemove_OuterMsg_2eproto.base,
  &scc_info_WorldParam_OuterMsg_2eproto.base,
  &scc_info_WorldParam_ExtraServerEntry_DoNotUse_OuterMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OuterMsg_2eproto_once;
static bool descriptor_table_OuterMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OuterMsg_2eproto = {
  &descriptor_table_OuterMsg_2eproto_initialized, descriptor_table_protodef_OuterMsg_2eproto, "OuterMsg.proto", 9961,
  &descriptor_table_OuterMsg_2eproto_once, descriptor_table_OuterMsg_2eproto_sccs, descriptor_table_OuterMsg_2eproto_deps, 92, 2,
  schemas, file_default_instances, TableStruct_OuterMsg_2eproto::offsets,
  file_level_metadata_OuterMsg_2eproto, 92, file_level_enum_descriptors_OuterMsg_2eproto, file_level_service_descriptors_OuterMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OuterMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OuterMsg_2eproto), true);
namespace OuterMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuidNameList_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OuterMsg_2eproto);
  return file_level_enum_descriptors_OuterMsg_2eproto[0];
}
bool GuidNameList_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GuidNameList_State GuidNameList::ADD;
constexpr GuidNameList_State GuidNameList::INIT_ADD;
constexpr GuidNameList_State GuidNameList::INIT_FINISH;
constexpr GuidNameList_State GuidNameList::State_MIN;
constexpr GuidNameList_State GuidNameList::State_MAX;
constexpr int GuidNameList::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConnectList_EOptType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OuterMsg_2eproto);
  return file_level_enum_descriptors_OuterMsg_2eproto[1];
}
bool ServerConnectList_EOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerConnectList_EOptType ServerConnectList::OPT_ADD;
constexpr ServerConnectList_EOptType ServerConnectList::OPT_REMOVE;
constexpr ServerConnectList_EOptType ServerConnectList::EOptType_MIN;
constexpr ServerConnectList_EOptType ServerConnectList::EOptType_MAX;
constexpr int ServerConnectList::EOptType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MsgEmpty::InitAsDefaultInstance() {
}
class MsgEmpty::_Internal {
 public:
};

MsgEmpty::MsgEmpty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.MsgEmpty)
}
MsgEmpty::MsgEmpty(const MsgEmpty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.MsgEmpty)
}

void MsgEmpty::SharedCtor() {
}

MsgEmpty::~MsgEmpty() {
  // @@protoc_insertion_point(destructor:OuterMsg.MsgEmpty)
  SharedDtor();
}

void MsgEmpty::SharedDtor() {
}

void MsgEmpty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgEmpty& MsgEmpty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgEmpty_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void MsgEmpty::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.MsgEmpty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgEmpty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgEmpty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.MsgEmpty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.MsgEmpty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.MsgEmpty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgEmpty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.MsgEmpty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.MsgEmpty)
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgEmpty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.MsgEmpty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.MsgEmpty)
  return target;
}

size_t MsgEmpty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.MsgEmpty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgEmpty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.MsgEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgEmpty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgEmpty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.MsgEmpty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.MsgEmpty)
    MergeFrom(*source);
  }
}

void MsgEmpty::MergeFrom(const MsgEmpty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.MsgEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MsgEmpty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.MsgEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEmpty::CopyFrom(const MsgEmpty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.MsgEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEmpty::IsInitialized() const {
  return true;
}

void MsgEmpty::InternalSwap(MsgEmpty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgEmpty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgReply::InitAsDefaultInstance() {
}
class MsgReply::_Internal {
 public:
};

MsgReply::MsgReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.MsgReply)
}
MsgReply::MsgReply(const MsgReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.extra_data().empty()) {
    extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.MsgReply)
}

void MsgReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgReply_OuterMsg_2eproto.base);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

MsgReply::~MsgReply() {
  // @@protoc_insertion_point(destructor:OuterMsg.MsgReply)
  SharedDtor();
}

void MsgReply::SharedDtor() {
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgReply& MsgReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgReply_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void MsgReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extra_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.MsgReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes extra_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.MsgReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.MsgReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // bytes extra_data = 2;
  if (this->extra_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->extra_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.MsgReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // bytes extra_data = 2;
  if (this->extra_data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->extra_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.MsgReply)
  return target;
}

size_t MsgReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.MsgReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes extra_data = 2;
  if (this->extra_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->extra_data());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.MsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.MsgReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.MsgReply)
    MergeFrom(*source);
  }
}

void MsgReply::MergeFrom(const MsgReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.MsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extra_data().size() > 0) {

    extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void MsgReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.MsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReply::CopyFrom(const MsgReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.MsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReply::IsInitialized() const {
  return true;
}

void MsgReply::InternalSwap(MsgReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extra_data_.Swap(&other->extra_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewCreate::InitAsDefaultInstance() {
  ::OuterMsg::_ViewCreate_default_instance_._instance.get_mutable()->property_list_ = const_cast< ::OuterMsg::PropertyList*>(
      ::OuterMsg::PropertyList::internal_default_instance());
}
class ViewCreate::_Internal {
 public:
  static const ::OuterMsg::PropertyList& property_list(const ViewCreate* msg);
};

const ::OuterMsg::PropertyList&
ViewCreate::_Internal::property_list(const ViewCreate* msg) {
  return *msg->property_list_;
}
void ViewCreate::clear_property_list() {
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
ViewCreate::ViewCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewCreate)
}
ViewCreate::ViewCreate(const ViewCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property_list()) {
    property_list_ = new ::OuterMsg::PropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&capacity_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(capacity_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewCreate)
}

void ViewCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewCreate_OuterMsg_2eproto.base);
  ::memset(&property_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&property_list_)) + sizeof(capacity_));
}

ViewCreate::~ViewCreate() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewCreate)
  SharedDtor();
}

void ViewCreate::SharedDtor() {
  if (this != internal_default_instance()) delete property_list_;
}

void ViewCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewCreate& ViewCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewCreate_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(capacity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PropertyList property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 capacity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PropertyList property_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // int32 capacity = 2;
  if (this->capacity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->capacity(), output);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::property_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // int32 capacity = 2;
  if (this->capacity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->capacity(), target);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::property_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewCreate)
  return target;
}

size_t ViewCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // int32 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewCreate)
    MergeFrom(*source);
  }
}

void ViewCreate::MergeFrom(const ViewCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property_list()) {
    mutable_property_list()->::OuterMsg::PropertyList::MergeFrom(from.property_list());
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
}

void ViewCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewCreate::CopyFrom(const ViewCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewCreate::IsInitialized() const {
  return true;
}

void ViewCreate::InternalSwap(ViewCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_list_, other->property_list_);
  swap(view_id_, other->view_id_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewAdd::InitAsDefaultInstance() {
  ::OuterMsg::_ViewAdd_default_instance_._instance.get_mutable()->property_list_ = const_cast< ::OuterMsg::PropertyList*>(
      ::OuterMsg::PropertyList::internal_default_instance());
}
class ViewAdd::_Internal {
 public:
  static const ::OuterMsg::PropertyList& property_list(const ViewAdd* msg);
};

const ::OuterMsg::PropertyList&
ViewAdd::_Internal::property_list(const ViewAdd* msg) {
  return *msg->property_list_;
}
void ViewAdd::clear_property_list() {
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
ViewAdd::ViewAdd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewAdd)
}
ViewAdd::ViewAdd(const ViewAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property_list()) {
    property_list_ = new ::OuterMsg::PropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewAdd)
}

void ViewAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewAdd_OuterMsg_2eproto.base);
  ::memset(&property_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&property_list_)) + sizeof(index_));
}

ViewAdd::~ViewAdd() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewAdd)
  SharedDtor();
}

void ViewAdd::SharedDtor() {
  if (this != internal_default_instance()) delete property_list_;
}

void ViewAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewAdd& ViewAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewAdd_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PropertyList property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewAdd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewAdd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PropertyList property_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewAdd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewAdd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::property_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewAdd)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewAdd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::property_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewAdd)
  return target;
}

size_t ViewAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewAdd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewAdd)
    MergeFrom(*source);
  }
}

void ViewAdd::MergeFrom(const ViewAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property_list()) {
    mutable_property_list()->::OuterMsg::PropertyList::MergeFrom(from.property_list());
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void ViewAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewAdd::CopyFrom(const ViewAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewAdd::IsInitialized() const {
  return true;
}

void ViewAdd::InternalSwap(ViewAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_list_, other->property_list_);
  swap(view_id_, other->view_id_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewRemove::InitAsDefaultInstance() {
}
class ViewRemove::_Internal {
 public:
};

ViewRemove::ViewRemove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewRemove)
}
ViewRemove::ViewRemove(const ViewRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewRemove)
}

void ViewRemove::SharedCtor() {
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
}

ViewRemove::~ViewRemove() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewRemove)
  SharedDtor();
}

void ViewRemove::SharedDtor() {
}

void ViewRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewRemove& ViewRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewRemove_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewRemove::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewRemove)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewRemove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewRemove::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewRemove)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewRemove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewRemove)
  return target;
}

size_t ViewRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewRemove)
    MergeFrom(*source);
  }
}

void ViewRemove::MergeFrom(const ViewRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void ViewRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewRemove::CopyFrom(const ViewRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewRemove::IsInitialized() const {
  return true;
}

void ViewRemove::InternalSwap(ViewRemove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(view_id_, other->view_id_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewChange::InitAsDefaultInstance() {
}
class ViewChange::_Internal {
 public:
};

ViewChange::ViewChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewChange)
}
ViewChange::ViewChange(const ViewChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_index_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(new_index_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewChange)
}

void ViewChange::SharedCtor() {
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_index_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(new_index_));
}

ViewChange::~ViewChange() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewChange)
  SharedDtor();
}

void ViewChange::SharedDtor() {
}

void ViewChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewChange& ViewChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewChange_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewChange::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_index_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(new_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 old_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          old_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 new_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 old_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 new_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // int32 old_index = 2;
  if (this->old_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->old_index(), output);
  }

  // int32 new_index = 3;
  if (this->new_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->new_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // int32 old_index = 2;
  if (this->old_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->old_index(), target);
  }

  // int32 new_index = 3;
  if (this->new_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->new_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewChange)
  return target;
}

size_t ViewChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // int32 old_index = 2;
  if (this->old_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->old_index());
  }

  // int32 new_index = 3;
  if (this->new_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->new_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewChange)
    MergeFrom(*source);
  }
}

void ViewChange::MergeFrom(const ViewChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.old_index() != 0) {
    set_old_index(from.old_index());
  }
  if (from.new_index() != 0) {
    set_new_index(from.new_index());
  }
}

void ViewChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewChange::CopyFrom(const ViewChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewChange::IsInitialized() const {
  return true;
}

void ViewChange::InternalSwap(ViewChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(view_id_, other->view_id_);
  swap(old_index_, other->old_index_);
  swap(new_index_, other->new_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewClose::InitAsDefaultInstance() {
}
class ViewClose::_Internal {
 public:
};

ViewClose::ViewClose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewClose)
}
ViewClose::ViewClose(const ViewClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_id_ = from.view_id_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewClose)
}

void ViewClose::SharedCtor() {
  view_id_ = 0;
}

ViewClose::~ViewClose() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewClose)
  SharedDtor();
}

void ViewClose::SharedDtor() {
}

void ViewClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewClose& ViewClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewClose_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewClose::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewClose::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewClose)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewClose)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewClose::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewClose)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewClose::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewClose)
  return target;
}

size_t ViewClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewClose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewClose)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewClose)
    MergeFrom(*source);
  }
}

void ViewClose::MergeFrom(const ViewClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
}

void ViewClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewClose::CopyFrom(const ViewClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewClose::IsInitialized() const {
  return true;
}

void ViewClose::InternalSwap(ViewClose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(view_id_, other->view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewProperty::InitAsDefaultInstance() {
  ::OuterMsg::_ViewProperty_default_instance_._instance.get_mutable()->property_list_ = const_cast< ::OuterMsg::PropertyList*>(
      ::OuterMsg::PropertyList::internal_default_instance());
}
class ViewProperty::_Internal {
 public:
  static const ::OuterMsg::PropertyList& property_list(const ViewProperty* msg);
};

const ::OuterMsg::PropertyList&
ViewProperty::_Internal::property_list(const ViewProperty* msg) {
  return *msg->property_list_;
}
void ViewProperty::clear_property_list() {
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
ViewProperty::ViewProperty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewProperty)
}
ViewProperty::ViewProperty(const ViewProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property_list()) {
    property_list_ = new ::OuterMsg::PropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  view_id_ = from.view_id_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewProperty)
}

void ViewProperty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewProperty_OuterMsg_2eproto.base);
  ::memset(&property_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_id_) -
      reinterpret_cast<char*>(&property_list_)) + sizeof(view_id_));
}

ViewProperty::~ViewProperty() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewProperty)
  SharedDtor();
}

void ViewProperty::SharedDtor() {
  if (this != internal_default_instance()) delete property_list_;
}

void ViewProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewProperty& ViewProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewProperty_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  view_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PropertyList property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewProperty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewProperty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PropertyList property_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewProperty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // .OuterMsg.PropertyList property_list = 2;
  if (this->has_property_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::property_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewProperty)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewProperty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // .OuterMsg.PropertyList property_list = 2;
  if (this->has_property_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::property_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewProperty)
  return target;
}

size_t ViewProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.PropertyList property_list = 2;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewProperty)
    MergeFrom(*source);
  }
}

void ViewProperty::MergeFrom(const ViewProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property_list()) {
    mutable_property_list()->::OuterMsg::PropertyList::MergeFrom(from.property_list());
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
}

void ViewProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewProperty::CopyFrom(const ViewProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewProperty::IsInitialized() const {
  return true;
}

void ViewProperty::InternalSwap(ViewProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_list_, other->property_list_);
  swap(view_id_, other->view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewRecord::InitAsDefaultInstance() {
  ::OuterMsg::_ViewRecord_default_instance_._instance.get_mutable()->record_list_ = const_cast< ::OuterMsg::RecordList*>(
      ::OuterMsg::RecordList::internal_default_instance());
}
class ViewRecord::_Internal {
 public:
  static const ::OuterMsg::RecordList& record_list(const ViewRecord* msg);
};

const ::OuterMsg::RecordList&
ViewRecord::_Internal::record_list(const ViewRecord* msg) {
  return *msg->record_list_;
}
void ViewRecord::clear_record_list() {
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
ViewRecord::ViewRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewRecord)
}
ViewRecord::ViewRecord(const ViewRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_record_list()) {
    record_list_ = new ::OuterMsg::RecordList(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&opera_type_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(opera_type_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewRecord)
}

void ViewRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewRecord_OuterMsg_2eproto.base);
  ::memset(&record_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opera_type_) -
      reinterpret_cast<char*>(&record_list_)) + sizeof(opera_type_));
}

ViewRecord::~ViewRecord() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewRecord)
  SharedDtor();
}

void ViewRecord::SharedDtor() {
  if (this != internal_default_instance()) delete record_list_;
}

void ViewRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewRecord& ViewRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewRecord_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opera_type_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(opera_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordOperatorType opera_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_opera_type(static_cast<::OuterMsg::RecordOperatorType>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordList record_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordOperatorType opera_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opera_type(static_cast< ::OuterMsg::RecordOperatorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordList record_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // .OuterMsg.RecordOperatorType opera_type = 2;
  if (this->opera_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->opera_type(), output);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::record_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // .OuterMsg.RecordOperatorType opera_type = 2;
  if (this->opera_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->opera_type(), target);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::record_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewRecord)
  return target;
}

size_t ViewRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // .OuterMsg.RecordOperatorType opera_type = 2;
  if (this->opera_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->opera_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewRecord)
    MergeFrom(*source);
  }
}

void ViewRecord::MergeFrom(const ViewRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record_list()) {
    mutable_record_list()->::OuterMsg::RecordList::MergeFrom(from.record_list());
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.opera_type() != 0) {
    set_opera_type(from.opera_type());
  }
}

void ViewRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewRecord::CopyFrom(const ViewRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewRecord::IsInitialized() const {
  return true;
}

void ViewRecord::InternalSwap(ViewRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(record_list_, other->record_list_);
  swap(view_id_, other->view_id_);
  swap(opera_type_, other->opera_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewCellProperty::InitAsDefaultInstance() {
  ::OuterMsg::_ViewCellProperty_default_instance_._instance.get_mutable()->property_list_ = const_cast< ::OuterMsg::PropertyList*>(
      ::OuterMsg::PropertyList::internal_default_instance());
}
class ViewCellProperty::_Internal {
 public:
  static const ::OuterMsg::PropertyList& property_list(const ViewCellProperty* msg);
};

const ::OuterMsg::PropertyList&
ViewCellProperty::_Internal::property_list(const ViewCellProperty* msg) {
  return *msg->property_list_;
}
void ViewCellProperty::clear_property_list() {
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
ViewCellProperty::ViewCellProperty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewCellProperty)
}
ViewCellProperty::ViewCellProperty(const ViewCellProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property_list()) {
    property_list_ = new ::OuterMsg::PropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewCellProperty)
}

void ViewCellProperty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewCellProperty_OuterMsg_2eproto.base);
  ::memset(&property_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&property_list_)) + sizeof(index_));
}

ViewCellProperty::~ViewCellProperty() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewCellProperty)
  SharedDtor();
}

void ViewCellProperty::SharedDtor() {
  if (this != internal_default_instance()) delete property_list_;
}

void ViewCellProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewCellProperty& ViewCellProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewCellProperty_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewCellProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewCellProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewCellProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PropertyList property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewCellProperty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewCellProperty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PropertyList property_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewCellProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewCellProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewCellProperty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewCellProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::property_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewCellProperty)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewCellProperty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewCellProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::property_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewCellProperty)
  return target;
}

size_t ViewCellProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewCellProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewCellProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewCellProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewCellProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewCellProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewCellProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewCellProperty)
    MergeFrom(*source);
  }
}

void ViewCellProperty::MergeFrom(const ViewCellProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewCellProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property_list()) {
    mutable_property_list()->::OuterMsg::PropertyList::MergeFrom(from.property_list());
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void ViewCellProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewCellProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewCellProperty::CopyFrom(const ViewCellProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewCellProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewCellProperty::IsInitialized() const {
  return true;
}

void ViewCellProperty::InternalSwap(ViewCellProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_list_, other->property_list_);
  swap(view_id_, other->view_id_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewCellProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewCellRecord::InitAsDefaultInstance() {
  ::OuterMsg::_ViewCellRecord_default_instance_._instance.get_mutable()->record_list_ = const_cast< ::OuterMsg::RecordList*>(
      ::OuterMsg::RecordList::internal_default_instance());
}
class ViewCellRecord::_Internal {
 public:
  static const ::OuterMsg::RecordList& record_list(const ViewCellRecord* msg);
};

const ::OuterMsg::RecordList&
ViewCellRecord::_Internal::record_list(const ViewCellRecord* msg) {
  return *msg->record_list_;
}
void ViewCellRecord::clear_record_list() {
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
ViewCellRecord::ViewCellRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ViewCellRecord)
}
ViewCellRecord::ViewCellRecord(const ViewCellRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_record_list()) {
    record_list_ = new ::OuterMsg::RecordList(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  ::memcpy(&view_id_, &from.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&opera_type_) -
    reinterpret_cast<char*>(&view_id_)) + sizeof(opera_type_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ViewCellRecord)
}

void ViewCellRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewCellRecord_OuterMsg_2eproto.base);
  ::memset(&record_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opera_type_) -
      reinterpret_cast<char*>(&record_list_)) + sizeof(opera_type_));
}

ViewCellRecord::~ViewCellRecord() {
  // @@protoc_insertion_point(destructor:OuterMsg.ViewCellRecord)
  SharedDtor();
}

void ViewCellRecord::SharedDtor() {
  if (this != internal_default_instance()) delete record_list_;
}

void ViewCellRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewCellRecord& ViewCellRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewCellRecord_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ViewCellRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ViewCellRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  ::memset(&view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opera_type_) -
      reinterpret_cast<char*>(&view_id_)) + sizeof(opera_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViewCellRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordOperatorType opera_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_opera_type(static_cast<::OuterMsg::RecordOperatorType>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordList record_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViewCellRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ViewCellRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordOperatorType opera_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opera_type(static_cast< ::OuterMsg::RecordOperatorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordList record_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ViewCellRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ViewCellRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViewCellRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ViewCellRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // .OuterMsg.RecordOperatorType opera_type = 3;
  if (this->opera_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->opera_type(), output);
  }

  // .OuterMsg.RecordList record_list = 4;
  if (this->has_record_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::record_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ViewCellRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewCellRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ViewCellRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // .OuterMsg.RecordOperatorType opera_type = 3;
  if (this->opera_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->opera_type(), target);
  }

  // .OuterMsg.RecordList record_list = 4;
  if (this->has_record_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::record_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ViewCellRecord)
  return target;
}

size_t ViewCellRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ViewCellRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.RecordList record_list = 4;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // .OuterMsg.RecordOperatorType opera_type = 3;
  if (this->opera_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->opera_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewCellRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ViewCellRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewCellRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewCellRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ViewCellRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ViewCellRecord)
    MergeFrom(*source);
  }
}

void ViewCellRecord::MergeFrom(const ViewCellRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ViewCellRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record_list()) {
    mutable_record_list()->::OuterMsg::RecordList::MergeFrom(from.record_list());
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.opera_type() != 0) {
    set_opera_type(from.opera_type());
  }
}

void ViewCellRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ViewCellRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewCellRecord::CopyFrom(const ViewCellRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ViewCellRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewCellRecord::IsInitialized() const {
  return true;
}

void ViewCellRecord::InternalSwap(ViewCellRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(record_list_, other->record_list_);
  swap(view_id_, other->view_id_);
  swap(index_, other->index_);
  swap(opera_type_, other->opera_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewCellRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectVisRecord::InitAsDefaultInstance() {
  ::OuterMsg::_ObjectVisRecord_default_instance_._instance.get_mutable()->ident_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ObjectVisRecord_default_instance_._instance.get_mutable()->record_list_ = const_cast< ::OuterMsg::RecordList*>(
      ::OuterMsg::RecordList::internal_default_instance());
}
class ObjectVisRecord::_Internal {
 public:
  static const ::OuterMsg::GUID& ident(const ObjectVisRecord* msg);
  static const ::OuterMsg::RecordList& record_list(const ObjectVisRecord* msg);
};

const ::OuterMsg::GUID&
ObjectVisRecord::_Internal::ident(const ObjectVisRecord* msg) {
  return *msg->ident_;
}
const ::OuterMsg::RecordList&
ObjectVisRecord::_Internal::record_list(const ObjectVisRecord* msg) {
  return *msg->record_list_;
}
void ObjectVisRecord::clear_ident() {
  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
}
void ObjectVisRecord::clear_record_list() {
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
ObjectVisRecord::ObjectVisRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ObjectVisRecord)
}
ObjectVisRecord::ObjectVisRecord(const ObjectVisRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::OuterMsg::GUID(*from.ident_);
  } else {
    ident_ = nullptr;
  }
  if (from.has_record_list()) {
    record_list_ = new ::OuterMsg::RecordList(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  opera_type_ = from.opera_type_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ObjectVisRecord)
}

void ObjectVisRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectVisRecord_OuterMsg_2eproto.base);
  ::memset(&ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opera_type_) -
      reinterpret_cast<char*>(&ident_)) + sizeof(opera_type_));
}

ObjectVisRecord::~ObjectVisRecord() {
  // @@protoc_insertion_point(destructor:OuterMsg.ObjectVisRecord)
  SharedDtor();
}

void ObjectVisRecord::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
  if (this != internal_default_instance()) delete record_list_;
}

void ObjectVisRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectVisRecord& ObjectVisRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectVisRecord_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ObjectVisRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ObjectVisRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  opera_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectVisRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordOperatorType opera_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_opera_type(static_cast<::OuterMsg::RecordOperatorType>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordList record_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectVisRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ObjectVisRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID ident = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordOperatorType opera_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opera_type(static_cast< ::OuterMsg::RecordOperatorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordList record_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ObjectVisRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ObjectVisRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectVisRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ObjectVisRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ident(this), output);
  }

  // .OuterMsg.RecordOperatorType opera_type = 2;
  if (this->opera_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->opera_type(), output);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::record_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ObjectVisRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectVisRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ObjectVisRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ident(this), target);
  }

  // .OuterMsg.RecordOperatorType opera_type = 2;
  if (this->opera_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->opera_type(), target);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::record_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ObjectVisRecord)
  return target;
}

size_t ObjectVisRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ObjectVisRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ident_);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  // .OuterMsg.RecordOperatorType opera_type = 2;
  if (this->opera_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->opera_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectVisRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ObjectVisRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectVisRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectVisRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ObjectVisRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ObjectVisRecord)
    MergeFrom(*source);
  }
}

void ObjectVisRecord::MergeFrom(const ObjectVisRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ObjectVisRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident()) {
    mutable_ident()->::OuterMsg::GUID::MergeFrom(from.ident());
  }
  if (from.has_record_list()) {
    mutable_record_list()->::OuterMsg::RecordList::MergeFrom(from.record_list());
  }
  if (from.opera_type() != 0) {
    set_opera_type(from.opera_type());
  }
}

void ObjectVisRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ObjectVisRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectVisRecord::CopyFrom(const ObjectVisRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ObjectVisRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectVisRecord::IsInitialized() const {
  return true;
}

void ObjectVisRecord::InternalSwap(ObjectVisRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ident_, other->ident_);
  swap(record_list_, other->record_list_);
  swap(opera_type_, other->opera_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectVisRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgBase::InitAsDefaultInstance() {
  ::OuterMsg::_MsgBase_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_MsgBase_default_instance_._instance.get_mutable()->hash_ident_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class MsgBase::_Internal {
 public:
  static const ::OuterMsg::GUID& player_id(const MsgBase* msg);
  static const ::OuterMsg::GUID& hash_ident(const MsgBase* msg);
};

const ::OuterMsg::GUID&
MsgBase::_Internal::player_id(const MsgBase* msg) {
  return *msg->player_id_;
}
const ::OuterMsg::GUID&
MsgBase::_Internal::hash_ident(const MsgBase* msg) {
  return *msg->hash_ident_;
}
void MsgBase::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void MsgBase::clear_player_Client_list() {
  player_Client_list_.Clear();
}
void MsgBase::clear_hash_ident() {
  if (GetArenaNoVirtual() == nullptr && hash_ident_ != nullptr) {
    delete hash_ident_;
  }
  hash_ident_ = nullptr;
}
MsgBase::MsgBase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      player_Client_list_(from.player_Client_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.msg_data().empty()) {
    msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::OuterMsg::GUID(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from.has_hash_ident()) {
    hash_ident_ = new ::OuterMsg::GUID(*from.hash_ident_);
  } else {
    hash_ident_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.MsgBase)
}

void MsgBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBase_OuterMsg_2eproto.base);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_ident_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(hash_ident_));
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:OuterMsg.MsgBase)
  SharedDtor();
}

void MsgBase::SharedDtor() {
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete hash_ident_;
}

void MsgBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBase& MsgBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBase_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_Client_list_.Clear();
  msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hash_ident_ != nullptr) {
    delete hash_ident_;
  }
  hash_ident_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_msg_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.GUID player_Client_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_player_Client_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID hash_ident = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_hash_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgBase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.MsgBase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID player_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.GUID player_Client_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_player_Client_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID hash_ident = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hash_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.MsgBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.MsgBase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgBase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player_id = 1;
  if (this->has_player_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player_id(this), output);
  }

  // bytes msg_data = 2;
  if (this->msg_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg_data(), output);
  }

  // repeated .OuterMsg.GUID player_Client_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_Client_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->player_Client_list(static_cast<int>(i)),
      output);
  }

  // .OuterMsg.GUID hash_ident = 4;
  if (this->has_hash_ident()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::hash_ident(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.MsgBase)
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player_id = 1;
  if (this->has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player_id(this), target);
  }

  // bytes msg_data = 2;
  if (this->msg_data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // repeated .OuterMsg.GUID player_Client_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_Client_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_Client_list(static_cast<int>(i)), target);
  }

  // .OuterMsg.GUID hash_ident = 4;
  if (this->has_hash_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::hash_ident(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.MsgBase)
  return target;
}

size_t MsgBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.MsgBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.GUID player_Client_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_Client_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->player_Client_list(static_cast<int>(i)));
    }
  }

  // bytes msg_data = 2;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  // .OuterMsg.GUID player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .OuterMsg.GUID hash_ident = 4;
  if (this->has_hash_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_ident_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.MsgBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.MsgBase)
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_Client_list_.MergeFrom(from.player_Client_list_);
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_player_id()) {
    mutable_player_id()->::OuterMsg::GUID::MergeFrom(from.player_id());
  }
  if (from.has_hash_ident()) {
    mutable_hash_ident()->::OuterMsg::GUID::MergeFrom(from.hash_ident());
  }
}

void MsgBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  return true;
}

void MsgBase::InternalSwap(MsgBase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&player_Client_list_)->InternalSwap(CastToBase(&other->player_Client_list_));
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(hash_ident_, other->hash_ident_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckEventResult::InitAsDefaultInstance() {
  ::OuterMsg::_AckEventResult_default_instance_._instance.get_mutable()->event_object_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_AckEventResult_default_instance_._instance.get_mutable()->event_client_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class AckEventResult::_Internal {
 public:
  static const ::OuterMsg::GUID& event_object(const AckEventResult* msg);
  static const ::OuterMsg::GUID& event_client(const AckEventResult* msg);
};

const ::OuterMsg::GUID&
AckEventResult::_Internal::event_object(const AckEventResult* msg) {
  return *msg->event_object_;
}
const ::OuterMsg::GUID&
AckEventResult::_Internal::event_client(const AckEventResult* msg) {
  return *msg->event_client_;
}
void AckEventResult::clear_event_object() {
  if (GetArenaNoVirtual() == nullptr && event_object_ != nullptr) {
    delete event_object_;
  }
  event_object_ = nullptr;
}
void AckEventResult::clear_event_client() {
  if (GetArenaNoVirtual() == nullptr && event_client_ != nullptr) {
    delete event_client_;
  }
  event_client_ = nullptr;
}
AckEventResult::AckEventResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AckEventResult)
}
AckEventResult::AckEventResult(const AckEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event_object()) {
    event_object_ = new ::OuterMsg::GUID(*from.event_object_);
  } else {
    event_object_ = nullptr;
  }
  if (from.has_event_client()) {
    event_client_ = new ::OuterMsg::GUID(*from.event_client_);
  } else {
    event_client_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AckEventResult)
}

void AckEventResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckEventResult_OuterMsg_2eproto.base);
  ::memset(&event_object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&event_object_)) + sizeof(event_code_));
}

AckEventResult::~AckEventResult() {
  // @@protoc_insertion_point(destructor:OuterMsg.AckEventResult)
  SharedDtor();
}

void AckEventResult::SharedDtor() {
  if (this != internal_default_instance()) delete event_object_;
  if (this != internal_default_instance()) delete event_client_;
}

void AckEventResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckEventResult& AckEventResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckEventResult_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AckEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AckEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && event_object_ != nullptr) {
    delete event_object_;
  }
  event_object_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_client_ != nullptr) {
    delete event_client_;
  }
  event_client_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckEventResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_event_code(static_cast<::OuterMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID event_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_event_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID event_client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_event_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckEventResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AckEventResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.EGameEventCode event_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_code(static_cast< ::OuterMsg::EGameEventCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID event_object = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID event_client = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AckEventResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AckEventResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckEventResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AckEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event_code(), output);
  }

  // .OuterMsg.GUID event_object = 2;
  if (this->has_event_object()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::event_object(this), output);
  }

  // .OuterMsg.GUID event_client = 3;
  if (this->has_event_client()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::event_client(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AckEventResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* AckEventResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AckEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_code(), target);
  }

  // .OuterMsg.GUID event_object = 2;
  if (this->has_event_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::event_object(this), target);
  }

  // .OuterMsg.GUID event_client = 3;
  if (this->has_event_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::event_client(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AckEventResult)
  return target;
}

size_t AckEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AckEventResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID event_object = 2;
  if (this->has_event_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_object_);
  }

  // .OuterMsg.GUID event_client = 3;
  if (this->has_event_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_client_);
  }

  // .OuterMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEventResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AckEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEventResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckEventResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AckEventResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AckEventResult)
    MergeFrom(*source);
  }
}

void AckEventResult::MergeFrom(const AckEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AckEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event_object()) {
    mutable_event_object()->::OuterMsg::GUID::MergeFrom(from.event_object());
  }
  if (from.has_event_client()) {
    mutable_event_client()->::OuterMsg::GUID::MergeFrom(from.event_client());
  }
  if (from.event_code() != 0) {
    set_event_code(from.event_code());
  }
}

void AckEventResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AckEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEventResult::CopyFrom(const AckEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AckEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEventResult::IsInitialized() const {
  return true;
}

void AckEventResult::InternalSwap(AckEventResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(event_object_, other->event_object_);
  swap(event_client_, other->event_client_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckEventResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAccountLogin::InitAsDefaultInstance() {
}
class ReqAccountLogin::_Internal {
 public:
};

ReqAccountLogin::ReqAccountLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqAccountLogin)
}
ReqAccountLogin::ReqAccountLogin(const ReqAccountLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  security_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.security_code().empty()) {
    security_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_code_);
  }
  device_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.device_info().empty()) {
    device_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_info_);
  }
  extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.extra_info().empty()) {
    extra_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.client_ip().empty()) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  ::memcpy(&clientMAC_, &from.clientMAC_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&clientMAC_)) + sizeof(login_id_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqAccountLogin)
}

void ReqAccountLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAccountLogin_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientMAC_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&clientMAC_)) + sizeof(login_id_));
}

ReqAccountLogin::~ReqAccountLogin() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqAccountLogin)
  SharedDtor();
}

void ReqAccountLogin::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAccountLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAccountLogin& ReqAccountLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAccountLogin_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqAccountLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqAccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientMAC_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&clientMAC_)) + sizeof(login_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqAccountLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_password(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes security_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_security_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          clientVersion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 clientMAC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          clientMAC_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extra_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 platform_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes client_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqAccountLogin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqAccountLogin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes security_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_security_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clientVersion = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientVersion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 clientMAC = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientMAC_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes device_info = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes extra_info = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 platform_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 world_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_ip = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqAccountLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqAccountLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqAccountLogin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqAccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // bytes security_code = 3;
  if (this->security_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->security_code(), output);
  }

  // int32 clientVersion = 4;
  if (this->clientVersion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->clientVersion(), output);
  }

  // int64 clientMAC = 5;
  if (this->clientMAC() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->clientMAC(), output);
  }

  // bytes device_info = 6;
  if (this->device_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->device_info(), output);
  }

  // bytes extra_info = 7;
  if (this->extra_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->extra_info(), output);
  }

  // int32 platform_type = 8;
  if (this->platform_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->platform_type(), output);
  }

  // int32 world_id = 9;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->world_id(), output);
  }

  // int32 login_id = 10;
  if (this->login_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->login_id(), output);
  }

  // bytes client_ip = 11;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqAccountLogin)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAccountLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqAccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // bytes security_code = 3;
  if (this->security_code().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->security_code(), target);
  }

  // int32 clientVersion = 4;
  if (this->clientVersion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->clientVersion(), target);
  }

  // int64 clientMAC = 5;
  if (this->clientMAC() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->clientMAC(), target);
  }

  // bytes device_info = 6;
  if (this->device_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->device_info(), target);
  }

  // bytes extra_info = 7;
  if (this->extra_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->extra_info(), target);
  }

  // int32 platform_type = 8;
  if (this->platform_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->platform_type(), target);
  }

  // int32 world_id = 9;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->world_id(), target);
  }

  // int32 login_id = 10;
  if (this->login_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->login_id(), target);
  }

  // bytes client_ip = 11;
  if (this->client_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        11, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqAccountLogin)
  return target;
}

size_t ReqAccountLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqAccountLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->password());
  }

  // bytes security_code = 3;
  if (this->security_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->security_code());
  }

  // bytes device_info = 6;
  if (this->device_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->device_info());
  }

  // bytes extra_info = 7;
  if (this->extra_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->extra_info());
  }

  // bytes client_ip = 11;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->client_ip());
  }

  // int64 clientMAC = 5;
  if (this->clientMAC() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->clientMAC());
  }

  // int32 clientVersion = 4;
  if (this->clientVersion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->clientVersion());
  }

  // int32 platform_type = 8;
  if (this->platform_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->platform_type());
  }

  // int32 world_id = 9;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 login_id = 10;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->login_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAccountLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqAccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAccountLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAccountLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqAccountLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqAccountLogin)
    MergeFrom(*source);
  }
}

void ReqAccountLogin::MergeFrom(const ReqAccountLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqAccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.security_code().size() > 0) {

    security_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_code_);
  }
  if (from.device_info().size() > 0) {

    device_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_info_);
  }
  if (from.extra_info().size() > 0) {

    extra_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.clientMAC() != 0) {
    set_clientMAC(from.clientMAC());
  }
  if (from.clientVersion() != 0) {
    set_clientVersion(from.clientVersion());
  }
  if (from.platform_type() != 0) {
    set_platform_type(from.platform_type());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.login_id() != 0) {
    set_login_id(from.login_id());
  }
}

void ReqAccountLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqAccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAccountLogin::CopyFrom(const ReqAccountLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqAccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountLogin::IsInitialized() const {
  return true;
}

void ReqAccountLogin::InternalSwap(ReqAccountLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  security_code_.Swap(&other->security_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_info_.Swap(&other->device_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extra_info_.Swap(&other->extra_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientMAC_, other->clientMAC_);
  swap(clientVersion_, other->clientVersion_);
  swap(platform_type_, other->platform_type_);
  swap(world_id_, other->world_id_);
  swap(login_id_, other->login_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAccountLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAccountLogout::InitAsDefaultInstance() {
}
class ReqAccountLogout::_Internal {
 public:
};

ReqAccountLogout::ReqAccountLogout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqAccountLogout)
}
ReqAccountLogout::ReqAccountLogout(const ReqAccountLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.extra_info().empty()) {
    extra_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqAccountLogout)
}

void ReqAccountLogout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAccountLogout_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqAccountLogout::~ReqAccountLogout() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqAccountLogout)
  SharedDtor();
}

void ReqAccountLogout::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAccountLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAccountLogout& ReqAccountLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAccountLogout_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqAccountLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqAccountLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqAccountLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extra_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqAccountLogout::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqAccountLogout)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes extra_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqAccountLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqAccountLogout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqAccountLogout::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqAccountLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // bytes extra_info = 3;
  if (this->extra_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->extra_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqAccountLogout)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAccountLogout::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqAccountLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // bytes extra_info = 3;
  if (this->extra_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->extra_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqAccountLogout)
  return target;
}

size_t ReqAccountLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqAccountLogout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes extra_info = 3;
  if (this->extra_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->extra_info());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAccountLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqAccountLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAccountLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAccountLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqAccountLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqAccountLogout)
    MergeFrom(*source);
  }
}

void ReqAccountLogout::MergeFrom(const ReqAccountLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqAccountLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.extra_info().size() > 0) {

    extra_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
}

void ReqAccountLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqAccountLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAccountLogout::CopyFrom(const ReqAccountLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqAccountLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountLogout::IsInitialized() const {
  return true;
}

void ReqAccountLogout::InternalSwap(ReqAccountLogout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extra_info_.Swap(&other->extra_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAccountLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInfoReport::InitAsDefaultInstance() {
}
class ServerInfoReport::_Internal {
 public:
};

ServerInfoReport::ServerInfoReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ServerInfoReport)
}
ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.server_ip().empty()) {
    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  maintain_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.maintain_ip().empty()) {
    maintain_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maintain_ip_);
  }
  wlan_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.wlan_ip().empty()) {
    wlan_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wlan_ip_);
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.notes().empty()) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  state_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.state_info().empty()) {
    state_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_info_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_callback_sock_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(net_callback_sock_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ServerInfoReport)
}

void ServerInfoReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfoReport_OuterMsg_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maintain_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wlan_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_callback_sock_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(net_callback_sock_));
}

ServerInfoReport::~ServerInfoReport() {
  // @@protoc_insertion_point(destructor:OuterMsg.ServerInfoReport)
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maintain_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wlan_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfoReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfoReport& ServerInfoReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfoReport_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ServerInfoReport::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ServerInfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maintain_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wlan_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_callback_sock_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(net_callback_sock_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfoReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_max_online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_max_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_cur_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          server_cur_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.EServerState server_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_server_state(static_cast<::OuterMsg::EServerState>(val));
        } else goto handle_unusual;
        continue;
      // int32 server_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 app_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 district_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          district_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes maintain_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_maintain_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maintain_port = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          maintain_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes wlan_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_wlan_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wlan_port = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          wlan_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes notes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_notes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_state_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 net_callback = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          net_callback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 net_callback_sock = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          net_callback_sock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfoReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ServerInfoReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes server_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes server_ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_max_online = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_max_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_cur_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_cur_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.EServerState server_state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_server_state(static_cast< ::OuterMsg::EServerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 app_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 district_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &district_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes maintain_ip = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_maintain_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maintain_port = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintain_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes wlan_ip = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wlan_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wlan_port = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wlan_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes notes = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes state_info = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_callback = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_callback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_callback_sock = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_callback_sock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ServerInfoReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ServerInfoReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfoReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ServerInfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->server_name(), output);
  }

  // bytes server_ip = 3;
  if (this->server_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->server_ip(), output);
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->server_port(), output);
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->server_max_online(), output);
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->server_cur_count(), output);
  }

  // .OuterMsg.EServerState server_state = 7;
  if (this->server_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->server_state(), output);
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->server_type(), output);
  }

  // int32 app_id = 9;
  if (this->app_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->app_id(), output);
  }

  // int32 district_id = 10;
  if (this->district_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->district_id(), output);
  }

  // bytes maintain_ip = 11;
  if (this->maintain_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->maintain_ip(), output);
  }

  // int32 maintain_port = 12;
  if (this->maintain_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->maintain_port(), output);
  }

  // bytes wlan_ip = 13;
  if (this->wlan_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->wlan_ip(), output);
  }

  // int32 wlan_port = 14;
  if (this->wlan_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->wlan_port(), output);
  }

  // bytes notes = 15;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->notes(), output);
  }

  // bytes state_info = 16;
  if (this->state_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->state_info(), output);
  }

  // uint64 net_callback = 17;
  if (this->net_callback() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(17, this->net_callback(), output);
  }

  // uint64 net_callback_sock = 18;
  if (this->net_callback_sock() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(18, this->net_callback_sock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ServerInfoReport)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoReport::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ServerInfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_name(), target);
  }

  // bytes server_ip = 3;
  if (this->server_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->server_ip(), target);
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->server_port(), target);
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->server_max_online(), target);
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->server_cur_count(), target);
  }

  // .OuterMsg.EServerState server_state = 7;
  if (this->server_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_state(), target);
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->server_type(), target);
  }

  // int32 app_id = 9;
  if (this->app_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->app_id(), target);
  }

  // int32 district_id = 10;
  if (this->district_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->district_id(), target);
  }

  // bytes maintain_ip = 11;
  if (this->maintain_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        11, this->maintain_ip(), target);
  }

  // int32 maintain_port = 12;
  if (this->maintain_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->maintain_port(), target);
  }

  // bytes wlan_ip = 13;
  if (this->wlan_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        13, this->wlan_ip(), target);
  }

  // int32 wlan_port = 14;
  if (this->wlan_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->wlan_port(), target);
  }

  // bytes notes = 15;
  if (this->notes().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        15, this->notes(), target);
  }

  // bytes state_info = 16;
  if (this->state_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        16, this->state_info(), target);
  }

  // uint64 net_callback = 17;
  if (this->net_callback() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->net_callback(), target);
  }

  // uint64 net_callback_sock = 18;
  if (this->net_callback_sock() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->net_callback_sock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ServerInfoReport)
  return target;
}

size_t ServerInfoReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ServerInfoReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->server_name());
  }

  // bytes server_ip = 3;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->server_ip());
  }

  // bytes maintain_ip = 11;
  if (this->maintain_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->maintain_ip());
  }

  // bytes wlan_ip = 13;
  if (this->wlan_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->wlan_ip());
  }

  // bytes notes = 15;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->notes());
  }

  // bytes state_info = 16;
  if (this->state_info().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->state_info());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_port());
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_max_online());
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_cur_count());
  }

  // .OuterMsg.EServerState server_state = 7;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->server_state());
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  // int32 app_id = 9;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  // int32 district_id = 10;
  if (this->district_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->district_id());
  }

  // int32 maintain_port = 12;
  if (this->maintain_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maintain_port());
  }

  // int32 wlan_port = 14;
  if (this->wlan_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->wlan_port());
  }

  // uint64 net_callback = 17;
  if (this->net_callback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->net_callback());
  }

  // uint64 net_callback_sock = 18;
  if (this->net_callback_sock() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->net_callback_sock());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfoReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ServerInfoReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ServerInfoReport)
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.maintain_ip().size() > 0) {

    maintain_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maintain_ip_);
  }
  if (from.wlan_ip().size() > 0) {

    wlan_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wlan_ip_);
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.state_info().size() > 0) {

    state_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_info_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
  if (from.server_max_online() != 0) {
    set_server_max_online(from.server_max_online());
  }
  if (from.server_cur_count() != 0) {
    set_server_cur_count(from.server_cur_count());
  }
  if (from.server_state() != 0) {
    set_server_state(from.server_state());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.district_id() != 0) {
    set_district_id(from.district_id());
  }
  if (from.maintain_port() != 0) {
    set_maintain_port(from.maintain_port());
  }
  if (from.wlan_port() != 0) {
    set_wlan_port(from.wlan_port());
  }
  if (from.net_callback() != 0) {
    set_net_callback(from.net_callback());
  }
  if (from.net_callback_sock() != 0) {
    set_net_callback_sock(from.net_callback_sock());
  }
}

void ServerInfoReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {
  return true;
}

void ServerInfoReport::InternalSwap(ServerInfoReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_ip_.Swap(&other->server_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maintain_ip_.Swap(&other->maintain_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wlan_ip_.Swap(&other->wlan_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_info_.Swap(&other->state_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(server_port_, other->server_port_);
  swap(server_max_online_, other->server_max_online_);
  swap(server_cur_count_, other->server_cur_count_);
  swap(server_state_, other->server_state_);
  swap(server_type_, other->server_type_);
  swap(app_id_, other->app_id_);
  swap(district_id_, other->district_id_);
  swap(maintain_port_, other->maintain_port_);
  swap(wlan_port_, other->wlan_port_);
  swap(net_callback_, other->net_callback_);
  swap(net_callback_sock_, other->net_callback_sock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetTest::InitAsDefaultInstance() {
}
class NetTest::_Internal {
 public:
};

NetTest::NetTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.NetTest)
}
NetTest::NetTest(const NetTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&client_sock_, &from.client_sock_,
    static_cast<size_t>(reinterpret_cast<char*>(&word_server_id_) -
    reinterpret_cast<char*>(&client_sock_)) + sizeof(word_server_id_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.NetTest)
}

void NetTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetTest_OuterMsg_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_sock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&word_server_id_) -
      reinterpret_cast<char*>(&client_sock_)) + sizeof(word_server_id_));
}

NetTest::~NetTest() {
  // @@protoc_insertion_point(destructor:OuterMsg.NetTest)
  SharedDtor();
}

void NetTest::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetTest& NetTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetTest_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void NetTest::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.NetTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_sock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&word_server_id_) -
      reinterpret_cast<char*>(&client_sock_)) + sizeof(word_server_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 client_sock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_sock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_send_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 src_server_sock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          src_server_sock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 word_server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          word_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetTest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.NetTest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 client_sock = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_sock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 client_send_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 src_server_sock = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_server_sock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 word_server_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.NetTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.NetTest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetTest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.NetTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_sock = 1;
  if (this->client_sock() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->client_sock(), output);
  }

  // int64 client_send_time = 2;
  if (this->client_send_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->client_send_time(), output);
  }

  // int64 src_server_sock = 3;
  if (this->src_server_sock() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->src_server_sock(), output);
  }

  // int32 word_server_id = 4;
  if (this->word_server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->word_server_id(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.NetTest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.NetTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_sock = 1;
  if (this->client_sock() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->client_sock(), target);
  }

  // int64 client_send_time = 2;
  if (this->client_send_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->client_send_time(), target);
  }

  // int64 src_server_sock = 3;
  if (this->src_server_sock() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->src_server_sock(), target);
  }

  // int32 word_server_id = 4;
  if (this->word_server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->word_server_id(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.NetTest)
  return target;
}

size_t NetTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.NetTest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 client_sock = 1;
  if (this->client_sock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->client_sock());
  }

  // int64 client_send_time = 2;
  if (this->client_send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->client_send_time());
  }

  // int64 src_server_sock = 3;
  if (this->src_server_sock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->src_server_sock());
  }

  // int32 word_server_id = 4;
  if (this->word_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->word_server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.NetTest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.NetTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.NetTest)
    MergeFrom(*source);
  }
}

void NetTest::MergeFrom(const NetTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.NetTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.client_sock() != 0) {
    set_client_sock(from.client_sock());
  }
  if (from.client_send_time() != 0) {
    set_client_send_time(from.client_send_time());
  }
  if (from.src_server_sock() != 0) {
    set_src_server_sock(from.src_server_sock());
  }
  if (from.word_server_id() != 0) {
    set_word_server_id(from.word_server_id());
  }
}

void NetTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.NetTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetTest::CopyFrom(const NetTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.NetTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetTest::IsInitialized() const {
  return true;
}

void NetTest::InternalSwap(NetTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_sock_, other->client_sock_);
  swap(client_send_time_, other->client_send_time_);
  swap(src_server_sock_, other->src_server_sock_);
  swap(word_server_id_, other->word_server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ServerInfoReportList_ServerListEntry_DoNotUse::ServerInfoReportList_ServerListEntry_DoNotUse() {}
ServerInfoReportList_ServerListEntry_DoNotUse::ServerInfoReportList_ServerListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerInfoReportList_ServerListEntry_DoNotUse::MergeFrom(const ServerInfoReportList_ServerListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReportList_ServerListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServerInfoReportList_ServerListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ServerInfoReportList::InitAsDefaultInstance() {
}
class ServerInfoReportList::_Internal {
 public:
};

ServerInfoReportList::ServerInfoReportList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ServerInfoReportList)
}
ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_list_.MergeFrom(from.server_list_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ServerInfoReportList)
}

void ServerInfoReportList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfoReportList_OuterMsg_2eproto.base);
}

ServerInfoReportList::~ServerInfoReportList() {
  // @@protoc_insertion_point(destructor:OuterMsg.ServerInfoReportList)
  SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
}

void ServerInfoReportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfoReportList& ServerInfoReportList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfoReportList_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ServerInfoReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ServerInfoReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfoReportList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&server_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfoReportList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ServerInfoReportList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ServerInfoReportList_ServerListEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ServerInfoReportList_ServerListEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport > > parser(&server_list_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ServerInfoReportList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ServerInfoReportList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfoReportList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ServerInfoReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
  if (!this->server_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->server_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->server_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_iterator
          it = this->server_list().begin();
          it != this->server_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ServerInfoReportList_ServerListEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_iterator
          it = this->server_list().begin();
          it != this->server_list().end(); ++it) {
        ServerInfoReportList_ServerListEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ServerInfoReportList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoReportList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ServerInfoReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
  if (!this->server_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->server_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->server_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_iterator
          it = this->server_list().begin();
          it != this->server_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServerInfoReportList_ServerListEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_iterator
          it = this->server_list().begin();
          it != this->server_list().end(); ++it) {
        target = ServerInfoReportList_ServerListEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ServerInfoReportList)
  return target;
}

size_t ServerInfoReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ServerInfoReportList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->server_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >::const_iterator
      it = this->server_list().begin();
      it != this->server_list().end(); ++it) {
    total_size += ServerInfoReportList_ServerListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReportList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfoReportList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ServerInfoReportList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ServerInfoReportList)
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
}

void ServerInfoReportList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {
  return true;
}

void ServerInfoReportList::InternalSwap(ServerInfoReportList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_list_.Swap(&other->server_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReportList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfo_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:OuterMsg.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfo_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wait_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wait_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.EServerState status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::OuterMsg::EServerState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ServerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wait_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.EServerState status = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::OuterMsg::EServerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->wait_count(), output);
  }

  // .OuterMsg.EServerState status = 4;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ServerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_count(), target);
  }

  // .OuterMsg.EServerState status = 4;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->wait_count());
  }

  // .OuterMsg.EServerState status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.wait_count() != 0) {
    set_wait_count(from.wait_count());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(wait_count_, other->wait_count_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerHeartBeat::InitAsDefaultInstance() {
}
class ServerHeartBeat::_Internal {
 public:
};

ServerHeartBeat::ServerHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ServerHeartBeat)
}
ServerHeartBeat::ServerHeartBeat(const ServerHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ServerHeartBeat)
}

void ServerHeartBeat::SharedCtor() {
  count_ = 0;
}

ServerHeartBeat::~ServerHeartBeat() {
  // @@protoc_insertion_point(destructor:OuterMsg.ServerHeartBeat)
  SharedDtor();
}

void ServerHeartBeat::SharedDtor() {
}

void ServerHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerHeartBeat& ServerHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerHeartBeat_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ServerHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerHeartBeat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ServerHeartBeat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ServerHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ServerHeartBeat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerHeartBeat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ServerHeartBeat)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerHeartBeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ServerHeartBeat)
  return target;
}

size_t ServerHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ServerHeartBeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ServerHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ServerHeartBeat)
    MergeFrom(*source);
  }
}

void ServerHeartBeat::MergeFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ServerHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHeartBeat::CopyFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHeartBeat::IsInitialized() const {
  return true;
}

void ServerHeartBeat::InternalSwap(ServerHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckWorldList::InitAsDefaultInstance() {
}
class AckWorldList::_Internal {
 public:
};

AckWorldList::AckWorldList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AckWorldList)
}
AckWorldList::AckWorldList(const AckWorldList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AckWorldList)
}

void AckWorldList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckWorldList_OuterMsg_2eproto.base);
}

AckWorldList::~AckWorldList() {
  // @@protoc_insertion_point(destructor:OuterMsg.AckWorldList)
  SharedDtor();
}

void AckWorldList::SharedDtor() {
}

void AckWorldList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckWorldList& AckWorldList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckWorldList_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AckWorldList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AckWorldList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckWorldList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.ServerInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckWorldList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AckWorldList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.ServerInfo info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AckWorldList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AckWorldList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckWorldList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AckWorldList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.ServerInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AckWorldList)
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWorldList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AckWorldList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.ServerInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AckWorldList)
  return target;
}

size_t AckWorldList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AckWorldList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.ServerInfo info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWorldList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AckWorldList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWorldList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWorldList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AckWorldList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AckWorldList)
    MergeFrom(*source);
  }
}

void AckWorldList::MergeFrom(const AckWorldList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AckWorldList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void AckWorldList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AckWorldList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWorldList::CopyFrom(const AckWorldList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AckWorldList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWorldList::IsInitialized() const {
  return true;
}

void AckWorldList::InternalSwap(AckWorldList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWorldList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqConnectWorld::InitAsDefaultInstance() {
  ::OuterMsg::_ReqConnectWorld_default_instance_._instance.get_mutable()->sender_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ReqConnectWorld::_Internal {
 public:
  static const ::OuterMsg::GUID& sender(const ReqConnectWorld* msg);
};

const ::OuterMsg::GUID&
ReqConnectWorld::_Internal::sender(const ReqConnectWorld* msg) {
  return *msg->sender_;
}
void ReqConnectWorld::clear_sender() {
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
ReqConnectWorld::ReqConnectWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqConnectWorld)
}
ReqConnectWorld::ReqConnectWorld(const ReqConnectWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.client_ip().empty()) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_sender()) {
    sender_ = new ::OuterMsg::GUID(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientVersion_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(clientVersion_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqConnectWorld)
}

void ReqConnectWorld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqConnectWorld_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientVersion_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(clientVersion_));
}

ReqConnectWorld::~ReqConnectWorld() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqConnectWorld)
  SharedDtor();
}

void ReqConnectWorld::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void ReqConnectWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqConnectWorld& ReqConnectWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqConnectWorld_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqConnectWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqConnectWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientVersion_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(clientVersion_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqConnectWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          clientVersion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes client_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqConnectWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqConnectWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID sender = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clientVersion = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientVersion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_ip = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqConnectWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqConnectWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqConnectWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqConnectWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // .OuterMsg.GUID sender = 3;
  if (this->has_sender()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::sender(this), output);
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->login_id(), output);
  }

  // int32 clientVersion = 5;
  if (this->clientVersion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->clientVersion(), output);
  }

  // bytes client_ip = 6;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqConnectWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqConnectWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqConnectWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // .OuterMsg.GUID sender = 3;
  if (this->has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::sender(this), target);
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->login_id(), target);
  }

  // int32 clientVersion = 5;
  if (this->clientVersion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->clientVersion(), target);
  }

  // bytes client_ip = 6;
  if (this->client_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqConnectWorld)
  return target;
}

size_t ReqConnectWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqConnectWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes client_ip = 6;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->client_ip());
  }

  // .OuterMsg.GUID sender = 3;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->login_id());
  }

  // int32 clientVersion = 5;
  if (this->clientVersion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->clientVersion());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqConnectWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqConnectWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqConnectWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqConnectWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqConnectWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqConnectWorld)
    MergeFrom(*source);
  }
}

void ReqConnectWorld::MergeFrom(const ReqConnectWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqConnectWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_sender()) {
    mutable_sender()->::OuterMsg::GUID::MergeFrom(from.sender());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.login_id() != 0) {
    set_login_id(from.login_id());
  }
  if (from.clientVersion() != 0) {
    set_clientVersion(from.clientVersion());
  }
}

void ReqConnectWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqConnectWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConnectWorld::CopyFrom(const ReqConnectWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqConnectWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConnectWorld::IsInitialized() const {
  return true;
}

void ReqConnectWorld::InternalSwap(ReqConnectWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(world_id_, other->world_id_);
  swap(login_id_, other->login_id_);
  swap(clientVersion_, other->clientVersion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqConnectWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckConnectWorldResult::InitAsDefaultInstance() {
  ::OuterMsg::_AckConnectWorldResult_default_instance_._instance.get_mutable()->sender_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_AckConnectWorldResult_default_instance_._instance.get_mutable()->world_param_ = const_cast< ::OuterMsg::WorldParam*>(
      ::OuterMsg::WorldParam::internal_default_instance());
}
class AckConnectWorldResult::_Internal {
 public:
  static const ::OuterMsg::GUID& sender(const AckConnectWorldResult* msg);
  static const ::OuterMsg::WorldParam& world_param(const AckConnectWorldResult* msg);
};

const ::OuterMsg::GUID&
AckConnectWorldResult::_Internal::sender(const AckConnectWorldResult* msg) {
  return *msg->sender_;
}
const ::OuterMsg::WorldParam&
AckConnectWorldResult::_Internal::world_param(const AckConnectWorldResult* msg) {
  return *msg->world_param_;
}
void AckConnectWorldResult::clear_sender() {
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
AckConnectWorldResult::AckConnectWorldResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AckConnectWorldResult)
}
AckConnectWorldResult::AckConnectWorldResult(const AckConnectWorldResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.world_ip().empty()) {
    world_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.world_ip_);
  }
  world_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.world_key().empty()) {
    world_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.world_key_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.client_ip().empty()) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_sender()) {
    sender_ = new ::OuterMsg::GUID(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  if (from.has_world_param()) {
    world_param_ = new ::OuterMsg::WorldParam(*from.world_param_);
  } else {
    world_param_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(event_code_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AckConnectWorldResult)
}

void AckConnectWorldResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckConnectWorldResult_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(event_code_));
}

AckConnectWorldResult::~AckConnectWorldResult() {
  // @@protoc_insertion_point(destructor:OuterMsg.AckConnectWorldResult)
  SharedDtor();
}

void AckConnectWorldResult::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
  if (this != internal_default_instance()) delete world_param_;
}

void AckConnectWorldResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckConnectWorldResult& AckConnectWorldResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckConnectWorldResult_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AckConnectWorldResult::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AckConnectWorldResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && world_param_ != nullptr) {
    delete world_param_;
  }
  world_param_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(event_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckConnectWorldResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes world_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_world_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes world_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_world_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.WorldParam world_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_world_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes client_ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.EGameEventCode event_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_event_code(static_cast<::OuterMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckConnectWorldResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AckConnectWorldResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID sender = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes world_ip = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_world_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 world_port = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes world_key = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_world_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.WorldParam world_param = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_world_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_ip = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.EGameEventCode event_code = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_code(static_cast< ::OuterMsg::EGameEventCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AckConnectWorldResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AckConnectWorldResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckConnectWorldResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AckConnectWorldResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // .OuterMsg.GUID sender = 2;
  if (this->has_sender()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::sender(this), output);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->login_id(), output);
  }

  // bytes account = 4;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->account(), output);
  }

  // bytes world_ip = 5;
  if (this->world_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->world_ip(), output);
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->world_port(), output);
  }

  // bytes world_key = 7;
  if (this->world_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->world_key(), output);
  }

  // .OuterMsg.WorldParam world_param = 8;
  if (this->has_world_param()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::world_param(this), output);
  }

  // bytes client_ip = 9;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->client_ip(), output);
  }

  // .OuterMsg.EGameEventCode event_code = 10;
  if (this->event_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->event_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AckConnectWorldResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* AckConnectWorldResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AckConnectWorldResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // .OuterMsg.GUID sender = 2;
  if (this->has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::sender(this), target);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->login_id(), target);
  }

  // bytes account = 4;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->account(), target);
  }

  // bytes world_ip = 5;
  if (this->world_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->world_ip(), target);
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->world_port(), target);
  }

  // bytes world_key = 7;
  if (this->world_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->world_key(), target);
  }

  // .OuterMsg.WorldParam world_param = 8;
  if (this->has_world_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::world_param(this), target);
  }

  // bytes client_ip = 9;
  if (this->client_ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->client_ip(), target);
  }

  // .OuterMsg.EGameEventCode event_code = 10;
  if (this->event_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->event_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AckConnectWorldResult)
  return target;
}

size_t AckConnectWorldResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AckConnectWorldResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes world_ip = 5;
  if (this->world_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->world_ip());
  }

  // bytes world_key = 7;
  if (this->world_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->world_key());
  }

  // bytes client_ip = 9;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->client_ip());
  }

  // .OuterMsg.GUID sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .OuterMsg.WorldParam world_param = 8;
  if (this->has_world_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_param_);
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->login_id());
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_port());
  }

  // .OuterMsg.EGameEventCode event_code = 10;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckConnectWorldResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AckConnectWorldResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckConnectWorldResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckConnectWorldResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AckConnectWorldResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AckConnectWorldResult)
    MergeFrom(*source);
  }
}

void AckConnectWorldResult::MergeFrom(const AckConnectWorldResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AckConnectWorldResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.world_ip().size() > 0) {

    world_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.world_ip_);
  }
  if (from.world_key().size() > 0) {

    world_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.world_key_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_sender()) {
    mutable_sender()->::OuterMsg::GUID::MergeFrom(from.sender());
  }
  if (from.has_world_param()) {
    mutable_world_param()->::OuterMsg::WorldParam::MergeFrom(from.world_param());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.login_id() != 0) {
    set_login_id(from.login_id());
  }
  if (from.world_port() != 0) {
    set_world_port(from.world_port());
  }
  if (from.event_code() != 0) {
    set_event_code(from.event_code());
  }
}

void AckConnectWorldResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AckConnectWorldResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckConnectWorldResult::CopyFrom(const AckConnectWorldResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AckConnectWorldResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckConnectWorldResult::IsInitialized() const {
  return true;
}

void AckConnectWorldResult::InternalSwap(AckConnectWorldResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  world_ip_.Swap(&other->world_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  world_key_.Swap(&other->world_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(world_param_, other->world_param_);
  swap(world_id_, other->world_id_);
  swap(login_id_, other->login_id_);
  swap(world_port_, other->world_port_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckConnectWorldResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

WorldParam_ExtraServerEntry_DoNotUse::WorldParam_ExtraServerEntry_DoNotUse() {}
WorldParam_ExtraServerEntry_DoNotUse::WorldParam_ExtraServerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WorldParam_ExtraServerEntry_DoNotUse::MergeFrom(const WorldParam_ExtraServerEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WorldParam_ExtraServerEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WorldParam_ExtraServerEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void WorldParam::InitAsDefaultInstance() {
}
class WorldParam::_Internal {
 public:
};

WorldParam::WorldParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.WorldParam)
}
WorldParam::WorldParam(const WorldParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_server_.MergeFrom(from.extra_server_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.WorldParam)
}

void WorldParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldParam_OuterMsg_2eproto.base);
}

WorldParam::~WorldParam() {
  // @@protoc_insertion_point(destructor:OuterMsg.WorldParam)
  SharedDtor();
}

void WorldParam::SharedDtor() {
}

void WorldParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldParam& WorldParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldParam_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void WorldParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.WorldParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_server_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorldParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extra_server_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorldParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.WorldParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          WorldParam_ExtraServerEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              WorldParam_ExtraServerEntry_DoNotUse,
              std::string, ::OuterMsg::ServerConnectInfo,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo > > parser(&extra_server_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "OuterMsg.WorldParam.ExtraServerEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.WorldParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.WorldParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorldParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.WorldParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
  if (!this->extra_server().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.WorldParam.ExtraServerEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->extra_server().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extra_server().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_iterator
          it = this->extra_server().begin();
          it != this->extra_server().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        WorldParam_ExtraServerEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_iterator
          it = this->extra_server().begin();
          it != this->extra_server().end(); ++it) {
        WorldParam_ExtraServerEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.WorldParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.WorldParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
  if (!this->extra_server().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.WorldParam.ExtraServerEntry.key");
      }
    };

    if (false &&
        this->extra_server().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extra_server().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_iterator
          it = this->extra_server().begin();
          it != this->extra_server().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WorldParam_ExtraServerEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_iterator
          it = this->extra_server().begin();
          it != this->extra_server().end(); ++it) {
        target = WorldParam_ExtraServerEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.WorldParam)
  return target;
}

size_t WorldParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.WorldParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_server_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >::const_iterator
      it = this->extra_server().begin();
      it != this->extra_server().end(); ++it) {
    total_size += WorldParam_ExtraServerEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.WorldParam)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.WorldParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.WorldParam)
    MergeFrom(*source);
  }
}

void WorldParam::MergeFrom(const WorldParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.WorldParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_server_.MergeFrom(from.extra_server_);
}

void WorldParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.WorldParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldParam::CopyFrom(const WorldParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.WorldParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldParam::IsInitialized() const {
  return true;
}

void WorldParam::InternalSwap(WorldParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extra_server_.Swap(&other->extra_server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqRoleList::InitAsDefaultInstance() {
}
class ReqRoleList::_Internal {
 public:
};

ReqRoleList::ReqRoleList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqRoleList)
}
ReqRoleList::ReqRoleList(const ReqRoleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqRoleList)
}

void ReqRoleList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqRoleList_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqRoleList::~ReqRoleList() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqRoleList)
  SharedDtor();
}

void ReqRoleList::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqRoleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqRoleList& ReqRoleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqRoleList_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqRoleList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqRoleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqRoleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqRoleList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqRoleList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqRoleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqRoleList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqRoleList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqRoleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqRoleList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRoleList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqRoleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqRoleList)
  return target;
}

size_t ReqRoleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqRoleList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRoleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqRoleList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRoleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRoleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqRoleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqRoleList)
    MergeFrom(*source);
  }
}

void ReqRoleList::MergeFrom(const ReqRoleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqRoleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void ReqRoleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqRoleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoleList::CopyFrom(const ReqRoleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqRoleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoleList::IsInitialized() const {
  return true;
}

void ReqRoleList::InternalSwap(ReqRoleList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRoleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleLiteInfo::InitAsDefaultInstance() {
  ::OuterMsg::_RoleLiteInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RoleLiteInfo::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RoleLiteInfo* msg);
};

const ::OuterMsg::GUID&
RoleLiteInfo::_Internal::id(const RoleLiteInfo* msg) {
  return *msg->id_;
}
void RoleLiteInfo::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RoleLiteInfo::RoleLiteInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RoleLiteInfo)
}
RoleLiteInfo::RoleLiteInfo(const RoleLiteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.info().empty()) {
    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  open_time_ = from.open_time_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RoleLiteInfo)
}

void RoleLiteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleLiteInfo_OuterMsg_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(open_time_));
}

RoleLiteInfo::~RoleLiteInfo() {
  // @@protoc_insertion_point(destructor:OuterMsg.RoleLiteInfo)
  SharedDtor();
}

void RoleLiteInfo::SharedDtor() {
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void RoleLiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleLiteInfo& RoleLiteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleLiteInfo_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RoleLiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RoleLiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  open_time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoleLiteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 open_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoleLiteInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RoleLiteInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RoleLiteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RoleLiteInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoleLiteInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RoleLiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // bytes info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->info(), output);
  }

  // int32 open_time = 3;
  if (this->open_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->open_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RoleLiteInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleLiteInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RoleLiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // bytes info = 2;
  if (this->info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->info(), target);
  }

  // int32 open_time = 3;
  if (this->open_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->open_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RoleLiteInfo)
  return target;
}

size_t RoleLiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RoleLiteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->info());
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 open_time = 3;
  if (this->open_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->open_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleLiteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RoleLiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleLiteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleLiteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RoleLiteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RoleLiteInfo)
    MergeFrom(*source);
  }
}

void RoleLiteInfo::MergeFrom(const RoleLiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RoleLiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.open_time() != 0) {
    set_open_time(from.open_time());
  }
}

void RoleLiteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RoleLiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleLiteInfo::CopyFrom(const RoleLiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RoleLiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLiteInfo::IsInitialized() const {
  return true;
}

void RoleLiteInfo::InternalSwap(RoleLiteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(open_time_, other->open_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLiteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckRoleLiteInfoList::InitAsDefaultInstance() {
}
class AckRoleLiteInfoList::_Internal {
 public:
};

AckRoleLiteInfoList::AckRoleLiteInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AckRoleLiteInfoList)
}
AckRoleLiteInfoList::AckRoleLiteInfoList(const AckRoleLiteInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      char_data_(from.char_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AckRoleLiteInfoList)
}

void AckRoleLiteInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckRoleLiteInfoList_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AckRoleLiteInfoList::~AckRoleLiteInfoList() {
  // @@protoc_insertion_point(destructor:OuterMsg.AckRoleLiteInfoList)
  SharedDtor();
}

void AckRoleLiteInfoList::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckRoleLiteInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckRoleLiteInfoList& AckRoleLiteInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckRoleLiteInfoList_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AckRoleLiteInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AckRoleLiteInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_data_.Clear();
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckRoleLiteInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.RoleLiteInfo char_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_char_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckRoleLiteInfoList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AckRoleLiteInfoList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.RoleLiteInfo char_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_char_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AckRoleLiteInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AckRoleLiteInfoList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckRoleLiteInfoList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AckRoleLiteInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.RoleLiteInfo char_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->char_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->char_data(static_cast<int>(i)),
      output);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AckRoleLiteInfoList)
}

::PROTOBUF_NAMESPACE_ID::uint8* AckRoleLiteInfoList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AckRoleLiteInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.RoleLiteInfo char_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->char_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->char_data(static_cast<int>(i)), target);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AckRoleLiteInfoList)
  return target;
}

size_t AckRoleLiteInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AckRoleLiteInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.RoleLiteInfo char_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->char_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->char_data(static_cast<int>(i)));
    }
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckRoleLiteInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AckRoleLiteInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRoleLiteInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckRoleLiteInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AckRoleLiteInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AckRoleLiteInfoList)
    MergeFrom(*source);
  }
}

void AckRoleLiteInfoList::MergeFrom(const AckRoleLiteInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AckRoleLiteInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  char_data_.MergeFrom(from.char_data_);
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void AckRoleLiteInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AckRoleLiteInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRoleLiteInfoList::CopyFrom(const AckRoleLiteInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AckRoleLiteInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRoleLiteInfoList::IsInitialized() const {
  return true;
}

void AckRoleLiteInfoList::InternalSwap(AckRoleLiteInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&char_data_)->InternalSwap(CastToBase(&other->char_data_));
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AckRoleLiteInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCreateRole::InitAsDefaultInstance() {
  ::OuterMsg::_ReqCreateRole_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ReqCreateRole_default_instance_._instance.get_mutable()->roleData_ = const_cast< ::OuterMsg::ObjectDataPack*>(
      ::OuterMsg::ObjectDataPack::internal_default_instance());
}
class ReqCreateRole::_Internal {
 public:
  static const ::OuterMsg::GUID& client_id(const ReqCreateRole* msg);
  static const ::OuterMsg::ObjectDataPack& roleData(const ReqCreateRole* msg);
};

const ::OuterMsg::GUID&
ReqCreateRole::_Internal::client_id(const ReqCreateRole* msg) {
  return *msg->client_id_;
}
const ::OuterMsg::ObjectDataPack&
ReqCreateRole::_Internal::roleData(const ReqCreateRole* msg) {
  return *msg->roleData_;
}
void ReqCreateRole::clear_client_id() {
  if (GetArenaNoVirtual() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
void ReqCreateRole::clear_roleData() {
  if (GetArenaNoVirtual() == nullptr && roleData_ != nullptr) {
    delete roleData_;
  }
  roleData_ = nullptr;
}
ReqCreateRole::ReqCreateRole()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqCreateRole)
}
ReqCreateRole::ReqCreateRole(const ReqCreateRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  noob_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.noob_name().empty()) {
    noob_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.noob_name_);
  }
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.msg_data().empty()) {
    msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_client_id()) {
    client_id_ = new ::OuterMsg::GUID(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from.has_roleData()) {
    roleData_ = new ::OuterMsg::ObjectDataPack(*from.roleData_);
  } else {
    roleData_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqCreateRole)
}

void ReqCreateRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCreateRole_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  noob_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleData_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(roleData_));
}

ReqCreateRole::~ReqCreateRole() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqCreateRole)
  SharedDtor();
}

void ReqCreateRole::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  noob_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete roleData_;
}

void ReqCreateRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCreateRole& ReqCreateRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCreateRole_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqCreateRole::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqCreateRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  noob_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && roleData_ != nullptr) {
    delete roleData_;
  }
  roleData_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCreateRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes noob_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_noob_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_msg_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.ObjectDataPack roleData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_roleData(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCreateRole::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqCreateRole)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes noob_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_noob_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID client_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.ObjectDataPack roleData = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roleData()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqCreateRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqCreateRole)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCreateRole::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqCreateRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // bytes noob_name = 2;
  if (this->noob_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->noob_name(), output);
  }

  // .OuterMsg.GUID client_id = 3;
  if (this->has_client_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::client_id(this), output);
  }

  // bytes msg_data = 4;
  if (this->msg_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msg_data(), output);
  }

  // .OuterMsg.ObjectDataPack roleData = 5;
  if (this->has_roleData()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::roleData(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqCreateRole)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateRole::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqCreateRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // bytes noob_name = 2;
  if (this->noob_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->noob_name(), target);
  }

  // .OuterMsg.GUID client_id = 3;
  if (this->has_client_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::client_id(this), target);
  }

  // bytes msg_data = 4;
  if (this->msg_data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg_data(), target);
  }

  // .OuterMsg.ObjectDataPack roleData = 5;
  if (this->has_roleData()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::roleData(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqCreateRole)
  return target;
}

size_t ReqCreateRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqCreateRole)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes noob_name = 2;
  if (this->noob_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->noob_name());
  }

  // bytes msg_data = 4;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  // .OuterMsg.GUID client_id = 3;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // .OuterMsg.ObjectDataPack roleData = 5;
  if (this->has_roleData()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roleData_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqCreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqCreateRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqCreateRole)
    MergeFrom(*source);
  }
}

void ReqCreateRole::MergeFrom(const ReqCreateRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqCreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.noob_name().size() > 0) {

    noob_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.noob_name_);
  }
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_client_id()) {
    mutable_client_id()->::OuterMsg::GUID::MergeFrom(from.client_id());
  }
  if (from.has_roleData()) {
    mutable_roleData()->::OuterMsg::ObjectDataPack::MergeFrom(from.roleData());
  }
}

void ReqCreateRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqCreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateRole::CopyFrom(const ReqCreateRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqCreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateRole::IsInitialized() const {
  return true;
}

void ReqCreateRole::InternalSwap(ReqCreateRole* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  noob_name_.Swap(&other->noob_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_id_, other->client_id_);
  swap(roleData_, other->roleData_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqDeleteRole::InitAsDefaultInstance() {
}
class ReqDeleteRole::_Internal {
 public:
};

ReqDeleteRole::ReqDeleteRole()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqDeleteRole)
}
ReqDeleteRole::ReqDeleteRole(const ReqDeleteRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqDeleteRole)
}

void ReqDeleteRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqDeleteRole_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqDeleteRole::~ReqDeleteRole() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqDeleteRole)
  SharedDtor();
}

void ReqDeleteRole::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqDeleteRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqDeleteRole& ReqDeleteRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqDeleteRole_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqDeleteRole::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqDeleteRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqDeleteRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqDeleteRole::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqDeleteRole)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqDeleteRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqDeleteRole)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqDeleteRole::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqDeleteRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqDeleteRole)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDeleteRole::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqDeleteRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqDeleteRole)
  return target;
}

size_t ReqDeleteRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqDeleteRole)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDeleteRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqDeleteRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDeleteRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqDeleteRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqDeleteRole)
    MergeFrom(*source);
  }
}

void ReqDeleteRole::MergeFrom(const ReqDeleteRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqDeleteRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ReqDeleteRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqDeleteRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteRole::CopyFrom(const ReqDeleteRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqDeleteRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteRole::IsInitialized() const {
  return true;
}

void ReqDeleteRole::InternalSwap(ReqDeleteRole* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDeleteRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleOnlineNotify::InitAsDefaultInstance() {
  ::OuterMsg::_RoleOnlineNotify_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RoleOnlineNotify_default_instance_._instance.get_mutable()->client_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RoleOnlineNotify::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const RoleOnlineNotify* msg);
  static const ::OuterMsg::GUID& client(const RoleOnlineNotify* msg);
};

const ::OuterMsg::GUID&
RoleOnlineNotify::_Internal::self(const RoleOnlineNotify* msg) {
  return *msg->self_;
}
const ::OuterMsg::GUID&
RoleOnlineNotify::_Internal::client(const RoleOnlineNotify* msg) {
  return *msg->client_;
}
void RoleOnlineNotify::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
void RoleOnlineNotify::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
RoleOnlineNotify::RoleOnlineNotify()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RoleOnlineNotify)
}
RoleOnlineNotify::RoleOnlineNotify(const RoleOnlineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  if (from.has_client()) {
    client_ = new ::OuterMsg::GUID(*from.client_);
  } else {
    client_ = nullptr;
  }
  ::memcpy(&game_, &from.game_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxy_) -
    reinterpret_cast<char*>(&game_)) + sizeof(proxy_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RoleOnlineNotify)
}

void RoleOnlineNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleOnlineNotify_OuterMsg_2eproto.base);
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_) -
      reinterpret_cast<char*>(&self_)) + sizeof(proxy_));
}

RoleOnlineNotify::~RoleOnlineNotify() {
  // @@protoc_insertion_point(destructor:OuterMsg.RoleOnlineNotify)
  SharedDtor();
}

void RoleOnlineNotify::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
  if (this != internal_default_instance()) delete client_;
}

void RoleOnlineNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleOnlineNotify& RoleOnlineNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleOnlineNotify_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RoleOnlineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RoleOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  ::memset(&game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_) -
      reinterpret_cast<char*>(&game_)) + sizeof(proxy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoleOnlineNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 proxy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          proxy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoleOnlineNotify::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RoleOnlineNotify)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID self = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 proxy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID client = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RoleOnlineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RoleOnlineNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoleOnlineNotify::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RoleOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::self(this), output);
  }

  // int32 game = 2;
  if (this->game() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->game(), output);
  }

  // int32 proxy = 3;
  if (this->proxy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->proxy(), output);
  }

  // .OuterMsg.GUID client = 4;
  if (this->has_client()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::client(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RoleOnlineNotify)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleOnlineNotify::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RoleOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::self(this), target);
  }

  // int32 game = 2;
  if (this->game() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->game(), target);
  }

  // int32 proxy = 3;
  if (this->proxy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->proxy(), target);
  }

  // .OuterMsg.GUID client = 4;
  if (this->has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::client(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RoleOnlineNotify)
  return target;
}

size_t RoleOnlineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RoleOnlineNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // .OuterMsg.GUID client = 4;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // int32 game = 2;
  if (this->game() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->game());
  }

  // int32 proxy = 3;
  if (this->proxy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->proxy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleOnlineNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RoleOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleOnlineNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleOnlineNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RoleOnlineNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RoleOnlineNotify)
    MergeFrom(*source);
  }
}

void RoleOnlineNotify::MergeFrom(const RoleOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RoleOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
  if (from.has_client()) {
    mutable_client()->::OuterMsg::GUID::MergeFrom(from.client());
  }
  if (from.game() != 0) {
    set_game(from.game());
  }
  if (from.proxy() != 0) {
    set_proxy(from.proxy());
  }
}

void RoleOnlineNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RoleOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOnlineNotify::CopyFrom(const RoleOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RoleOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOnlineNotify::IsInitialized() const {
  return true;
}

void RoleOnlineNotify::InternalSwap(RoleOnlineNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(self_, other->self_);
  swap(client_, other->client_);
  swap(game_, other->game_);
  swap(proxy_, other->proxy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOnlineNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleOfflineNotify::InitAsDefaultInstance() {
  ::OuterMsg::_RoleOfflineNotify_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RoleOfflineNotify::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const RoleOfflineNotify* msg);
};

const ::OuterMsg::GUID&
RoleOfflineNotify::_Internal::self(const RoleOfflineNotify* msg) {
  return *msg->self_;
}
void RoleOfflineNotify::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
RoleOfflineNotify::RoleOfflineNotify()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RoleOfflineNotify)
}
RoleOfflineNotify::RoleOfflineNotify(const RoleOfflineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  ::memcpy(&game_, &from.game_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxy_) -
    reinterpret_cast<char*>(&game_)) + sizeof(proxy_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RoleOfflineNotify)
}

void RoleOfflineNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleOfflineNotify_OuterMsg_2eproto.base);
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_) -
      reinterpret_cast<char*>(&self_)) + sizeof(proxy_));
}

RoleOfflineNotify::~RoleOfflineNotify() {
  // @@protoc_insertion_point(destructor:OuterMsg.RoleOfflineNotify)
  SharedDtor();
}

void RoleOfflineNotify::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
}

void RoleOfflineNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleOfflineNotify& RoleOfflineNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleOfflineNotify_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RoleOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RoleOfflineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  ::memset(&game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_) -
      reinterpret_cast<char*>(&game_)) + sizeof(proxy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoleOfflineNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 proxy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          proxy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoleOfflineNotify::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RoleOfflineNotify)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID self = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 proxy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RoleOfflineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RoleOfflineNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoleOfflineNotify::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RoleOfflineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::self(this), output);
  }

  // int32 game = 2;
  if (this->game() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->game(), output);
  }

  // int32 proxy = 3;
  if (this->proxy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->proxy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RoleOfflineNotify)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleOfflineNotify::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RoleOfflineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::self(this), target);
  }

  // int32 game = 2;
  if (this->game() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->game(), target);
  }

  // int32 proxy = 3;
  if (this->proxy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->proxy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RoleOfflineNotify)
  return target;
}

size_t RoleOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RoleOfflineNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // int32 game = 2;
  if (this->game() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->game());
  }

  // int32 proxy = 3;
  if (this->proxy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->proxy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleOfflineNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RoleOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleOfflineNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleOfflineNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RoleOfflineNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RoleOfflineNotify)
    MergeFrom(*source);
  }
}

void RoleOfflineNotify::MergeFrom(const RoleOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RoleOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
  if (from.game() != 0) {
    set_game(from.game());
  }
  if (from.proxy() != 0) {
    set_proxy(from.proxy());
  }
}

void RoleOfflineNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RoleOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOfflineNotify::CopyFrom(const RoleOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RoleOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOfflineNotify::IsInitialized() const {
  return true;
}

void RoleOfflineNotify::InternalSwap(RoleOfflineNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(self_, other->self_);
  swap(game_, other->game_);
  swap(proxy_, other->proxy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOfflineNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::OuterMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ReqEnterGameServer::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const ReqEnterGameServer* msg);
};

const ::OuterMsg::GUID&
ReqEnterGameServer::_Internal::id(const ReqEnterGameServer* msg) {
  return *msg->id_;
}
void ReqEnterGameServer::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqEnterGameServer::ReqEnterGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  device_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.device_mac().empty()) {
    device_mac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_mac_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  os_type_ = from.os_type_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqEnterGameServer_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&os_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(os_type_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqEnterGameServer_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  os_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqEnterGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_mac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_mac(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.OsType os_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_os_type(static_cast<::OuterMsg::OsType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqEnterGameServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes device_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes device_mac = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.OsType os_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_type(static_cast< ::OuterMsg::OsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqEnterGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqEnterGameServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  // bytes device_id = 4;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->device_id(), output);
  }

  // bytes device_mac = 5;
  if (this->device_mac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->device_mac(), output);
  }

  // .OuterMsg.OsType os_type = 6;
  if (this->os_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->os_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqEnterGameServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // bytes device_id = 4;
  if (this->device_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->device_id(), target);
  }

  // bytes device_mac = 5;
  if (this->device_mac().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->device_mac(), target);
  }

  // .OuterMsg.OsType os_type = 6;
  if (this->os_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->os_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqEnterGameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // bytes device_id = 4;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->device_id());
  }

  // bytes device_mac = 5;
  if (this->device_mac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->device_mac());
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.OsType os_type = 6;
  if (this->os_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->os_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEnterGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqEnterGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.device_mac().size() > 0) {

    device_mac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_mac_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.os_type() != 0) {
    set_os_type(from.os_type());
  }
}

void ReqEnterGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  return true;
}

void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_mac_.Swap(&other->device_mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(os_type_, other->os_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckEnterGameSuccess::InitAsDefaultInstance() {
}
class ReqAckEnterGameSuccess::_Internal {
 public:
};

ReqAckEnterGameSuccess::ReqAckEnterGameSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqAckEnterGameSuccess)
}
ReqAckEnterGameSuccess::ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqAckEnterGameSuccess)
}

void ReqAckEnterGameSuccess::SharedCtor() {
  arg_ = 0;
}

ReqAckEnterGameSuccess::~ReqAckEnterGameSuccess() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqAckEnterGameSuccess)
  SharedDtor();
}

void ReqAckEnterGameSuccess::SharedDtor() {
}

void ReqAckEnterGameSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckEnterGameSuccess& ReqAckEnterGameSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckEnterGameSuccess_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqAckEnterGameSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqAckEnterGameSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqAckEnterGameSuccess::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqAckEnterGameSuccess)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqAckEnterGameSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqAckEnterGameSuccess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqAckEnterGameSuccess::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqAckEnterGameSuccess)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckEnterGameSuccess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqAckEnterGameSuccess)
  return target;
}

size_t ReqAckEnterGameSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqAckEnterGameSuccess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckEnterGameSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEnterGameSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckEnterGameSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqAckEnterGameSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqAckEnterGameSuccess)
    MergeFrom(*source);
  }
}

void ReqAckEnterGameSuccess::MergeFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqAckEnterGameSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEnterGameSuccess::CopyFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEnterGameSuccess::IsInitialized() const {
  return true;
}

void ReqAckEnterGameSuccess::InternalSwap(ReqAckEnterGameSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckEnterGameSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
class ReqLeaveGameServer::_Internal {
 public:
};

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  arg_ = 0;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqLeaveGameServer_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqLeaveGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqLeaveGameServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqLeaveGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqLeaveGameServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqLeaveGameServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqLeaveGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandMsg::InitAsDefaultInstance() {
  ::OuterMsg::_CommandMsg_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_CommandMsg_default_instance_._instance.get_mutable()->target_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_CommandMsg_default_instance_._instance.get_mutable()->data_ = const_cast< ::OuterMsg::PBDataList*>(
      ::OuterMsg::PBDataList::internal_default_instance());
}
class CommandMsg::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const CommandMsg* msg);
  static const ::OuterMsg::GUID& target(const CommandMsg* msg);
  static const ::OuterMsg::PBDataList& data(const CommandMsg* msg);
};

const ::OuterMsg::GUID&
CommandMsg::_Internal::self(const CommandMsg* msg) {
  return *msg->self_;
}
const ::OuterMsg::GUID&
CommandMsg::_Internal::target(const CommandMsg* msg) {
  return *msg->target_;
}
const ::OuterMsg::PBDataList&
CommandMsg::_Internal::data(const CommandMsg* msg) {
  return *msg->data_;
}
void CommandMsg::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
void CommandMsg::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
void CommandMsg::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
CommandMsg::CommandMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.CommandMsg)
}
CommandMsg::CommandMsg(const CommandMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_class_Name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.target_class_Name().empty()) {
    target_class_Name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_class_Name_);
  }
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  if (from.has_target()) {
    target_ = new ::OuterMsg::GUID(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::OuterMsg::PBDataList(*from.data_);
  } else {
    data_ = nullptr;
  }
  Id_ = from.Id_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.CommandMsg)
}

void CommandMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandMsg_OuterMsg_2eproto.base);
  target_class_Name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&Id_) -
      reinterpret_cast<char*>(&self_)) + sizeof(Id_));
}

CommandMsg::~CommandMsg() {
  // @@protoc_insertion_point(destructor:OuterMsg.CommandMsg)
  SharedDtor();
}

void CommandMsg::SharedDtor() {
  target_class_Name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_;
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete data_;
}

void CommandMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandMsg& CommandMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandMsg_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void CommandMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.CommandMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_class_Name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  Id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommandMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          Id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID self = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes target_class_Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_target_class_Name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PBDataList data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommandMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.CommandMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &Id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID self = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID target = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes target_class_Name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_class_Name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PBDataList data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.CommandMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.CommandMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommandMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.CommandMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->Id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->Id(), output);
  }

  // .OuterMsg.GUID self = 2;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::self(this), output);
  }

  // .OuterMsg.GUID target = 3;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::target(this), output);
  }

  // bytes target_class_Name = 4;
  if (this->target_class_Name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->target_class_Name(), output);
  }

  // .OuterMsg.PBDataList data = 5;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.CommandMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.CommandMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->Id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->Id(), target);
  }

  // .OuterMsg.GUID self = 2;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::self(this), target);
  }

  // .OuterMsg.GUID target = 3;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::target(this), target);
  }

  // bytes target_class_Name = 4;
  if (this->target_class_Name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->target_class_Name(), target);
  }

  // .OuterMsg.PBDataList data = 5;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.CommandMsg)
  return target;
}

size_t CommandMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.CommandMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes target_class_Name = 4;
  if (this->target_class_Name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->target_class_Name());
  }

  // .OuterMsg.GUID self = 2;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // .OuterMsg.GUID target = 3;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .OuterMsg.PBDataList data = 5;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 Id = 1;
  if (this->Id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->Id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.CommandMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.CommandMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.CommandMsg)
    MergeFrom(*source);
  }
}

void CommandMsg::MergeFrom(const CommandMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.CommandMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_class_Name().size() > 0) {

    target_class_Name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_class_Name_);
  }
  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
  if (from.has_target()) {
    mutable_target()->::OuterMsg::GUID::MergeFrom(from.target());
  }
  if (from.has_data()) {
    mutable_data()->::OuterMsg::PBDataList::MergeFrom(from.data());
  }
  if (from.Id() != 0) {
    set_Id(from.Id());
  }
}

void CommandMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.CommandMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMsg::CopyFrom(const CommandMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.CommandMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMsg::IsInitialized() const {
  return true;
}

void CommandMsg::InternalSwap(CommandMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_class_Name_.Swap(&other->target_class_Name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(self_, other->self_);
  swap(target_, other->target_);
  swap(data_, other->data_);
  swap(Id_, other->Id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LetterData::InitAsDefaultInstance() {
  ::OuterMsg::_LetterData_default_instance_._instance.get_mutable()->sender_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_LetterData_default_instance_._instance.get_mutable()->receiver_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_LetterData_default_instance_._instance.get_mutable()->args_ = const_cast< ::OuterMsg::PBDataList*>(
      ::OuterMsg::PBDataList::internal_default_instance());
}
class LetterData::_Internal {
 public:
  static const ::OuterMsg::GUID& sender(const LetterData* msg);
  static const ::OuterMsg::GUID& receiver(const LetterData* msg);
  static const ::OuterMsg::PBDataList& args(const LetterData* msg);
};

const ::OuterMsg::GUID&
LetterData::_Internal::sender(const LetterData* msg) {
  return *msg->sender_;
}
const ::OuterMsg::GUID&
LetterData::_Internal::receiver(const LetterData* msg) {
  return *msg->receiver_;
}
const ::OuterMsg::PBDataList&
LetterData::_Internal::args(const LetterData* msg) {
  return *msg->args_;
}
void LetterData::clear_sender() {
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
void LetterData::clear_receiver() {
  if (GetArenaNoVirtual() == nullptr && receiver_ != nullptr) {
    delete receiver_;
  }
  receiver_ = nullptr;
}
void LetterData::clear_args() {
  if (GetArenaNoVirtual() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
}
LetterData::LetterData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.LetterData)
}
LetterData::LetterData(const LetterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ID_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ID().empty()) {
    ID_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ID_);
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sendname().empty()) {
    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  append_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.append().empty()) {
    append_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.append_);
  }
  if (from.has_sender()) {
    sender_ = new ::OuterMsg::GUID(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  if (from.has_receiver()) {
    receiver_ = new ::OuterMsg::GUID(*from.receiver_);
  } else {
    receiver_ = nullptr;
  }
  if (from.has_args()) {
    args_ = new ::OuterMsg::PBDataList(*from.args_);
  } else {
    args_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.LetterData)
}

void LetterData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LetterData_OuterMsg_2eproto.base);
  ID_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  append_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(time_));
}

LetterData::~LetterData() {
  // @@protoc_insertion_point(destructor:OuterMsg.LetterData)
  SharedDtor();
}

void LetterData::SharedDtor() {
  ID_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  append_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
  if (this != internal_default_instance()) delete receiver_;
  if (this != internal_default_instance()) delete args_;
}

void LetterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LetterData& LetterData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LetterData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void LetterData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.LetterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ID_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  append_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receiver_ != nullptr) {
    delete receiver_;
  }
  receiver_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LetterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ID(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sendname(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID receiver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_receiver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PBDataList args = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes append = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_append(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LetterData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.LetterData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ID()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID sender = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sendname = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sendname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID receiver = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes title = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PBDataList args = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes append = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_append()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.LetterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.LetterData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LetterData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.LetterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ID = 1;
  if (this->ID().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ID(), output);
  }

  // .OuterMsg.GUID sender = 2;
  if (this->has_sender()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::sender(this), output);
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sendname(), output);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // .OuterMsg.GUID receiver = 5;
  if (this->has_receiver()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::receiver(this), output);
  }

  // bytes title = 6;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->title(), output);
  }

  // bytes content = 7;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->content(), output);
  }

  // .OuterMsg.PBDataList args = 8;
  if (this->has_args()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::args(this), output);
  }

  // bytes append = 9;
  if (this->append().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->append(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.LetterData)
}

::PROTOBUF_NAMESPACE_ID::uint8* LetterData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.LetterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ID = 1;
  if (this->ID().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->ID(), target);
  }

  // .OuterMsg.GUID sender = 2;
  if (this->has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::sender(this), target);
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->sendname(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // .OuterMsg.GUID receiver = 5;
  if (this->has_receiver()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::receiver(this), target);
  }

  // bytes title = 6;
  if (this->title().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->title(), target);
  }

  // bytes content = 7;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  // .OuterMsg.PBDataList args = 8;
  if (this->has_args()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::args(this), target);
  }

  // bytes append = 9;
  if (this->append().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->append(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.LetterData)
  return target;
}

size_t LetterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.LetterData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ID = 1;
  if (this->ID().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ID());
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sendname());
  }

  // bytes title = 6;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->title());
  }

  // bytes content = 7;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // bytes append = 9;
  if (this->append().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->append());
  }

  // .OuterMsg.GUID sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .OuterMsg.GUID receiver = 5;
  if (this->has_receiver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_);
  }

  // .OuterMsg.PBDataList args = 8;
  if (this->has_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LetterData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.LetterData)
  GOOGLE_DCHECK_NE(&from, this);
  const LetterData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LetterData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.LetterData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.LetterData)
    MergeFrom(*source);
  }
}

void LetterData::MergeFrom(const LetterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.LetterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ID().size() > 0) {

    ID_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ID_);
  }
  if (from.sendname().size() > 0) {

    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.append().size() > 0) {

    append_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.append_);
  }
  if (from.has_sender()) {
    mutable_sender()->::OuterMsg::GUID::MergeFrom(from.sender());
  }
  if (from.has_receiver()) {
    mutable_receiver()->::OuterMsg::GUID::MergeFrom(from.receiver());
  }
  if (from.has_args()) {
    mutable_args()->::OuterMsg::PBDataList::MergeFrom(from.args());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void LetterData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.LetterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LetterData::CopyFrom(const LetterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.LetterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LetterData::IsInitialized() const {
  return true;
}

void LetterData::InternalSwap(LetterData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ID_.Swap(&other->ID_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sendname_.Swap(&other->sendname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  append_.Swap(&other->append_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(receiver_, other->receiver_);
  swap(args_, other->args_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LetterData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LetterDataPack::InitAsDefaultInstance() {
  ::OuterMsg::_LetterDataPack_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class LetterDataPack::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const LetterDataPack* msg);
};

const ::OuterMsg::GUID&
LetterDataPack::_Internal::self(const LetterDataPack* msg) {
  return *msg->self_;
}
void LetterDataPack::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
LetterDataPack::LetterDataPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.LetterDataPack)
}
LetterDataPack::LetterDataPack(const LetterDataPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      letter_(from.letter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.LetterDataPack)
}

void LetterDataPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LetterDataPack_OuterMsg_2eproto.base);
  self_ = nullptr;
}

LetterDataPack::~LetterDataPack() {
  // @@protoc_insertion_point(destructor:OuterMsg.LetterDataPack)
  SharedDtor();
}

void LetterDataPack::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
}

void LetterDataPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LetterDataPack& LetterDataPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LetterDataPack_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void LetterDataPack::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.LetterDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  letter_.Clear();
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LetterDataPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.LetterData letter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_letter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LetterDataPack::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.LetterDataPack)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID self = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.LetterData letter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_letter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.LetterDataPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.LetterDataPack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LetterDataPack::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.LetterDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::self(this), output);
  }

  // repeated .OuterMsg.LetterData letter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->letter_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->letter(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.LetterDataPack)
}

::PROTOBUF_NAMESPACE_ID::uint8* LetterDataPack::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.LetterDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::self(this), target);
  }

  // repeated .OuterMsg.LetterData letter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->letter_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->letter(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.LetterDataPack)
  return target;
}

size_t LetterDataPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.LetterDataPack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.LetterData letter = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->letter_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->letter(static_cast<int>(i)));
    }
  }

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LetterDataPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.LetterDataPack)
  GOOGLE_DCHECK_NE(&from, this);
  const LetterDataPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LetterDataPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.LetterDataPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.LetterDataPack)
    MergeFrom(*source);
  }
}

void LetterDataPack::MergeFrom(const LetterDataPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.LetterDataPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  letter_.MergeFrom(from.letter_);
  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
}

void LetterDataPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.LetterDataPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LetterDataPack::CopyFrom(const LetterDataPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.LetterDataPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LetterDataPack::IsInitialized() const {
  return true;
}

void LetterDataPack::InternalSwap(LetterDataPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&letter_)->InternalSwap(CastToBase(&other->letter_));
  swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LetterDataPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqLookLetter::InitAsDefaultInstance() {
  ::OuterMsg::_ReqLookLetter_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ReqLookLetter::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const ReqLookLetter* msg);
};

const ::OuterMsg::GUID&
ReqLookLetter::_Internal::self(const ReqLookLetter* msg) {
  return *msg->self_;
}
void ReqLookLetter::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
ReqLookLetter::ReqLookLetter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqLookLetter)
}
ReqLookLetter::ReqLookLetter(const ReqLookLetter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqLookLetter)
}

void ReqLookLetter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqLookLetter_OuterMsg_2eproto.base);
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&self_)) + sizeof(num_));
}

ReqLookLetter::~ReqLookLetter() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqLookLetter)
  SharedDtor();
}

void ReqLookLetter::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
}

void ReqLookLetter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqLookLetter& ReqLookLetter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqLookLetter_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqLookLetter::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqLookLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  num_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqLookLetter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqLookLetter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqLookLetter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID self = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqLookLetter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqLookLetter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqLookLetter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqLookLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::self(this), output);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqLookLetter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLookLetter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqLookLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::self(this), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqLookLetter)
  return target;
}

size_t ReqLookLetter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqLookLetter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLookLetter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqLookLetter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLookLetter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLookLetter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqLookLetter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqLookLetter)
    MergeFrom(*source);
  }
}

void ReqLookLetter::MergeFrom(const ReqLookLetter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqLookLetter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ReqLookLetter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqLookLetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLookLetter::CopyFrom(const ReqLookLetter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqLookLetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLookLetter::IsInitialized() const {
  return true;
}

void ReqLookLetter::InternalSwap(ReqLookLetter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(self_, other->self_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLookLetter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqDeleteLetter::InitAsDefaultInstance() {
  ::OuterMsg::_ReqDeleteLetter_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ReqDeleteLetter::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const ReqDeleteLetter* msg);
};

const ::OuterMsg::GUID&
ReqDeleteLetter::_Internal::self(const ReqDeleteLetter* msg) {
  return *msg->self_;
}
void ReqDeleteLetter::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
ReqDeleteLetter::ReqDeleteLetter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ReqDeleteLetter)
}
ReqDeleteLetter::ReqDeleteLetter(const ReqDeleteLetter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  letterID_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.letterID().empty()) {
    letterID_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.letterID_);
  }
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ReqDeleteLetter)
}

void ReqDeleteLetter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqDeleteLetter_OuterMsg_2eproto.base);
  letterID_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  self_ = nullptr;
}

ReqDeleteLetter::~ReqDeleteLetter() {
  // @@protoc_insertion_point(destructor:OuterMsg.ReqDeleteLetter)
  SharedDtor();
}

void ReqDeleteLetter::SharedDtor() {
  letterID_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_;
}

void ReqDeleteLetter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqDeleteLetter& ReqDeleteLetter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqDeleteLetter_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ReqDeleteLetter::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ReqDeleteLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  letterID_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqDeleteLetter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes letterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_letterID(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqDeleteLetter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ReqDeleteLetter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID self = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes letterID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_letterID()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ReqDeleteLetter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ReqDeleteLetter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqDeleteLetter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ReqDeleteLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::self(this), output);
  }

  // bytes letterID = 2;
  if (this->letterID().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->letterID(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ReqDeleteLetter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDeleteLetter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ReqDeleteLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::self(this), target);
  }

  // bytes letterID = 2;
  if (this->letterID().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->letterID(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ReqDeleteLetter)
  return target;
}

size_t ReqDeleteLetter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ReqDeleteLetter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes letterID = 2;
  if (this->letterID().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->letterID());
  }

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDeleteLetter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ReqDeleteLetter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteLetter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDeleteLetter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ReqDeleteLetter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ReqDeleteLetter)
    MergeFrom(*source);
  }
}

void ReqDeleteLetter::MergeFrom(const ReqDeleteLetter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ReqDeleteLetter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.letterID().size() > 0) {

    letterID_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.letterID_);
  }
  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
}

void ReqDeleteLetter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ReqDeleteLetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteLetter::CopyFrom(const ReqDeleteLetter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ReqDeleteLetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteLetter::IsInitialized() const {
  return true;
}

void ReqDeleteLetter::InternalSwap(ReqDeleteLetter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  letterID_.Swap(&other->letterID_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDeleteLetter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckQueryLetter::InitAsDefaultInstance() {
  ::OuterMsg::_AckQueryLetter_default_instance_._instance.get_mutable()->self_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class AckQueryLetter::_Internal {
 public:
  static const ::OuterMsg::GUID& self(const AckQueryLetter* msg);
};

const ::OuterMsg::GUID&
AckQueryLetter::_Internal::self(const AckQueryLetter* msg) {
  return *msg->self_;
}
void AckQueryLetter::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
AckQueryLetter::AckQueryLetter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AckQueryLetter)
}
AckQueryLetter::AckQueryLetter(const AckQueryLetter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self()) {
    self_ = new ::OuterMsg::GUID(*from.self_);
  } else {
    self_ = nullptr;
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AckQueryLetter)
}

void AckQueryLetter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckQueryLetter_OuterMsg_2eproto.base);
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&self_)) + sizeof(num_));
}

AckQueryLetter::~AckQueryLetter() {
  // @@protoc_insertion_point(destructor:OuterMsg.AckQueryLetter)
  SharedDtor();
}

void AckQueryLetter::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
}

void AckQueryLetter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckQueryLetter& AckQueryLetter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckQueryLetter_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AckQueryLetter::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AckQueryLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  num_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckQueryLetter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckQueryLetter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AckQueryLetter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID self = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AckQueryLetter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AckQueryLetter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckQueryLetter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AckQueryLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::self(this), output);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AckQueryLetter)
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQueryLetter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AckQueryLetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::self(this), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AckQueryLetter)
  return target;
}

size_t AckQueryLetter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AckQueryLetter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQueryLetter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AckQueryLetter)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQueryLetter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQueryLetter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AckQueryLetter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AckQueryLetter)
    MergeFrom(*source);
  }
}

void AckQueryLetter::MergeFrom(const AckQueryLetter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AckQueryLetter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self()) {
    mutable_self()->::OuterMsg::GUID::MergeFrom(from.self());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void AckQueryLetter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AckQueryLetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQueryLetter::CopyFrom(const AckQueryLetter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AckQueryLetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQueryLetter::IsInitialized() const {
  return true;
}

void AckQueryLetter::InternalSwap(AckQueryLetter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(self_, other->self_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQueryLetter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PubOpData::InitAsDefaultInstance() {
  ::OuterMsg::_PubOpData_default_instance_._instance.get_mutable()->pub_id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class PubOpData::_Internal {
 public:
  static const ::OuterMsg::GUID& pub_id(const PubOpData* msg);
};

const ::OuterMsg::GUID&
PubOpData::_Internal::pub_id(const PubOpData* msg) {
  return *msg->pub_id_;
}
void PubOpData::clear_pub_id() {
  if (GetArenaNoVirtual() == nullptr && pub_id_ != nullptr) {
    delete pub_id_;
  }
  pub_id_ = nullptr;
}
PubOpData::PubOpData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PubOpData)
}
PubOpData::PubOpData(const PubOpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  PubName_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.PubName().empty()) {
    PubName_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.PubName_);
  }
  if (from.has_pub_id()) {
    pub_id_ = new ::OuterMsg::GUID(*from.pub_id_);
  } else {
    pub_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PubOpData)
}

void PubOpData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PubOpData_OuterMsg_2eproto.base);
  PubName_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_id_ = nullptr;
}

PubOpData::~PubOpData() {
  // @@protoc_insertion_point(destructor:OuterMsg.PubOpData)
  SharedDtor();
}

void PubOpData::SharedDtor() {
  PubName_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pub_id_;
}

void PubOpData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PubOpData& PubOpData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PubOpData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void PubOpData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PubOpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  PubName_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pub_id_ != nullptr) {
    delete pub_id_;
  }
  pub_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PubOpData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes PubName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_PubName(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID pub_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_pub_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PubOpData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PubOpData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes PubName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_PubName()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID pub_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pub_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PubOpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PubOpData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PubOpData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PubOpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes PubName = 1;
  if (this->PubName().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->PubName(), output);
  }

  // .OuterMsg.GUID pub_id = 2;
  if (this->has_pub_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::pub_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PubOpData)
}

::PROTOBUF_NAMESPACE_ID::uint8* PubOpData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PubOpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes PubName = 1;
  if (this->PubName().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->PubName(), target);
  }

  // .OuterMsg.GUID pub_id = 2;
  if (this->has_pub_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::pub_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PubOpData)
  return target;
}

size_t PubOpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PubOpData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PubName = 1;
  if (this->PubName().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->PubName());
  }

  // .OuterMsg.GUID pub_id = 2;
  if (this->has_pub_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PubOpData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PubOpData)
  GOOGLE_DCHECK_NE(&from, this);
  const PubOpData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PubOpData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PubOpData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PubOpData)
    MergeFrom(*source);
  }
}

void PubOpData::MergeFrom(const PubOpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PubOpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.PubName().size() > 0) {

    PubName_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.PubName_);
  }
  if (from.has_pub_id()) {
    mutable_pub_id()->::OuterMsg::GUID::MergeFrom(from.pub_id());
  }
}

void PubOpData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PubOpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubOpData::CopyFrom(const PubOpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PubOpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubOpData::IsInitialized() const {
  return true;
}

void PubOpData::InternalSwap(PubOpData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  PubName_.Swap(&other->PubName_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pub_id_, other->pub_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PubOpData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckResult::InitAsDefaultInstance() {
  ::OuterMsg::_AckResult_default_instance_._instance.get_mutable()->obj_id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class AckResult::_Internal {
 public:
  static const ::OuterMsg::GUID& obj_id(const AckResult* msg);
};

const ::OuterMsg::GUID&
AckResult::_Internal::obj_id(const AckResult* msg) {
  return *msg->obj_id_;
}
void AckResult::clear_obj_id() {
  if (GetArenaNoVirtual() == nullptr && obj_id_ != nullptr) {
    delete obj_id_;
  }
  obj_id_ = nullptr;
}
AckResult::AckResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AckResult)
}
AckResult::AckResult(const AckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_obj_id()) {
    obj_id_ = new ::OuterMsg::GUID(*from.obj_id_);
  } else {
    obj_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AckResult)
}

void AckResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckResult_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(event_code_));
}

AckResult::~AckResult() {
  // @@protoc_insertion_point(destructor:OuterMsg.AckResult)
  SharedDtor();
}

void AckResult::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obj_id_;
}

void AckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckResult& AckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckResult_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && obj_id_ != nullptr) {
    delete obj_id_;
  }
  obj_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_event_code(static_cast<::OuterMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID obj_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_obj_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AckResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.EGameEventCode event_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_code(static_cast< ::OuterMsg::EGameEventCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID obj_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obj_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AckResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AckResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event_code(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // .OuterMsg.GUID obj_id = 3;
  if (this->has_obj_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::obj_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AckResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* AckResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_code(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // .OuterMsg.GUID obj_id = 3;
  if (this->has_obj_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::obj_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AckResult)
  return target;
}

size_t AckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AckResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID obj_id = 3;
  if (this->has_obj_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obj_id_);
  }

  // .OuterMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AckResult)
    MergeFrom(*source);
  }
}

void AckResult::MergeFrom(const AckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_obj_id()) {
    mutable_obj_id()->::OuterMsg::GUID::MergeFrom(from.obj_id());
  }
  if (from.event_code() != 0) {
    set_event_code(from.event_code());
  }
}

void AckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckResult::CopyFrom(const AckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckResult::IsInitialized() const {
  return true;
}

void AckResult::InternalSwap(AckResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obj_id_, other->obj_id_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PubNameData::InitAsDefaultInstance() {
  ::OuterMsg::_PubNameData_default_instance_._instance.get_mutable()->object_data_ = const_cast< ::OuterMsg::ObjectDataPack*>(
      ::OuterMsg::ObjectDataPack::internal_default_instance());
}
class PubNameData::_Internal {
 public:
  static const ::OuterMsg::ObjectDataPack& object_data(const PubNameData* msg);
};

const ::OuterMsg::ObjectDataPack&
PubNameData::_Internal::object_data(const PubNameData* msg) {
  return *msg->object_data_;
}
void PubNameData::clear_object_data() {
  if (GetArenaNoVirtual() == nullptr && object_data_ != nullptr) {
    delete object_data_;
  }
  object_data_ = nullptr;
}
PubNameData::PubNameData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PubNameData)
}
PubNameData::PubNameData(const PubNameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.class_name().empty()) {
    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_object_data()) {
    object_data_ = new ::OuterMsg::ObjectDataPack(*from.object_data_);
  } else {
    object_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PubNameData)
}

void PubNameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PubNameData_OuterMsg_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_data_ = nullptr;
}

PubNameData::~PubNameData() {
  // @@protoc_insertion_point(destructor:OuterMsg.PubNameData)
  SharedDtor();
}

void PubNameData::SharedDtor() {
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_data_;
}

void PubNameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PubNameData& PubNameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PubNameData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void PubNameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PubNameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && object_data_ != nullptr) {
    delete object_data_;
  }
  object_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PubNameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_class_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.ObjectDataPack object_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PubNameData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PubNameData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.ObjectDataPack object_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PubNameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PubNameData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PubNameData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PubNameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->class_name(), output);
  }

  // .OuterMsg.ObjectDataPack object_data = 2;
  if (this->has_object_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PubNameData)
}

::PROTOBUF_NAMESPACE_ID::uint8* PubNameData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PubNameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes class_name = 1;
  if (this->class_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->class_name(), target);
  }

  // .OuterMsg.ObjectDataPack object_data = 2;
  if (this->has_object_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PubNameData)
  return target;
}

size_t PubNameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PubNameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes class_name = 1;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->class_name());
  }

  // .OuterMsg.ObjectDataPack object_data = 2;
  if (this->has_object_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PubNameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PubNameData)
  GOOGLE_DCHECK_NE(&from, this);
  const PubNameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PubNameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PubNameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PubNameData)
    MergeFrom(*source);
  }
}

void PubNameData::MergeFrom(const PubNameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PubNameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_object_data()) {
    mutable_object_data()->::OuterMsg::ObjectDataPack::MergeFrom(from.object_data());
  }
}

void PubNameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PubNameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubNameData::CopyFrom(const PubNameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PubNameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubNameData::IsInitialized() const {
  return true;
}

void PubNameData::InternalSwap(PubNameData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_data_, other->object_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PubNameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatRemoveRoom::InitAsDefaultInstance() {
}
class ChatRemoveRoom::_Internal {
 public:
};

ChatRemoveRoom::ChatRemoveRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatRemoveRoom)
}
ChatRemoveRoom::ChatRemoveRoom(const ChatRemoveRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatRemoveRoom)
}

void ChatRemoveRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRemoveRoom_OuterMsg_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatRemoveRoom::~ChatRemoveRoom() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatRemoveRoom)
  SharedDtor();
}

void ChatRemoveRoom::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatRemoveRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRemoveRoom& ChatRemoveRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRemoveRoom_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatRemoveRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatRemoveRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRemoveRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRemoveRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatRemoveRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatRemoveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatRemoveRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRemoveRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatRemoveRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatRemoveRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRemoveRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatRemoveRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatRemoveRoom)
  return target;
}

size_t ChatRemoveRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatRemoveRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRemoveRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatRemoveRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRemoveRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatRemoveRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatRemoveRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatRemoveRoom)
    MergeFrom(*source);
  }
}

void ChatRemoveRoom::MergeFrom(const ChatRemoveRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatRemoveRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void ChatRemoveRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatRemoveRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRemoveRoom::CopyFrom(const ChatRemoveRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatRemoveRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRemoveRoom::IsInitialized() const {
  return true;
}

void ChatRemoveRoom::InternalSwap(ChatRemoveRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRemoveRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatAddPlayerToRoom::InitAsDefaultInstance() {
  ::OuterMsg::_ChatAddPlayerToRoom_default_instance_._instance.get_mutable()->player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatAddPlayerToRoom::_Internal {
 public:
  static const ::OuterMsg::GUID& player(const ChatAddPlayerToRoom* msg);
};

const ::OuterMsg::GUID&
ChatAddPlayerToRoom::_Internal::player(const ChatAddPlayerToRoom* msg) {
  return *msg->player_;
}
void ChatAddPlayerToRoom::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
ChatAddPlayerToRoom::ChatAddPlayerToRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatAddPlayerToRoom)
}
ChatAddPlayerToRoom::ChatAddPlayerToRoom(const ChatAddPlayerToRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_player()) {
    player_ = new ::OuterMsg::GUID(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatAddPlayerToRoom)
}

void ChatAddPlayerToRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatAddPlayerToRoom_OuterMsg_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&player_)) + sizeof(type_));
}

ChatAddPlayerToRoom::~ChatAddPlayerToRoom() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatAddPlayerToRoom)
  SharedDtor();
}

void ChatAddPlayerToRoom::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void ChatAddPlayerToRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatAddPlayerToRoom& ChatAddPlayerToRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatAddPlayerToRoom_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatAddPlayerToRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatAddPlayerToRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatAddPlayerToRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_recording = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chat_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatAddPlayerToRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatAddPlayerToRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 room_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chat_recording = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatAddPlayerToRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatAddPlayerToRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatAddPlayerToRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatAddPlayerToRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // int32 room_id = 3;
  if (this->room_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // int32 chat_recording = 4;
  if (this->chat_recording() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->chat_recording(), output);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatAddPlayerToRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatAddPlayerToRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatAddPlayerToRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // int32 room_id = 3;
  if (this->room_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // int32 chat_recording = 4;
  if (this->chat_recording() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->chat_recording(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatAddPlayerToRoom)
  return target;
}

size_t ChatAddPlayerToRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatAddPlayerToRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // int32 chat_recording = 4;
  if (this->chat_recording() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->chat_recording());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatAddPlayerToRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatAddPlayerToRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatAddPlayerToRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatAddPlayerToRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatAddPlayerToRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatAddPlayerToRoom)
    MergeFrom(*source);
  }
}

void ChatAddPlayerToRoom::MergeFrom(const ChatAddPlayerToRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatAddPlayerToRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_player()) {
    mutable_player()->::OuterMsg::GUID::MergeFrom(from.player());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.chat_recording() != 0) {
    set_chat_recording(from.chat_recording());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ChatAddPlayerToRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatAddPlayerToRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatAddPlayerToRoom::CopyFrom(const ChatAddPlayerToRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatAddPlayerToRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatAddPlayerToRoom::IsInitialized() const {
  return true;
}

void ChatAddPlayerToRoom::InternalSwap(ChatAddPlayerToRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(room_id_, other->room_id_);
  swap(chat_recording_, other->chat_recording_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatAddPlayerToRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatRemovePlayerToRoom::InitAsDefaultInstance() {
  ::OuterMsg::_ChatRemovePlayerToRoom_default_instance_._instance.get_mutable()->player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatRemovePlayerToRoom::_Internal {
 public:
  static const ::OuterMsg::GUID& player(const ChatRemovePlayerToRoom* msg);
};

const ::OuterMsg::GUID&
ChatRemovePlayerToRoom::_Internal::player(const ChatRemovePlayerToRoom* msg) {
  return *msg->player_;
}
void ChatRemovePlayerToRoom::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
ChatRemovePlayerToRoom::ChatRemovePlayerToRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatRemovePlayerToRoom)
}
ChatRemovePlayerToRoom::ChatRemovePlayerToRoom(const ChatRemovePlayerToRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_player()) {
    player_ = new ::OuterMsg::GUID(*from.player_);
  } else {
    player_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatRemovePlayerToRoom)
}

void ChatRemovePlayerToRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRemovePlayerToRoom_OuterMsg_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&player_)) + sizeof(type_));
}

ChatRemovePlayerToRoom::~ChatRemovePlayerToRoom() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatRemovePlayerToRoom)
  SharedDtor();
}

void ChatRemovePlayerToRoom::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void ChatRemovePlayerToRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRemovePlayerToRoom& ChatRemovePlayerToRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRemovePlayerToRoom_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatRemovePlayerToRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatRemovePlayerToRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRemovePlayerToRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRemovePlayerToRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatRemovePlayerToRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatRemovePlayerToRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatRemovePlayerToRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRemovePlayerToRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatRemovePlayerToRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatRemovePlayerToRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRemovePlayerToRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatRemovePlayerToRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatRemovePlayerToRoom)
  return target;
}

size_t ChatRemovePlayerToRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatRemovePlayerToRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRemovePlayerToRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatRemovePlayerToRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRemovePlayerToRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatRemovePlayerToRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatRemovePlayerToRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatRemovePlayerToRoom)
    MergeFrom(*source);
  }
}

void ChatRemovePlayerToRoom::MergeFrom(const ChatRemovePlayerToRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatRemovePlayerToRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_player()) {
    mutable_player()->::OuterMsg::GUID::MergeFrom(from.player());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ChatRemovePlayerToRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatRemovePlayerToRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRemovePlayerToRoom::CopyFrom(const ChatRemovePlayerToRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatRemovePlayerToRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRemovePlayerToRoom::IsInitialized() const {
  return true;
}

void ChatRemovePlayerToRoom::InternalSwap(ChatRemovePlayerToRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRemovePlayerToRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatPlayerInfo::InitAsDefaultInstance() {
  ::OuterMsg::_ChatPlayerInfo_default_instance_._instance.get_mutable()->player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatPlayerInfo::_Internal {
 public:
  static const ::OuterMsg::GUID& player(const ChatPlayerInfo* msg);
};

const ::OuterMsg::GUID&
ChatPlayerInfo::_Internal::player(const ChatPlayerInfo* msg) {
  return *msg->player_;
}
void ChatPlayerInfo::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
ChatPlayerInfo::ChatPlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatPlayerInfo)
}
ChatPlayerInfo::ChatPlayerInfo(const ChatPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.custom_info().empty()) {
    custom_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_info_);
  }
  if (from.has_player()) {
    player_ = new ::OuterMsg::GUID(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatPlayerInfo)
}

void ChatPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatPlayerInfo_OuterMsg_2eproto.base);
  custom_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = nullptr;
}

ChatPlayerInfo::~ChatPlayerInfo() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatPlayerInfo)
  SharedDtor();
}

void ChatPlayerInfo::SharedDtor() {
  custom_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void ChatPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatPlayerInfo& ChatPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatPlayerInfo_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes custom_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatPlayerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatPlayerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes custom_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatPlayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatPlayerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player(this), output);
  }

  // bytes custom_info = 2;
  if (this->custom_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->custom_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatPlayerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatPlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player(this), target);
  }

  // bytes custom_info = 2;
  if (this->custom_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->custom_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatPlayerInfo)
  return target;
}

size_t ChatPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes custom_info = 2;
  if (this->custom_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->custom_info());
  }

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatPlayerInfo)
    MergeFrom(*source);
  }
}

void ChatPlayerInfo::MergeFrom(const ChatPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.custom_info().size() > 0) {

    custom_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_info_);
  }
  if (from.has_player()) {
    mutable_player()->::OuterMsg::GUID::MergeFrom(from.player());
  }
}

void ChatPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPlayerInfo::CopyFrom(const ChatPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPlayerInfo::IsInitialized() const {
  return true;
}

void ChatPlayerInfo::InternalSwap(ChatPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_info_.Swap(&other->custom_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatPlayerBanned::InitAsDefaultInstance() {
  ::OuterMsg::_ChatPlayerBanned_default_instance_._instance.get_mutable()->player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatPlayerBanned::_Internal {
 public:
  static const ::OuterMsg::GUID& player(const ChatPlayerBanned* msg);
};

const ::OuterMsg::GUID&
ChatPlayerBanned::_Internal::player(const ChatPlayerBanned* msg) {
  return *msg->player_;
}
void ChatPlayerBanned::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
ChatPlayerBanned::ChatPlayerBanned()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatPlayerBanned)
}
ChatPlayerBanned::ChatPlayerBanned(const ChatPlayerBanned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::OuterMsg::GUID(*from.player_);
  } else {
    player_ = nullptr;
  }
  banned_ = from.banned_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatPlayerBanned)
}

void ChatPlayerBanned::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatPlayerBanned_OuterMsg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banned_) -
      reinterpret_cast<char*>(&player_)) + sizeof(banned_));
}

ChatPlayerBanned::~ChatPlayerBanned() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatPlayerBanned)
  SharedDtor();
}

void ChatPlayerBanned::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void ChatPlayerBanned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatPlayerBanned& ChatPlayerBanned::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatPlayerBanned_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatPlayerBanned::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatPlayerBanned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  banned_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatPlayerBanned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatPlayerBanned::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatPlayerBanned)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 banned = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatPlayerBanned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatPlayerBanned)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatPlayerBanned::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatPlayerBanned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player(this), output);
  }

  // int32 banned = 2;
  if (this->banned() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->banned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatPlayerBanned)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatPlayerBanned::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatPlayerBanned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player(this), target);
  }

  // int32 banned = 2;
  if (this->banned() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->banned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatPlayerBanned)
  return target;
}

size_t ChatPlayerBanned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatPlayerBanned)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 banned = 2;
  if (this->banned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->banned());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatPlayerBanned::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatPlayerBanned)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatPlayerBanned* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatPlayerBanned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatPlayerBanned)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatPlayerBanned)
    MergeFrom(*source);
  }
}

void ChatPlayerBanned::MergeFrom(const ChatPlayerBanned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatPlayerBanned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::OuterMsg::GUID::MergeFrom(from.player());
  }
  if (from.banned() != 0) {
    set_banned(from.banned());
  }
}

void ChatPlayerBanned::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatPlayerBanned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPlayerBanned::CopyFrom(const ChatPlayerBanned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatPlayerBanned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPlayerBanned::IsInitialized() const {
  return true;
}

void ChatPlayerBanned::InternalSwap(ChatPlayerBanned* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(banned_, other->banned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatPlayerBanned::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatClientData::InitAsDefaultInstance() {
  ::OuterMsg::_ChatClientData_default_instance_._instance.get_mutable()->player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatClientData::_Internal {
 public:
  static const ::OuterMsg::GUID& player(const ChatClientData* msg);
};

const ::OuterMsg::GUID&
ChatClientData::_Internal::player(const ChatClientData* msg) {
  return *msg->player_;
}
void ChatClientData::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
ChatClientData::ChatClientData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatClientData)
}
ChatClientData::ChatClientData(const ChatClientData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::OuterMsg::GUID(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatClientData)
}

void ChatClientData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatClientData_OuterMsg_2eproto.base);
  player_ = nullptr;
}

ChatClientData::~ChatClientData() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatClientData)
  SharedDtor();
}

void ChatClientData::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void ChatClientData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatClientData& ChatClientData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatClientData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatClientData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatClientData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatClientData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatClientData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatClientData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatClientData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatClientData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatClientData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatClientData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatClientData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatClientData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatClientData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatClientData)
  return target;
}

size_t ChatClientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatClientData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatClientData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatClientData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatClientData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatClientData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatClientData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatClientData)
    MergeFrom(*source);
  }
}

void ChatClientData::MergeFrom(const ChatClientData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatClientData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::OuterMsg::GUID::MergeFrom(from.player());
  }
}

void ChatClientData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatClientData::CopyFrom(const ChatClientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatClientData::IsInitialized() const {
  return true;
}

void ChatClientData::InternalSwap(ChatClientData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatClientData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMsgRoom::InitAsDefaultInstance() {
  ::OuterMsg::_ChatMsgRoom_default_instance_._instance.get_mutable()->sender_player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatMsgRoom::_Internal {
 public:
  static const ::OuterMsg::GUID& sender_player(const ChatMsgRoom* msg);
};

const ::OuterMsg::GUID&
ChatMsgRoom::_Internal::sender_player(const ChatMsgRoom* msg) {
  return *msg->sender_player_;
}
void ChatMsgRoom::clear_sender_player() {
  if (GetArenaNoVirtual() == nullptr && sender_player_ != nullptr) {
    delete sender_player_;
  }
  sender_player_ = nullptr;
}
ChatMsgRoom::ChatMsgRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatMsgRoom)
}
ChatMsgRoom::ChatMsgRoom(const ChatMsgRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  sender_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_info().empty()) {
    sender_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_info_);
  }
  if (from.has_sender_player()) {
    sender_player_ = new ::OuterMsg::GUID(*from.sender_player_);
  } else {
    sender_player_ = nullptr;
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatMsgRoom)
}

void ChatMsgRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMsgRoom_OuterMsg_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&sender_player_)) + sizeof(room_id_));
}

ChatMsgRoom::~ChatMsgRoom() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatMsgRoom)
  SharedDtor();
}

void ChatMsgRoom::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_player_;
}

void ChatMsgRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMsgRoom& ChatMsgRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMsgRoom_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatMsgRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatMsgRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_player_ != nullptr) {
    delete sender_player_;
  }
  sender_player_ = nullptr;
  room_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatMsgRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sender_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID sender_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sender_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatMsgRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatMsgRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID sender_player = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sender_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatMsgRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatMsgRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatMsgRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatMsgRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  // bytes sender_info = 3;
  if (this->sender_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sender_info(), output);
  }

  // .OuterMsg.GUID sender_player = 4;
  if (this->has_sender_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::sender_player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatMsgRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMsgRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatMsgRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  // bytes sender_info = 3;
  if (this->sender_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->sender_info(), target);
  }

  // .OuterMsg.GUID sender_player = 4;
  if (this->has_sender_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::sender_player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatMsgRoom)
  return target;
}

size_t ChatMsgRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatMsgRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // bytes sender_info = 3;
  if (this->sender_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sender_info());
  }

  // .OuterMsg.GUID sender_player = 4;
  if (this->has_sender_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_player_);
  }

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMsgRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatMsgRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMsgRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMsgRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatMsgRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatMsgRoom)
    MergeFrom(*source);
  }
}

void ChatMsgRoom::MergeFrom(const ChatMsgRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatMsgRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.sender_info().size() > 0) {

    sender_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_info_);
  }
  if (from.has_sender_player()) {
    mutable_sender_player()->::OuterMsg::GUID::MergeFrom(from.sender_player());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void ChatMsgRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatMsgRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgRoom::CopyFrom(const ChatMsgRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatMsgRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgRoom::IsInitialized() const {
  return true;
}

void ChatMsgRoom::InternalSwap(ChatMsgRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_info_.Swap(&other->sender_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_player_, other->sender_player_);
  swap(room_id_, other->room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMsgRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMsgPlayer::InitAsDefaultInstance() {
  ::OuterMsg::_ChatMsgPlayer_default_instance_._instance.get_mutable()->target_player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ChatMsgPlayer_default_instance_._instance.get_mutable()->sender_player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ChatMsgPlayer::_Internal {
 public:
  static const ::OuterMsg::GUID& target_player(const ChatMsgPlayer* msg);
  static const ::OuterMsg::GUID& sender_player(const ChatMsgPlayer* msg);
};

const ::OuterMsg::GUID&
ChatMsgPlayer::_Internal::target_player(const ChatMsgPlayer* msg) {
  return *msg->target_player_;
}
const ::OuterMsg::GUID&
ChatMsgPlayer::_Internal::sender_player(const ChatMsgPlayer* msg) {
  return *msg->sender_player_;
}
void ChatMsgPlayer::clear_target_player() {
  if (GetArenaNoVirtual() == nullptr && target_player_ != nullptr) {
    delete target_player_;
  }
  target_player_ = nullptr;
}
void ChatMsgPlayer::clear_sender_player() {
  if (GetArenaNoVirtual() == nullptr && sender_player_ != nullptr) {
    delete sender_player_;
  }
  sender_player_ = nullptr;
}
ChatMsgPlayer::ChatMsgPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatMsgPlayer)
}
ChatMsgPlayer::ChatMsgPlayer(const ChatMsgPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  sender_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_info().empty()) {
    sender_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_info_);
  }
  if (from.has_target_player()) {
    target_player_ = new ::OuterMsg::GUID(*from.target_player_);
  } else {
    target_player_ = nullptr;
  }
  if (from.has_sender_player()) {
    sender_player_ = new ::OuterMsg::GUID(*from.sender_player_);
  } else {
    sender_player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatMsgPlayer)
}

void ChatMsgPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMsgPlayer_OuterMsg_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_player_) -
      reinterpret_cast<char*>(&target_player_)) + sizeof(sender_player_));
}

ChatMsgPlayer::~ChatMsgPlayer() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatMsgPlayer)
  SharedDtor();
}

void ChatMsgPlayer::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_player_;
  if (this != internal_default_instance()) delete sender_player_;
}

void ChatMsgPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMsgPlayer& ChatMsgPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMsgPlayer_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatMsgPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatMsgPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && target_player_ != nullptr) {
    delete target_player_;
  }
  target_player_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sender_player_ != nullptr) {
    delete sender_player_;
  }
  sender_player_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatMsgPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID target_player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sender_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID sender_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sender_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatMsgPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatMsgPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID target_player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID sender_player = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sender_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatMsgPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatMsgPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatMsgPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatMsgPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID target_player = 1;
  if (this->has_target_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::target_player(this), output);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  // bytes sender_info = 3;
  if (this->sender_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sender_info(), output);
  }

  // .OuterMsg.GUID sender_player = 4;
  if (this->has_sender_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::sender_player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatMsgPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMsgPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatMsgPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID target_player = 1;
  if (this->has_target_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::target_player(this), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  // bytes sender_info = 3;
  if (this->sender_info().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->sender_info(), target);
  }

  // .OuterMsg.GUID sender_player = 4;
  if (this->has_sender_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::sender_player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatMsgPlayer)
  return target;
}

size_t ChatMsgPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatMsgPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // bytes sender_info = 3;
  if (this->sender_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sender_info());
  }

  // .OuterMsg.GUID target_player = 1;
  if (this->has_target_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_player_);
  }

  // .OuterMsg.GUID sender_player = 4;
  if (this->has_sender_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_player_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMsgPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatMsgPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMsgPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMsgPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatMsgPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatMsgPlayer)
    MergeFrom(*source);
  }
}

void ChatMsgPlayer::MergeFrom(const ChatMsgPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatMsgPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.sender_info().size() > 0) {

    sender_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_info_);
  }
  if (from.has_target_player()) {
    mutable_target_player()->::OuterMsg::GUID::MergeFrom(from.target_player());
  }
  if (from.has_sender_player()) {
    mutable_sender_player()->::OuterMsg::GUID::MergeFrom(from.sender_player());
  }
}

void ChatMsgPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatMsgPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgPlayer::CopyFrom(const ChatMsgPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatMsgPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgPlayer::IsInitialized() const {
  return true;
}

void ChatMsgPlayer::InternalSwap(ChatMsgPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_info_.Swap(&other->sender_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_player_, other->target_player_);
  swap(sender_player_, other->sender_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMsgPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatRecording::InitAsDefaultInstance() {
}
class ChatRecording::_Internal {
 public:
};

ChatRecording::ChatRecording()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ChatRecording)
}
ChatRecording::ChatRecording(const ChatRecording& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ChatRecording)
}

void ChatRecording::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRecording_OuterMsg_2eproto.base);
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(count_));
}

ChatRecording::~ChatRecording() {
  // @@protoc_insertion_point(destructor:OuterMsg.ChatRecording)
  SharedDtor();
}

void ChatRecording::SharedDtor() {
}

void ChatRecording::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRecording& ChatRecording::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRecording_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ChatRecording::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ChatRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRecording::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_msg_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRecording::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ChatRecording)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes msg_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ChatRecording)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ChatRecording)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRecording::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ChatRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // repeated bytes msg_list = 4;
  for (int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->msg_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ChatRecording)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRecording::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ChatRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // repeated bytes msg_list = 4;
  for (int i = 0, n = this->msg_list_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->msg_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ChatRecording)
  return target;
}

size_t ChatRecording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ChatRecording)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msg_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->msg_list_size());
  for (int i = 0, n = this->msg_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->msg_list(i));
  }

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRecording::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ChatRecording)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRecording* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatRecording>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ChatRecording)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ChatRecording)
    MergeFrom(*source);
  }
}

void ChatRecording::MergeFrom(const ChatRecording& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ChatRecording)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ChatRecording::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ChatRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRecording::CopyFrom(const ChatRecording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ChatRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRecording::IsInitialized() const {
  return true;
}

void ChatRecording::InternalSwap(ChatRecording* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_list_.InternalSwap(CastToBase(&other->msg_list_));
  swap(room_id_, other->room_id_);
  swap(start_, other->start_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRecording::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerRename::InitAsDefaultInstance() {
  ::OuterMsg::_PlayerRename_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class PlayerRename::_Internal {
 public:
  static const ::OuterMsg::GUID& player_id(const PlayerRename* msg);
};

const ::OuterMsg::GUID&
PlayerRename::_Internal::player_id(const PlayerRename* msg) {
  return *msg->player_id_;
}
void PlayerRename::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
PlayerRename::PlayerRename()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PlayerRename)
}
PlayerRename::PlayerRename(const PlayerRename& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  player_name_new_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.player_name_new().empty()) {
    player_name_new_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_new_);
  }
  player_name_old_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.player_name_old().empty()) {
    player_name_old_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_old_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::OuterMsg::GUID(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PlayerRename)
}

void PlayerRename::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerRename_OuterMsg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_new_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_old_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

PlayerRename::~PlayerRename() {
  // @@protoc_insertion_point(destructor:OuterMsg.PlayerRename)
  SharedDtor();
}

void PlayerRename::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_new_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_old_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void PlayerRename::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerRename& PlayerRename::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerRename_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerRename::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PlayerRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_new_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_old_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerRename::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes player_name_new = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_player_name_new(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes player_name_old = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_player_name_old(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerRename::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PlayerRename)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID player_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes player_name_new = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_name_new()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes player_name_old = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_name_old()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PlayerRename)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PlayerRename)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerRename::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PlayerRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // .OuterMsg.GUID player_id = 2;
  if (this->has_player_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player_id(this), output);
  }

  // bytes player_name_new = 3;
  if (this->player_name_new().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->player_name_new(), output);
  }

  // bytes player_name_old = 4;
  if (this->player_name_old().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->player_name_old(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PlayerRename)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerRename::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PlayerRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // .OuterMsg.GUID player_id = 2;
  if (this->has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player_id(this), target);
  }

  // bytes player_name_new = 3;
  if (this->player_name_new().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->player_name_new(), target);
  }

  // bytes player_name_old = 4;
  if (this->player_name_old().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->player_name_old(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PlayerRename)
  return target;
}

size_t PlayerRename::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PlayerRename)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes player_name_new = 3;
  if (this->player_name_new().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->player_name_new());
  }

  // bytes player_name_old = 4;
  if (this->player_name_old().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->player_name_old());
  }

  // .OuterMsg.GUID player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRename::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PlayerRename)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRename* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerRename>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PlayerRename)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PlayerRename)
    MergeFrom(*source);
  }
}

void PlayerRename::MergeFrom(const PlayerRename& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PlayerRename)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.player_name_new().size() > 0) {

    player_name_new_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_new_);
  }
  if (from.player_name_old().size() > 0) {

    player_name_old_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_old_);
  }
  if (from.has_player_id()) {
    mutable_player_id()->::OuterMsg::GUID::MergeFrom(from.player_id());
  }
}

void PlayerRename::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PlayerRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRename::CopyFrom(const PlayerRename& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PlayerRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRename::IsInitialized() const {
  return true;
}

void PlayerRename::InternalSwap(PlayerRename* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_name_new_.Swap(&other->player_name_new_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_name_old_.Swap(&other->player_name_old_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRename::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtraMsg::InitAsDefaultInstance() {
  ::OuterMsg::_ExtraMsg_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ExtraMsg::_Internal {
 public:
  static const ::OuterMsg::GUID& object_id(const ExtraMsg* msg);
};

const ::OuterMsg::GUID&
ExtraMsg::_Internal::object_id(const ExtraMsg* msg) {
  return *msg->object_id_;
}
void ExtraMsg::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
ExtraMsg::ExtraMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ExtraMsg)
}
ExtraMsg::ExtraMsg(const ExtraMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_object_id()) {
    object_id_ = new ::OuterMsg::GUID(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  ::memcpy(&server_type_, &from.server_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&server_type_)) + sizeof(socket_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ExtraMsg)
}

void ExtraMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtraMsg_OuterMsg_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(socket_));
}

ExtraMsg::~ExtraMsg() {
  // @@protoc_insertion_point(destructor:OuterMsg.ExtraMsg)
  SharedDtor();
}

void ExtraMsg::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_id_;
}

void ExtraMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtraMsg& ExtraMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtraMsg_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ExtraMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ExtraMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  ::memset(&server_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&server_type_)) + sizeof(socket_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtraMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID object_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 socket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtraMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ExtraMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID object_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 socket = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ExtraMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ExtraMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtraMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ExtraMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_type = 1;
  if (this->server_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_type(), output);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->msg_id(), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // .OuterMsg.GUID object_id = 4;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::object_id(this), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // int64 socket = 6;
  if (this->socket() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->socket(), output);
  }

  // int32 msg_type = 7;
  if (this->msg_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->msg_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ExtraMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtraMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ExtraMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_type = 1;
  if (this->server_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_type(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_id(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // .OuterMsg.GUID object_id = 4;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::object_id(this), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // int64 socket = 6;
  if (this->socket() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->socket(), target);
  }

  // int32 msg_type = 7;
  if (this->msg_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->msg_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ExtraMsg)
  return target;
}

size_t ExtraMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ExtraMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .OuterMsg.GUID object_id = 4;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // int32 server_type = 1;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->msg_id());
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  // int32 msg_type = 7;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // int64 socket = 6;
  if (this->socket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->socket());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtraMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtraMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtraMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ExtraMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ExtraMsg)
    MergeFrom(*source);
  }
}

void ExtraMsg::MergeFrom(const ExtraMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_object_id()) {
    mutable_object_id()->::OuterMsg::GUID::MergeFrom(from.object_id());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void ExtraMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraMsg::CopyFrom(const ExtraMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraMsg::IsInitialized() const {
  return true;
}

void ExtraMsg::InternalSwap(ExtraMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_id_, other->object_id_);
  swap(server_type_, other->server_type_);
  swap(msg_id_, other->msg_id_);
  swap(game_id_, other->game_id_);
  swap(msg_type_, other->msg_type_);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtraMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttachData::InitAsDefaultInstance() {
}
class AttachData::_Internal {
 public:
};

AttachData::AttachData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.AttachData)
}
AttachData::AttachData(const AttachData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.AttachData)
}

void AttachData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttachData_OuterMsg_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

AttachData::~AttachData() {
  // @@protoc_insertion_point(destructor:OuterMsg.AttachData)
  SharedDtor();
}

void AttachData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AttachData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttachData& AttachData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttachData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void AttachData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.AttachData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AttachData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AttachData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.AttachData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.AttachData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.AttachData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AttachData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.AttachData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.AttachData)
}

::PROTOBUF_NAMESPACE_ID::uint8* AttachData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.AttachData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.AttachData)
  return target;
}

size_t AttachData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.AttachData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttachData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.AttachData)
  GOOGLE_DCHECK_NE(&from, this);
  const AttachData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttachData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.AttachData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.AttachData)
    MergeFrom(*source);
  }
}

void AttachData::MergeFrom(const AttachData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.AttachData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AttachData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.AttachData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachData::CopyFrom(const AttachData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.AttachData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachData::IsInitialized() const {
  return true;
}

void AttachData::InternalSwap(AttachData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListCreate::InitAsDefaultInstance() {
  ::OuterMsg::_RankListCreate_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListCreate::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListCreate* msg);
};

const ::OuterMsg::AttachData&
RankListCreate::_Internal::attach_data(const RankListCreate* msg) {
  return *msg->attach_data_;
}
void RankListCreate::clear_order() {
  order_.Clear();
}
RankListCreate::RankListCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListCreate)
}
RankListCreate::RankListCreate(const RankListCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      order_(from.order_),
      data_name_(from.data_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListCreate)
}

void RankListCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListCreate_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(limit_));
}

RankListCreate::~RankListCreate() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListCreate)
  SharedDtor();
}

void RankListCreate::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListCreate& RankListCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListCreate_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_.Clear();
  data_name_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.PropertyInt order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated bytes data_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_data_name(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.PropertyInt order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_data_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // repeated .OuterMsg.PropertyInt order = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->order(static_cast<int>(i)),
      output);
  }

  // repeated bytes data_name = 4;
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->data_name(i), output);
  }

  // .OuterMsg.AttachData attach_data = 5;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // repeated .OuterMsg.PropertyInt order = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->order(static_cast<int>(i)), target);
  }

  // repeated bytes data_name = 4;
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->data_name(i), target);
  }

  // .OuterMsg.AttachData attach_data = 5;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListCreate)
  return target;
}

size_t RankListCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyInt order = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->order_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->order(static_cast<int>(i)));
    }
  }

  // repeated bytes data_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_name_size());
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->data_name(i));
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 5;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListCreate)
    MergeFrom(*source);
  }
}

void RankListCreate::MergeFrom(const RankListCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_.MergeFrom(from.order_);
  data_name_.MergeFrom(from.data_name_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void RankListCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListCreate::CopyFrom(const RankListCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListCreate::IsInitialized() const {
  return true;
}

void RankListCreate::InternalSwap(RankListCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&order_)->InternalSwap(CastToBase(&other->order_));
  data_name_.InternalSwap(CastToBase(&other->data_name_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListCreateAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListCreateAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListCreateAck::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListCreateAck* msg);
};

const ::OuterMsg::AttachData&
RankListCreateAck::_Internal::attach_data(const RankListCreateAck* msg) {
  return *msg->attach_data_;
}
RankListCreateAck::RankListCreateAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListCreateAck)
}
RankListCreateAck::RankListCreateAck(const RankListCreateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListCreateAck)
}

void RankListCreateAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListCreateAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(ret_code_));
}

RankListCreateAck::~RankListCreateAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListCreateAck)
  SharedDtor();
}

void RankListCreateAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListCreateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListCreateAck& RankListCreateAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListCreateAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListCreateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListCreateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListCreateAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListCreateAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListCreateAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListCreateAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListCreateAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListCreateAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListCreateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListCreateAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListCreateAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListCreateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListCreateAck)
  return target;
}

size_t RankListCreateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListCreateAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListCreateAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListCreateAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListCreateAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListCreateAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListCreateAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListCreateAck)
    MergeFrom(*source);
  }
}

void RankListCreateAck::MergeFrom(const RankListCreateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListCreateAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListCreateAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListCreateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListCreateAck::CopyFrom(const RankListCreateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListCreateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListCreateAck::IsInitialized() const {
  return true;
}

void RankListCreateAck::InternalSwap(RankListCreateAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListCreateAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListDelete::InitAsDefaultInstance() {
  ::OuterMsg::_RankListDelete_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListDelete::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListDelete* msg);
};

const ::OuterMsg::AttachData&
RankListDelete::_Internal::attach_data(const RankListDelete* msg) {
  return *msg->attach_data_;
}
RankListDelete::RankListDelete()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListDelete)
}
RankListDelete::RankListDelete(const RankListDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListDelete)
}

void RankListDelete::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListDelete_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_ = nullptr;
}

RankListDelete::~RankListDelete() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListDelete)
  SharedDtor();
}

void RankListDelete::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListDelete& RankListDelete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListDelete_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListDelete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListDelete::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListDelete)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListDelete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListDelete::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.AttachData attach_data = 2;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListDelete)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListDelete::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.AttachData attach_data = 2;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListDelete)
  return target;
}

size_t RankListDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListDelete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 2;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListDelete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListDelete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListDelete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListDelete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListDelete)
    MergeFrom(*source);
  }
}

void RankListDelete::MergeFrom(const RankListDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
}

void RankListDelete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListDelete::CopyFrom(const RankListDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListDelete::IsInitialized() const {
  return true;
}

void RankListDelete::InternalSwap(RankListDelete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListDelete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListDeleteAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListDeleteAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListDeleteAck::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListDeleteAck* msg);
};

const ::OuterMsg::AttachData&
RankListDeleteAck::_Internal::attach_data(const RankListDeleteAck* msg) {
  return *msg->attach_data_;
}
RankListDeleteAck::RankListDeleteAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListDeleteAck)
}
RankListDeleteAck::RankListDeleteAck(const RankListDeleteAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListDeleteAck)
}

void RankListDeleteAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListDeleteAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(ret_code_));
}

RankListDeleteAck::~RankListDeleteAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListDeleteAck)
  SharedDtor();
}

void RankListDeleteAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListDeleteAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListDeleteAck& RankListDeleteAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListDeleteAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListDeleteAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListDeleteAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListDeleteAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListDeleteAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListDeleteAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListDeleteAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListDeleteAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListDeleteAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListDeleteAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListDeleteAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListDeleteAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListDeleteAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListDeleteAck)
  return target;
}

size_t RankListDeleteAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListDeleteAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListDeleteAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListDeleteAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListDeleteAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListDeleteAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListDeleteAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListDeleteAck)
    MergeFrom(*source);
  }
}

void RankListDeleteAck::MergeFrom(const RankListDeleteAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListDeleteAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListDeleteAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListDeleteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListDeleteAck::CopyFrom(const RankListDeleteAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListDeleteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListDeleteAck::IsInitialized() const {
  return true;
}

void RankListDeleteAck::InternalSwap(RankListDeleteAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListDeleteAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListScore::InitAsDefaultInstance() {
  ::OuterMsg::_RankListScore_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListScore_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListScore::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListScore* msg);
  static const ::OuterMsg::AttachData& attach_data(const RankListScore* msg);
};

const ::OuterMsg::GUID&
RankListScore::_Internal::id(const RankListScore* msg) {
  return *msg->id_;
}
const ::OuterMsg::AttachData&
RankListScore::_Internal::attach_data(const RankListScore* msg) {
  return *msg->attach_data_;
}
void RankListScore::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void RankListScore::clear_arr_data() {
  arr_data_.Clear();
}
RankListScore::RankListScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListScore)
}
RankListScore::RankListScore(const RankListScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      arr_data_(from.arr_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  insert_time_ = from.insert_time_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListScore)
}

void RankListScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListScore_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insert_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(insert_time_));
}

RankListScore::~RankListScore() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListScore)
  SharedDtor();
}

void RankListScore::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListScore& RankListScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListScore_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListScore::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_data_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  insert_time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.PropertyInt arr_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_arr_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 insert_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          insert_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListScore::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListScore)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.PropertyInt arr_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_arr_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 insert_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &insert_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListScore::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::id(this), output);
  }

  // repeated .OuterMsg.PropertyInt arr_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arr_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->arr_data(static_cast<int>(i)),
      output);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::attach_data(this), output);
  }

  // int64 insert_time = 5;
  if (this->insert_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->insert_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListScore)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListScore::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::id(this), target);
  }

  // repeated .OuterMsg.PropertyInt arr_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arr_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->arr_data(static_cast<int>(i)), target);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::attach_data(this), target);
  }

  // int64 insert_time = 5;
  if (this->insert_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->insert_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListScore)
  return target;
}

size_t RankListScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyInt arr_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->arr_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->arr_data(static_cast<int>(i)));
    }
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // int64 insert_time = 5;
  if (this->insert_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->insert_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListScore)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListScore)
    MergeFrom(*source);
  }
}

void RankListScore::MergeFrom(const RankListScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_data_.MergeFrom(from.arr_data_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.insert_time() != 0) {
    set_insert_time(from.insert_time());
  }
}

void RankListScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListScore::CopyFrom(const RankListScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListScore::IsInitialized() const {
  return true;
}

void RankListScore::InternalSwap(RankListScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&arr_data_)->InternalSwap(CastToBase(&other->arr_data_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(attach_data_, other->attach_data_);
  swap(insert_time_, other->insert_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListScoreAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListScoreAck_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListScoreAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListScoreAck::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListScoreAck* msg);
  static const ::OuterMsg::AttachData& attach_data(const RankListScoreAck* msg);
};

const ::OuterMsg::GUID&
RankListScoreAck::_Internal::id(const RankListScoreAck* msg) {
  return *msg->id_;
}
const ::OuterMsg::AttachData&
RankListScoreAck::_Internal::attach_data(const RankListScoreAck* msg) {
  return *msg->attach_data_;
}
void RankListScoreAck::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListScoreAck::RankListScoreAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListScoreAck)
}
RankListScoreAck::RankListScoreAck(const RankListScoreAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListScoreAck)
}

void RankListScoreAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListScoreAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ret_code_));
}

RankListScoreAck::~RankListScoreAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListScoreAck)
  SharedDtor();
}

void RankListScoreAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListScoreAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListScoreAck& RankListScoreAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListScoreAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListScoreAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListScoreAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListScoreAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListScoreAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListScoreAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListScoreAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListScoreAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListScoreAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListScoreAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::id(this), output);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListScoreAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListScoreAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListScoreAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::id(this), target);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListScoreAck)
  return target;
}

size_t RankListScoreAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListScoreAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListScoreAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListScoreAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListScoreAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListScoreAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListScoreAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListScoreAck)
    MergeFrom(*source);
  }
}

void RankListScoreAck::MergeFrom(const RankListScoreAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListScoreAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListScoreAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListScoreAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListScoreAck::CopyFrom(const RankListScoreAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListScoreAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListScoreAck::IsInitialized() const {
  return true;
}

void RankListScoreAck::InternalSwap(RankListScoreAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(attach_data_, other->attach_data_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListScoreAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RankListData_MapDataEntry_DoNotUse::RankListData_MapDataEntry_DoNotUse() {}
RankListData_MapDataEntry_DoNotUse::RankListData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RankListData_MapDataEntry_DoNotUse::MergeFrom(const RankListData_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RankListData_MapDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RankListData_MapDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RankListData::InitAsDefaultInstance() {
  ::OuterMsg::_RankListData_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListData_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListData::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListData* msg);
  static const ::OuterMsg::AttachData& attach_data(const RankListData* msg);
};

const ::OuterMsg::GUID&
RankListData::_Internal::id(const RankListData* msg) {
  return *msg->id_;
}
const ::OuterMsg::AttachData&
RankListData::_Internal::attach_data(const RankListData* msg) {
  return *msg->attach_data_;
}
void RankListData::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListData::RankListData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListData)
}
RankListData::RankListData(const RankListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListData)
}

void RankListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListData_OuterMsg_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attach_data_) -
      reinterpret_cast<char*>(&id_)) + sizeof(attach_data_));
}

RankListData::~RankListData() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListData)
  SharedDtor();
}

void RankListData::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListData& RankListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> map_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> map_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          RankListData_MapDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RankListData_MapDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&map_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "OuterMsg.RankListData.MapDataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // map<string, bytes> map_data = 2;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListData.MapDataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RankListData_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        RankListData_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListData)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // map<string, bytes> map_data = 2;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListData.MapDataEntry.key");
      }
    };

    if (false &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RankListData_MapDataEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        target = RankListData_MapDataEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListData)
  return target;
}

size_t RankListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> map_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->map_data().begin();
      it != this->map_data().end(); ++it) {
    total_size += RankListData_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListData)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListData)
    MergeFrom(*source);
  }
}

void RankListData::MergeFrom(const RankListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
}

void RankListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListData::CopyFrom(const RankListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListData::IsInitialized() const {
  return true;
}

void RankListData::InternalSwap(RankListData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_data_.Swap(&other->map_data_);
  swap(id_, other->id_);
  swap(attach_data_, other->attach_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RankListDataAck_MapDataEntry_DoNotUse::RankListDataAck_MapDataEntry_DoNotUse() {}
RankListDataAck_MapDataEntry_DoNotUse::RankListDataAck_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RankListDataAck_MapDataEntry_DoNotUse::MergeFrom(const RankListDataAck_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RankListDataAck_MapDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RankListDataAck_MapDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RankListDataAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListDataAck_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListDataAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListDataAck::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListDataAck* msg);
  static const ::OuterMsg::AttachData& attach_data(const RankListDataAck* msg);
};

const ::OuterMsg::GUID&
RankListDataAck::_Internal::id(const RankListDataAck* msg) {
  return *msg->id_;
}
const ::OuterMsg::AttachData&
RankListDataAck::_Internal::attach_data(const RankListDataAck* msg) {
  return *msg->attach_data_;
}
void RankListDataAck::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListDataAck::RankListDataAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListDataAck)
}
RankListDataAck::RankListDataAck(const RankListDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListDataAck)
}

void RankListDataAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListDataAck_OuterMsg_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ret_code_));
}

RankListDataAck::~RankListDataAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListDataAck)
  SharedDtor();
}

void RankListDataAck::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListDataAck& RankListDataAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListDataAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> map_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListDataAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListDataAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> map_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          RankListDataAck_MapDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RankListDataAck_MapDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&map_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "OuterMsg.RankListDataAck.MapDataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListDataAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListDataAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListDataAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // map<string, bytes> map_data = 2;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListDataAck.MapDataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RankListDataAck_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        RankListDataAck_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListDataAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListDataAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // map<string, bytes> map_data = 2;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListDataAck.MapDataEntry.key");
      }
    };

    if (false &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RankListDataAck_MapDataEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        target = RankListDataAck_MapDataEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListDataAck)
  return target;
}

size_t RankListDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListDataAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> map_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->map_data().begin();
      it != this->map_data().end(); ++it) {
    total_size += RankListDataAck_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListDataAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListDataAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListDataAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListDataAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListDataAck)
    MergeFrom(*source);
  }
}

void RankListDataAck::MergeFrom(const RankListDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListDataAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListDataAck::CopyFrom(const RankListDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListDataAck::IsInitialized() const {
  return true;
}

void RankListDataAck::InternalSwap(RankListDataAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_data_.Swap(&other->map_data_);
  swap(id_, other->id_);
  swap(attach_data_, other->attach_data_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListDataAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListDataArray::InitAsDefaultInstance() {
  ::OuterMsg::_RankListDataArray_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListDataArray::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListDataArray* msg);
};

const ::OuterMsg::AttachData&
RankListDataArray::_Internal::attach_data(const RankListDataArray* msg) {
  return *msg->attach_data_;
}
void RankListDataArray::clear_id_list() {
  id_list_.Clear();
}
RankListDataArray::RankListDataArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListDataArray)
}
RankListDataArray::RankListDataArray(const RankListDataArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_list_(from.id_list_),
      name_list_(from.name_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListDataArray)
}

void RankListDataArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListDataArray_OuterMsg_2eproto.base);
  attach_data_ = nullptr;
}

RankListDataArray::~RankListDataArray() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListDataArray)
  SharedDtor();
}

void RankListDataArray::SharedDtor() {
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListDataArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListDataArray& RankListDataArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListDataArray_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListDataArray::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListDataArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  name_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListDataArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.GUID id_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated bytes name_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_name_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListDataArray::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListDataArray)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.GUID id_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_id_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes name_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_name_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListDataArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListDataArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListDataArray::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListDataArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.GUID id_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->id_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->id_list(static_cast<int>(i)),
      output);
  }

  // repeated bytes name_list = 2;
  for (int i = 0, n = this->name_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->name_list(i), output);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListDataArray)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListDataArray::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListDataArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.GUID id_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->id_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->id_list(static_cast<int>(i)), target);
  }

  // repeated bytes name_list = 2;
  for (int i = 0, n = this->name_list_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->name_list(i), target);
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListDataArray)
  return target;
}

size_t RankListDataArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListDataArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.GUID id_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->id_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->id_list(static_cast<int>(i)));
    }
  }

  // repeated bytes name_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->name_list_size());
  for (int i = 0, n = this->name_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->name_list(i));
  }

  // .OuterMsg.AttachData attach_data = 3;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListDataArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListDataArray)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListDataArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListDataArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListDataArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListDataArray)
    MergeFrom(*source);
  }
}

void RankListDataArray::MergeFrom(const RankListDataArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListDataArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
  name_list_.MergeFrom(from.name_list_);
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
}

void RankListDataArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListDataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListDataArray::CopyFrom(const RankListDataArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListDataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListDataArray::IsInitialized() const {
  return true;
}

void RankListDataArray::InternalSwap(RankListDataArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&id_list_)->InternalSwap(CastToBase(&other->id_list_));
  name_list_.InternalSwap(CastToBase(&other->name_list_));
  swap(attach_data_, other->attach_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListDataArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListDataArrayAck_RankData::InitAsDefaultInstance() {
  ::OuterMsg::_RankListDataArrayAck_RankData_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RankListDataArrayAck_RankData::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListDataArrayAck_RankData* msg);
};

const ::OuterMsg::GUID&
RankListDataArrayAck_RankData::_Internal::id(const RankListDataArrayAck_RankData* msg) {
  return *msg->id_;
}
void RankListDataArrayAck_RankData::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListDataArrayAck_RankData::RankListDataArrayAck_RankData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListDataArrayAck.RankData)
}
RankListDataArrayAck_RankData::RankListDataArrayAck_RankData(const RankListDataArrayAck_RankData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_list_(from.data_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListDataArrayAck.RankData)
}

void RankListDataArrayAck_RankData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto.base);
  id_ = nullptr;
}

RankListDataArrayAck_RankData::~RankListDataArrayAck_RankData() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListDataArrayAck.RankData)
  SharedDtor();
}

void RankListDataArrayAck_RankData::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RankListDataArrayAck_RankData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListDataArrayAck_RankData& RankListDataArrayAck_RankData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListDataArrayAck_RankData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListDataArrayAck_RankData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListDataArrayAck.RankData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListDataArrayAck_RankData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes data_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_data_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListDataArrayAck_RankData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListDataArrayAck.RankData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListDataArrayAck.RankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListDataArrayAck.RankData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListDataArrayAck_RankData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListDataArrayAck.RankData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // repeated bytes data_list = 2;
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->data_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListDataArrayAck.RankData)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListDataArrayAck_RankData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListDataArrayAck.RankData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // repeated bytes data_list = 2;
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->data_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListDataArrayAck.RankData)
  return target;
}

size_t RankListDataArrayAck_RankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListDataArrayAck.RankData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_list_size());
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->data_list(i));
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListDataArrayAck_RankData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListDataArrayAck.RankData)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListDataArrayAck_RankData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListDataArrayAck_RankData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListDataArrayAck.RankData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListDataArrayAck.RankData)
    MergeFrom(*source);
  }
}

void RankListDataArrayAck_RankData::MergeFrom(const RankListDataArrayAck_RankData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListDataArrayAck.RankData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_list_.MergeFrom(from.data_list_);
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
}

void RankListDataArrayAck_RankData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListDataArrayAck.RankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListDataArrayAck_RankData::CopyFrom(const RankListDataArrayAck_RankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListDataArrayAck.RankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListDataArrayAck_RankData::IsInitialized() const {
  return true;
}

void RankListDataArrayAck_RankData::InternalSwap(RankListDataArrayAck_RankData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_list_.InternalSwap(CastToBase(&other->data_list_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListDataArrayAck_RankData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListDataArrayAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListDataArrayAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListDataArrayAck::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListDataArrayAck* msg);
};

const ::OuterMsg::AttachData&
RankListDataArrayAck::_Internal::attach_data(const RankListDataArrayAck* msg) {
  return *msg->attach_data_;
}
RankListDataArrayAck::RankListDataArrayAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListDataArrayAck)
}
RankListDataArrayAck::RankListDataArrayAck(const RankListDataArrayAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      name_list_(from.name_list_),
      data_list_(from.data_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListDataArrayAck)
}

void RankListDataArrayAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListDataArrayAck_OuterMsg_2eproto.base);
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(ret_code_));
}

RankListDataArrayAck::~RankListDataArrayAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListDataArrayAck)
  SharedDtor();
}

void RankListDataArrayAck::SharedDtor() {
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListDataArrayAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListDataArrayAck& RankListDataArrayAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListDataArrayAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListDataArrayAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListDataArrayAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_list_.Clear();
  data_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListDataArrayAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes name_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_name_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListDataArrayAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListDataArrayAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes name_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_name_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListDataArrayAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListDataArrayAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListDataArrayAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListDataArrayAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes name_list = 1;
  for (int i = 0, n = this->name_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->name_list(i), output);
  }

  // repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->data_list(static_cast<int>(i)),
      output);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListDataArrayAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListDataArrayAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListDataArrayAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes name_list = 1;
  for (int i = 0, n = this->name_list_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->name_list(i), target);
  }

  // repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data_list(static_cast<int>(i)), target);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListDataArrayAck)
  return target;
}

size_t RankListDataArrayAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListDataArrayAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes name_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->name_list_size());
  for (int i = 0, n = this->name_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->name_list(i));
  }

  // repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data_list(static_cast<int>(i)));
    }
  }

  // .OuterMsg.AttachData attach_data = 4;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.RankListCode ret_code = 3;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListDataArrayAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListDataArrayAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListDataArrayAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListDataArrayAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListDataArrayAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListDataArrayAck)
    MergeFrom(*source);
  }
}

void RankListDataArrayAck::MergeFrom(const RankListDataArrayAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListDataArrayAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_list_.MergeFrom(from.name_list_);
  data_list_.MergeFrom(from.data_list_);
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListDataArrayAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListDataArrayAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListDataArrayAck::CopyFrom(const RankListDataArrayAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListDataArrayAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListDataArrayAck::IsInitialized() const {
  return true;
}

void RankListDataArrayAck::InternalSwap(RankListDataArrayAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_list_.InternalSwap(CastToBase(&other->name_list_));
  CastToBase(&data_list_)->InternalSwap(CastToBase(&other->data_list_));
  swap(attach_data_, other->attach_data_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListDataArrayAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListRank::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRank_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListRank_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListRank::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListRank* msg);
  static const ::OuterMsg::AttachData& attach_data(const RankListRank* msg);
};

const ::OuterMsg::GUID&
RankListRank::_Internal::id(const RankListRank* msg) {
  return *msg->id_;
}
const ::OuterMsg::AttachData&
RankListRank::_Internal::attach_data(const RankListRank* msg) {
  return *msg->attach_data_;
}
void RankListRank::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListRank::RankListRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRank)
}
RankListRank::RankListRank(const RankListRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_name_(from.data_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  no_data_ = from.no_data_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRank)
}

void RankListRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRank_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_data_) -
      reinterpret_cast<char*>(&id_)) + sizeof(no_data_));
}

RankListRank::~RankListRank() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRank)
  SharedDtor();
}

void RankListRank::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRank& RankListRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRank_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRank::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_name_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  no_data_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 no_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          no_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes data_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_data_name(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRank::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRank)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 no_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_data_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRank)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRank::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::id(this), output);
  }

  // int32 no_data = 3;
  if (this->no_data() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->no_data(), output);
  }

  // repeated bytes data_name = 4;
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->data_name(i), output);
  }

  // .OuterMsg.AttachData attach_data = 5;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRank)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRank::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::id(this), target);
  }

  // int32 no_data = 3;
  if (this->no_data() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->no_data(), target);
  }

  // repeated bytes data_name = 4;
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->data_name(i), target);
  }

  // .OuterMsg.AttachData attach_data = 5;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRank)
  return target;
}

size_t RankListRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_name_size());
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->data_name(i));
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.AttachData attach_data = 5;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // int32 no_data = 3;
  if (this->no_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->no_data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRank)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRank)
    MergeFrom(*source);
  }
}

void RankListRank::MergeFrom(const RankListRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_name_.MergeFrom(from.data_name_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.no_data() != 0) {
    set_no_data(from.no_data());
  }
}

void RankListRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRank::CopyFrom(const RankListRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRank::IsInitialized() const {
  return true;
}

void RankListRank::InternalSwap(RankListRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_name_.InternalSwap(CastToBase(&other->data_name_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(attach_data_, other->attach_data_);
  swap(no_data_, other->no_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RankListRankAck_MapDataEntry_DoNotUse::RankListRankAck_MapDataEntry_DoNotUse() {}
RankListRankAck_MapDataEntry_DoNotUse::RankListRankAck_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RankListRankAck_MapDataEntry_DoNotUse::MergeFrom(const RankListRankAck_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RankListRankAck_MapDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RankListRankAck_MapDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RankListRankAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRankAck_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListRankAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListRankAck::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListRankAck* msg);
  static const ::OuterMsg::AttachData& attach_data(const RankListRankAck* msg);
};

const ::OuterMsg::GUID&
RankListRankAck::_Internal::id(const RankListRankAck* msg) {
  return *msg->id_;
}
const ::OuterMsg::AttachData&
RankListRankAck::_Internal::attach_data(const RankListRankAck* msg) {
  return *msg->attach_data_;
}
void RankListRankAck::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListRankAck::RankListRankAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRankAck)
}
RankListRankAck::RankListRankAck(const RankListRankAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRankAck)
}

void RankListRankAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRankAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ret_code_));
}

RankListRankAck::~RankListRankAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRankAck)
  SharedDtor();
}

void RankListRankAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListRankAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRankAck& RankListRankAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRankAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRankAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRankAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(ret_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRankAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> map_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRankAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRankAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> map_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          RankListRankAck_MapDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RankListRankAck_MapDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&map_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "OuterMsg.RankListRankAck.MapDataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRankAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRankAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRankAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRankAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::id(this), output);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // map<string, bytes> map_data = 4;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListRankAck.MapDataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RankListRankAck_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        RankListRankAck_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .OuterMsg.RankListCode ret_code = 5;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 6;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRankAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRankAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRankAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::id(this), target);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // map<string, bytes> map_data = 4;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListRankAck.MapDataEntry.key");
      }
    };

    if (false &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RankListRankAck_MapDataEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        target = RankListRankAck_MapDataEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .OuterMsg.RankListCode ret_code = 5;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 6;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRankAck)
  return target;
}

size_t RankListRankAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRankAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> map_data = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->map_data().begin();
      it != this->map_data().end(); ++it) {
    total_size += RankListRankAck_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .OuterMsg.AttachData attach_data = 6;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // .OuterMsg.RankListCode ret_code = 5;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRankAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRankAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRankAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRankAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRankAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRankAck)
    MergeFrom(*source);
  }
}

void RankListRankAck::MergeFrom(const RankListRankAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRankAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListRankAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRankAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRankAck::CopyFrom(const RankListRankAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRankAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRankAck::IsInitialized() const {
  return true;
}

void RankListRankAck::InternalSwap(RankListRankAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_data_.Swap(&other->map_data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(attach_data_, other->attach_data_);
  swap(rank_, other->rank_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRankAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListRankArray::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRankArray_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListRankArray::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListRankArray* msg);
};

const ::OuterMsg::AttachData&
RankListRankArray::_Internal::attach_data(const RankListRankArray* msg) {
  return *msg->attach_data_;
}
void RankListRankArray::clear_ids() {
  ids_.Clear();
}
RankListRankArray::RankListRankArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRankArray)
}
RankListRankArray::RankListRankArray(const RankListRankArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRankArray)
}

void RankListRankArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRankArray_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_ = nullptr;
}

RankListRankArray::~RankListRankArray() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRankArray)
  SharedDtor();
}

void RankListRankArray::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListRankArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRankArray& RankListRankArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRankArray_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRankArray::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRankArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRankArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.GUID ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRankArray::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRankArray)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.GUID ids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRankArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRankArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRankArray::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRankArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::attach_data(this), output);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // repeated .OuterMsg.GUID ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRankArray)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRankArray::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRankArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::attach_data(this), target);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // repeated .OuterMsg.GUID ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ids(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRankArray)
  return target;
}

size_t RankListRankArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRankArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.GUID ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ids(static_cast<int>(i)));
    }
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRankArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRankArray)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRankArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRankArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRankArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRankArray)
    MergeFrom(*source);
  }
}

void RankListRankArray::MergeFrom(const RankListRankArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRankArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
}

void RankListRankArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRankArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRankArray::CopyFrom(const RankListRankArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRankArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRankArray::IsInitialized() const {
  return true;
}

void RankListRankArray::InternalSwap(RankListRankArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ids_)->InternalSwap(CastToBase(&other->ids_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRankArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListRankArrayAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRankArrayAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListRankArrayAck::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListRankArrayAck* msg);
};

const ::OuterMsg::AttachData&
RankListRankArrayAck::_Internal::attach_data(const RankListRankArrayAck* msg) {
  return *msg->attach_data_;
}
void RankListRankArrayAck::clear_ids() {
  ids_.Clear();
}
RankListRankArrayAck::RankListRankArrayAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRankArrayAck)
}
RankListRankArrayAck::RankListRankArrayAck(const RankListRankArrayAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      ranks_(from.ranks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRankArrayAck)
}

void RankListRankArrayAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRankArrayAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(ret_code_));
}

RankListRankArrayAck::~RankListRankArrayAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRankArrayAck)
  SharedDtor();
}

void RankListRankArrayAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListRankArrayAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRankArrayAck& RankListRankArrayAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRankArrayAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRankArrayAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRankArrayAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  ranks_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRankArrayAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.GUID ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated int32 ranks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ranks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_ranks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRankArrayAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRankArrayAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.GUID ids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ranks = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ranks())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_ranks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRankArrayAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRankArrayAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRankArrayAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRankArrayAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::attach_data(this), output);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret_code(), output);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // repeated .OuterMsg.GUID ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ids(static_cast<int>(i)),
      output);
  }

  // repeated int32 ranks = 5;
  if (this->ranks_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ranks_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ranks_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ranks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRankArrayAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRankArrayAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRankArrayAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::attach_data(this), target);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret_code(), target);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // repeated .OuterMsg.GUID ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ids(static_cast<int>(i)), target);
  }

  // repeated int32 ranks = 5;
  if (this->ranks_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ranks_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ranks_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRankArrayAck)
  return target;
}

size_t RankListRankArrayAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRankArrayAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.GUID ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ids(static_cast<int>(i)));
    }
  }

  // repeated int32 ranks = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ranks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ranks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRankArrayAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRankArrayAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRankArrayAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRankArrayAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRankArrayAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRankArrayAck)
    MergeFrom(*source);
  }
}

void RankListRankArrayAck::MergeFrom(const RankListRankArrayAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRankArrayAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  ranks_.MergeFrom(from.ranks_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListRankArrayAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRankArrayAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRankArrayAck::CopyFrom(const RankListRankArrayAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRankArrayAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRankArrayAck::IsInitialized() const {
  return true;
}

void RankListRankArrayAck::InternalSwap(RankListRankArrayAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ids_)->InternalSwap(CastToBase(&other->ids_));
  ranks_.InternalSwap(&other->ranks_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRankArrayAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RankListRangeData_MapDataEntry_DoNotUse::RankListRangeData_MapDataEntry_DoNotUse() {}
RankListRangeData_MapDataEntry_DoNotUse::RankListRangeData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RankListRangeData_MapDataEntry_DoNotUse::MergeFrom(const RankListRangeData_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RankListRangeData_MapDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RankListRangeData_MapDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RankListRangeData::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRangeData_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RankListRangeData::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const RankListRangeData* msg);
};

const ::OuterMsg::GUID&
RankListRangeData::_Internal::id(const RankListRangeData* msg) {
  return *msg->id_;
}
void RankListRangeData::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RankListRangeData::RankListRangeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRangeData)
}
RankListRangeData::RankListRangeData(const RankListRangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRangeData)
}

void RankListRangeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRangeData_OuterMsg_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rank_));
}

RankListRangeData::~RankListRangeData() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRangeData)
  SharedDtor();
}

void RankListRangeData::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RankListRangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRangeData& RankListRangeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRangeData_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRangeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> map_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRangeData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRangeData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> map_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          RankListRangeData_MapDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RankListRangeData_MapDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&map_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "OuterMsg.RankListRangeData.MapDataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRangeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRangeData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // int32 rank = 2;
  if (this->rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // map<string, bytes> map_data = 3;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListRangeData.MapDataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RankListRangeData_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        RankListRangeData_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRangeData)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRangeData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // int32 rank = 2;
  if (this->rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // map<string, bytes> map_data = 3;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "OuterMsg.RankListRangeData.MapDataEntry.key");
      }
    };

    if (false &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RankListRangeData_MapDataEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        target = RankListRangeData_MapDataEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRangeData)
  return target;
}

size_t RankListRangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRangeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> map_data = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->map_data().begin();
      it != this->map_data().end(); ++it) {
    total_size += RankListRangeData_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRangeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRangeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRangeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRangeData)
    MergeFrom(*source);
  }
}

void RankListRangeData::MergeFrom(const RankListRangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void RankListRangeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRangeData::CopyFrom(const RankListRangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRangeData::IsInitialized() const {
  return true;
}

void RankListRangeData::InternalSwap(RankListRangeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_data_.Swap(&other->map_data_);
  swap(id_, other->id_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRangeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListRange::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRange_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListRange::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListRange* msg);
};

const ::OuterMsg::AttachData&
RankListRange::_Internal::attach_data(const RankListRange* msg) {
  return *msg->attach_data_;
}
RankListRange::RankListRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRange)
}
RankListRange::RankListRange(const RankListRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      arr_rank_(from.arr_rank_),
      data_name_(from.data_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_data_) -
    reinterpret_cast<char*>(&start_)) + sizeof(no_data_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRange)
}

void RankListRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRange_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_data_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(no_data_));
}

RankListRange::~RankListRange() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRange)
  SharedDtor();
}

void RankListRange::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRange& RankListRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRange_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRange::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_rank_.Clear();
  data_name_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_data_) -
      reinterpret_cast<char*>(&start_)) + sizeof(no_data_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 arr_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_arr_rank(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_arr_rank(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 no_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          no_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes data_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_data_name(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 arr_rank = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_rank())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_arr_rank())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 no_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_data_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // repeated int32 arr_rank = 4;
  if (this->arr_rank_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_rank_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_rank_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_rank(i), output);
  }

  // int32 no_data = 5;
  if (this->no_data() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->no_data(), output);
  }

  // repeated bytes data_name = 6;
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      6, this->data_name(i), output);
  }

  // .OuterMsg.AttachData attach_data = 7;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // repeated int32 arr_rank = 4;
  if (this->arr_rank_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_rank_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_rank_, target);
  }

  // int32 no_data = 5;
  if (this->no_data() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->no_data(), target);
  }

  // repeated bytes data_name = 6;
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(6, this->data_name(i), target);
  }

  // .OuterMsg.AttachData attach_data = 7;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRange)
  return target;
}

size_t RankListRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_rank = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->arr_rank_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_rank_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes data_name = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_name_size());
  for (int i = 0, n = this->data_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->data_name(i));
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 7;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 no_data = 5;
  if (this->no_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->no_data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRange)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRange)
    MergeFrom(*source);
  }
}

void RankListRange::MergeFrom(const RankListRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_rank_.MergeFrom(from.arr_rank_);
  data_name_.MergeFrom(from.data_name_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.no_data() != 0) {
    set_no_data(from.no_data());
  }
}

void RankListRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRange::CopyFrom(const RankListRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRange::IsInitialized() const {
  return true;
}

void RankListRange::InternalSwap(RankListRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_rank_.InternalSwap(&other->arr_rank_);
  data_name_.InternalSwap(CastToBase(&other->data_name_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(start_, other->start_);
  swap(count_, other->count_);
  swap(no_data_, other->no_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListRangeAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListRangeAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
}
class RankListRangeAck::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListRangeAck* msg);
};

const ::OuterMsg::AttachData&
RankListRangeAck::_Internal::attach_data(const RankListRangeAck* msg) {
  return *msg->attach_data_;
}
RankListRangeAck::RankListRangeAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListRangeAck)
}
RankListRangeAck::RankListRangeAck(const RankListRangeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&start_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListRangeAck)
}

void RankListRangeAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListRangeAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(ret_code_));
}

RankListRangeAck::~RankListRangeAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListRangeAck)
  SharedDtor();
}

void RankListRangeAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
}

void RankListRangeAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListRangeAck& RankListRangeAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListRangeAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListRangeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListRangeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&start_)) + sizeof(ret_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListRangeAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RankListRangeData data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.AttachData attach_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListRangeAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListRangeAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_rank = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RankListRangeData data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.AttachData attach_data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListRangeAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListRangeAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListRangeAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListRangeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 max_rank = 4;
  if (this->max_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_rank(), output);
  }

  // repeated .OuterMsg.RankListRangeData data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->data(static_cast<int>(i)),
      output);
  }

  // .OuterMsg.RankListCode ret_code = 6;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->ret_code(), output);
  }

  // .OuterMsg.AttachData attach_data = 7;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::attach_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListRangeAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListRangeAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListRangeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 max_rank = 4;
  if (this->max_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_rank(), target);
  }

  // repeated .OuterMsg.RankListRangeData data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->data(static_cast<int>(i)), target);
  }

  // .OuterMsg.RankListCode ret_code = 6;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->ret_code(), target);
  }

  // .OuterMsg.AttachData attach_data = 7;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::attach_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListRangeAck)
  return target;
}

size_t RankListRangeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListRangeAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.RankListRangeData data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 7;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 max_rank = 4;
  if (this->max_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_rank());
  }

  // .OuterMsg.RankListCode ret_code = 6;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListRangeAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListRangeAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListRangeAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListRangeAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListRangeAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListRangeAck)
    MergeFrom(*source);
  }
}

void RankListRangeAck::MergeFrom(const RankListRangeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListRangeAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.max_rank() != 0) {
    set_max_rank(from.max_rank());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
}

void RankListRangeAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListRangeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListRangeAck::CopyFrom(const RankListRangeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListRangeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRangeAck::IsInitialized() const {
  return true;
}

void RankListRangeAck::InternalSwap(RankListRangeAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(start_, other->start_);
  swap(count_, other->count_);
  swap(max_rank_, other->max_rank_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRangeAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListInit::InitAsDefaultInstance() {
  ::OuterMsg::_RankListInit_default_instance_._instance.get_mutable()->create_ = const_cast< ::OuterMsg::RankListCreate*>(
      ::OuterMsg::RankListCreate::internal_default_instance());
}
class RankListInit::_Internal {
 public:
  static const ::OuterMsg::RankListCreate& create(const RankListInit* msg);
};

const ::OuterMsg::RankListCreate&
RankListInit::_Internal::create(const RankListInit* msg) {
  return *msg->create_;
}
RankListInit::RankListInit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListInit)
}
RankListInit::RankListInit(const RankListInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_rank_(from.data_rank_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create()) {
    create_ = new ::OuterMsg::RankListCreate(*from.create_);
  } else {
    create_ = nullptr;
  }
  finish_ = from.finish_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListInit)
}

void RankListInit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListInit_OuterMsg_2eproto.base);
  ::memset(&create_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_) -
      reinterpret_cast<char*>(&create_)) + sizeof(finish_));
}

RankListInit::~RankListInit() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListInit)
  SharedDtor();
}

void RankListInit::SharedDtor() {
  if (this != internal_default_instance()) delete create_;
}

void RankListInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListInit& RankListInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListInit_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListInit::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_rank_.Clear();
  if (GetArenaNoVirtual() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  finish_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.RankListCreate create = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RankListScore data_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data_rank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // int32 finish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListInit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListInit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.RankListCreate create = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RankListScore data_rank = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data_rank()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 finish = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListInit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.RankListCreate create = 1;
  if (this->has_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::create(this), output);
  }

  // repeated .OuterMsg.RankListScore data_rank = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_rank_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->data_rank(static_cast<int>(i)),
      output);
  }

  // int32 finish = 3;
  if (this->finish() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->finish(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListInit)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListInit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.RankListCreate create = 1;
  if (this->has_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::create(this), target);
  }

  // repeated .OuterMsg.RankListScore data_rank = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_rank_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data_rank(static_cast<int>(i)), target);
  }

  // int32 finish = 3;
  if (this->finish() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->finish(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListInit)
  return target;
}

size_t RankListInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.RankListScore data_rank = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_rank_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data_rank(static_cast<int>(i)));
    }
  }

  // .OuterMsg.RankListCreate create = 1;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  // int32 finish = 3;
  if (this->finish() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->finish());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListInit)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListInit)
    MergeFrom(*source);
  }
}

void RankListInit::MergeFrom(const RankListInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_rank_.MergeFrom(from.data_rank_);
  if (from.has_create()) {
    mutable_create()->::OuterMsg::RankListCreate::MergeFrom(from.create());
  }
  if (from.finish() != 0) {
    set_finish(from.finish());
  }
}

void RankListInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListInit::CopyFrom(const RankListInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListInit::IsInitialized() const {
  return true;
}

void RankListInit::InternalSwap(RankListInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_rank_)->InternalSwap(CastToBase(&other->data_rank_));
  swap(create_, other->create_);
  swap(finish_, other->finish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListUpdate::InitAsDefaultInstance() {
  ::OuterMsg::_RankListUpdate_default_instance_._instance.get_mutable()->del_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListUpdate_default_instance_._instance.get_mutable()->update_ = const_cast< ::OuterMsg::RankListScore*>(
      ::OuterMsg::RankListScore::internal_default_instance());
}
class RankListUpdate::_Internal {
 public:
  static const ::OuterMsg::GUID& del(const RankListUpdate* msg);
  static const ::OuterMsg::RankListScore& update(const RankListUpdate* msg);
};

const ::OuterMsg::GUID&
RankListUpdate::_Internal::del(const RankListUpdate* msg) {
  return *msg->del_;
}
const ::OuterMsg::RankListScore&
RankListUpdate::_Internal::update(const RankListUpdate* msg) {
  return *msg->update_;
}
void RankListUpdate::clear_del() {
  if (GetArenaNoVirtual() == nullptr && del_ != nullptr) {
    delete del_;
  }
  del_ = nullptr;
}
RankListUpdate::RankListUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListUpdate)
}
RankListUpdate::RankListUpdate(const RankListUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_del()) {
    del_ = new ::OuterMsg::GUID(*from.del_);
  } else {
    del_ = nullptr;
  }
  if (from.has_update()) {
    update_ = new ::OuterMsg::RankListScore(*from.update_);
  } else {
    update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListUpdate)
}

void RankListUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListUpdate_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&del_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&del_)) + sizeof(update_));
}

RankListUpdate::~RankListUpdate() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListUpdate)
  SharedDtor();
}

void RankListUpdate::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete del_;
  if (this != internal_default_instance()) delete update_;
}

void RankListUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListUpdate& RankListUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListUpdate_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && del_ != nullptr) {
    delete del_;
  }
  del_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID del = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_del(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListScore update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID del = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListScore update = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.GUID del = 2;
  if (this->has_del()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::del(this), output);
  }

  // .OuterMsg.RankListScore update = 3;
  if (this->has_update()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::update(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListUpdate)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.GUID del = 2;
  if (this->has_del()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::del(this), target);
  }

  // .OuterMsg.RankListScore update = 3;
  if (this->has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::update(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListUpdate)
  return target;
}

size_t RankListUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID del = 2;
  if (this->has_del()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *del_);
  }

  // .OuterMsg.RankListScore update = 3;
  if (this->has_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListUpdate)
    MergeFrom(*source);
  }
}

void RankListUpdate::MergeFrom(const RankListUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_del()) {
    mutable_del()->::OuterMsg::GUID::MergeFrom(from.del());
  }
  if (from.has_update()) {
    mutable_update()->::OuterMsg::RankListScore::MergeFrom(from.update());
  }
}

void RankListUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListUpdate::CopyFrom(const RankListUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListUpdate::IsInitialized() const {
  return true;
}

void RankListUpdate::InternalSwap(RankListUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(del_, other->del_);
  swap(update_, other->update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListSwapRank::InitAsDefaultInstance() {
  ::OuterMsg::_RankListSwapRank_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
  ::OuterMsg::_RankListSwapRank_default_instance_._instance.get_mutable()->key1_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListSwapRank_default_instance_._instance.get_mutable()->key2_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RankListSwapRank::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListSwapRank* msg);
  static const ::OuterMsg::GUID& key1(const RankListSwapRank* msg);
  static const ::OuterMsg::GUID& key2(const RankListSwapRank* msg);
};

const ::OuterMsg::AttachData&
RankListSwapRank::_Internal::attach_data(const RankListSwapRank* msg) {
  return *msg->attach_data_;
}
const ::OuterMsg::GUID&
RankListSwapRank::_Internal::key1(const RankListSwapRank* msg) {
  return *msg->key1_;
}
const ::OuterMsg::GUID&
RankListSwapRank::_Internal::key2(const RankListSwapRank* msg) {
  return *msg->key2_;
}
void RankListSwapRank::clear_key1() {
  if (GetArenaNoVirtual() == nullptr && key1_ != nullptr) {
    delete key1_;
  }
  key1_ = nullptr;
}
void RankListSwapRank::clear_key2() {
  if (GetArenaNoVirtual() == nullptr && key2_ != nullptr) {
    delete key2_;
  }
  key2_ = nullptr;
}
RankListSwapRank::RankListSwapRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListSwapRank)
}
RankListSwapRank::RankListSwapRank(const RankListSwapRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  if (from.has_key1()) {
    key1_ = new ::OuterMsg::GUID(*from.key1_);
  } else {
    key1_ = nullptr;
  }
  if (from.has_key2()) {
    key2_ = new ::OuterMsg::GUID(*from.key2_);
  } else {
    key2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListSwapRank)
}

void RankListSwapRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListSwapRank_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key2_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(key2_));
}

RankListSwapRank::~RankListSwapRank() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListSwapRank)
  SharedDtor();
}

void RankListSwapRank::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
  if (this != internal_default_instance()) delete key1_;
  if (this != internal_default_instance()) delete key2_;
}

void RankListSwapRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListSwapRank& RankListSwapRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListSwapRank_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListSwapRank::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListSwapRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key1_ != nullptr) {
    delete key1_;
  }
  key1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key2_ != nullptr) {
    delete key2_;
  }
  key2_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListSwapRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID key1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_key1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID key2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_key2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListSwapRank::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListSwapRank)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID key1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID key2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListSwapRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListSwapRank)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListSwapRank::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListSwapRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::attach_data(this), output);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // .OuterMsg.GUID key1 = 4;
  if (this->has_key1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::key1(this), output);
  }

  // .OuterMsg.GUID key2 = 5;
  if (this->has_key2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::key2(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListSwapRank)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListSwapRank::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListSwapRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::attach_data(this), target);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // .OuterMsg.GUID key1 = 4;
  if (this->has_key1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::key1(this), target);
  }

  // .OuterMsg.GUID key2 = 5;
  if (this->has_key2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::key2(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListSwapRank)
  return target;
}

size_t RankListSwapRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListSwapRank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.GUID key1 = 4;
  if (this->has_key1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key1_);
  }

  // .OuterMsg.GUID key2 = 5;
  if (this->has_key2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key2_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListSwapRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListSwapRank)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListSwapRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListSwapRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListSwapRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListSwapRank)
    MergeFrom(*source);
  }
}

void RankListSwapRank::MergeFrom(const RankListSwapRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListSwapRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.has_key1()) {
    mutable_key1()->::OuterMsg::GUID::MergeFrom(from.key1());
  }
  if (from.has_key2()) {
    mutable_key2()->::OuterMsg::GUID::MergeFrom(from.key2());
  }
}

void RankListSwapRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListSwapRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListSwapRank::CopyFrom(const RankListSwapRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListSwapRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListSwapRank::IsInitialized() const {
  return true;
}

void RankListSwapRank::InternalSwap(RankListSwapRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(key1_, other->key1_);
  swap(key2_, other->key2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListSwapRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankListSwapRankAck::InitAsDefaultInstance() {
  ::OuterMsg::_RankListSwapRankAck_default_instance_._instance.get_mutable()->attach_data_ = const_cast< ::OuterMsg::AttachData*>(
      ::OuterMsg::AttachData::internal_default_instance());
  ::OuterMsg::_RankListSwapRankAck_default_instance_._instance.get_mutable()->key1_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_RankListSwapRankAck_default_instance_._instance.get_mutable()->key2_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RankListSwapRankAck::_Internal {
 public:
  static const ::OuterMsg::AttachData& attach_data(const RankListSwapRankAck* msg);
  static const ::OuterMsg::GUID& key1(const RankListSwapRankAck* msg);
  static const ::OuterMsg::GUID& key2(const RankListSwapRankAck* msg);
};

const ::OuterMsg::AttachData&
RankListSwapRankAck::_Internal::attach_data(const RankListSwapRankAck* msg) {
  return *msg->attach_data_;
}
const ::OuterMsg::GUID&
RankListSwapRankAck::_Internal::key1(const RankListSwapRankAck* msg) {
  return *msg->key1_;
}
const ::OuterMsg::GUID&
RankListSwapRankAck::_Internal::key2(const RankListSwapRankAck* msg) {
  return *msg->key2_;
}
void RankListSwapRankAck::clear_key1() {
  if (GetArenaNoVirtual() == nullptr && key1_ != nullptr) {
    delete key1_;
  }
  key1_ = nullptr;
}
void RankListSwapRankAck::clear_key2() {
  if (GetArenaNoVirtual() == nullptr && key2_ != nullptr) {
    delete key2_;
  }
  key2_ = nullptr;
}
RankListSwapRankAck::RankListSwapRankAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RankListSwapRankAck)
}
RankListSwapRankAck::RankListSwapRankAck(const RankListSwapRankAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    attach_data_ = new ::OuterMsg::AttachData(*from.attach_data_);
  } else {
    attach_data_ = nullptr;
  }
  if (from.has_key1()) {
    key1_ = new ::OuterMsg::GUID(*from.key1_);
  } else {
    key1_ = nullptr;
  }
  if (from.has_key2()) {
    key2_ = new ::OuterMsg::GUID(*from.key2_);
  } else {
    key2_ = nullptr;
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank2_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(rank2_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RankListSwapRankAck)
}

void RankListSwapRankAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankListSwapRankAck_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank2_) -
      reinterpret_cast<char*>(&attach_data_)) + sizeof(rank2_));
}

RankListSwapRankAck::~RankListSwapRankAck() {
  // @@protoc_insertion_point(destructor:OuterMsg.RankListSwapRankAck)
  SharedDtor();
}

void RankListSwapRankAck::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_data_;
  if (this != internal_default_instance()) delete key1_;
  if (this != internal_default_instance()) delete key2_;
}

void RankListSwapRankAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankListSwapRankAck& RankListSwapRankAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankListSwapRankAck_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void RankListSwapRankAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RankListSwapRankAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key1_ != nullptr) {
    delete key1_;
  }
  key1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key2_ != nullptr) {
    delete key2_;
  }
  key2_ = nullptr;
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank2_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(rank2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankListSwapRankAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_attach_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RankListCode ret_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret_code(static_cast<::OuterMsg::RankListCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID key1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_key1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID key2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_key2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rank1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rank2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankListSwapRankAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RankListSwapRankAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.AttachData attach_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RankListCode ret_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret_code(static_cast< ::OuterMsg::RankListCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID key1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID key2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank1 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank2 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RankListSwapRankAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RankListSwapRankAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankListSwapRankAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RankListSwapRankAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::attach_data(this), output);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret_code(), output);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // .OuterMsg.GUID key1 = 4;
  if (this->has_key1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::key1(this), output);
  }

  // .OuterMsg.GUID key2 = 5;
  if (this->has_key2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::key2(this), output);
  }

  // int32 rank1 = 6;
  if (this->rank1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->rank1(), output);
  }

  // int32 rank2 = 7;
  if (this->rank2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->rank2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RankListSwapRankAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RankListSwapRankAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RankListSwapRankAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::attach_data(this), target);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret_code(), target);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // .OuterMsg.GUID key1 = 4;
  if (this->has_key1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::key1(this), target);
  }

  // .OuterMsg.GUID key2 = 5;
  if (this->has_key2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::key2(this), target);
  }

  // int32 rank1 = 6;
  if (this->rank1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->rank1(), target);
  }

  // int32 rank2 = 7;
  if (this->rank2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->rank2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RankListSwapRankAck)
  return target;
}

size_t RankListSwapRankAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RankListSwapRankAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.AttachData attach_data = 1;
  if (this->has_attach_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attach_data_);
  }

  // .OuterMsg.GUID key1 = 4;
  if (this->has_key1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key1_);
  }

  // .OuterMsg.GUID key2 = 5;
  if (this->has_key2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key2_);
  }

  // .OuterMsg.RankListCode ret_code = 2;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret_code());
  }

  // int32 rank1 = 6;
  if (this->rank1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank1());
  }

  // int32 rank2 = 7;
  if (this->rank2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rank2());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankListSwapRankAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RankListSwapRankAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RankListSwapRankAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankListSwapRankAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RankListSwapRankAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RankListSwapRankAck)
    MergeFrom(*source);
  }
}

void RankListSwapRankAck::MergeFrom(const RankListSwapRankAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RankListSwapRankAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attach_data()) {
    mutable_attach_data()->::OuterMsg::AttachData::MergeFrom(from.attach_data());
  }
  if (from.has_key1()) {
    mutable_key1()->::OuterMsg::GUID::MergeFrom(from.key1());
  }
  if (from.has_key2()) {
    mutable_key2()->::OuterMsg::GUID::MergeFrom(from.key2());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
  if (from.rank1() != 0) {
    set_rank1(from.rank1());
  }
  if (from.rank2() != 0) {
    set_rank2(from.rank2());
  }
}

void RankListSwapRankAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RankListSwapRankAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListSwapRankAck::CopyFrom(const RankListSwapRankAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RankListSwapRankAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListSwapRankAck::IsInitialized() const {
  return true;
}

void RankListSwapRankAck::InternalSwap(RankListSwapRankAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_data_, other->attach_data_);
  swap(key1_, other->key1_);
  swap(key2_, other->key2_);
  swap(ret_code_, other->ret_code_);
  swap(rank1_, other->rank1_);
  swap(rank2_, other->rank2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListSwapRankAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConnectInfo::InitAsDefaultInstance() {
}
class ServerConnectInfo::_Internal {
 public:
};

ServerConnectInfo::ServerConnectInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ServerConnectInfo)
}
ServerConnectInfo::ServerConnectInfo(const ServerConnectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&port_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ServerConnectInfo)
}

void ServerConnectInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConnectInfo_OuterMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
}

ServerConnectInfo::~ServerConnectInfo() {
  // @@protoc_insertion_point(destructor:OuterMsg.ServerConnectInfo)
  SharedDtor();
}

void ServerConnectInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConnectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConnectInfo& ServerConnectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConnectInfo_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ServerConnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ServerConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerConnectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 webport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          webport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerConnectInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ServerConnectInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 webport = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &webport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ServerConnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ServerConnectInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerConnectInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ServerConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // int32 webport = 4;
  if (this->webport() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->webport(), output);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ServerConnectInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConnectInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ServerConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // int32 webport = 4;
  if (this->webport() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->webport(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ServerConnectInfo)
  return target;
}

size_t ServerConnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ServerConnectInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 webport = 4;
  if (this->webport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->webport());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConnectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ServerConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConnectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConnectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ServerConnectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ServerConnectInfo)
    MergeFrom(*source);
  }
}

void ServerConnectInfo::MergeFrom(const ServerConnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ServerConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.webport() != 0) {
    set_webport(from.webport());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ServerConnectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ServerConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConnectInfo::CopyFrom(const ServerConnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ServerConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConnectInfo::IsInitialized() const {
  return true;
}

void ServerConnectInfo::InternalSwap(ServerConnectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(webport_, other->webport_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConnectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientConnectInfo::InitAsDefaultInstance() {
  ::OuterMsg::_ClientConnectInfo_default_instance_._instance.get_mutable()->client_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ClientConnectInfo_default_instance_._instance.get_mutable()->player_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class ClientConnectInfo::_Internal {
 public:
  static const ::OuterMsg::GUID& client(const ClientConnectInfo* msg);
  static const ::OuterMsg::GUID& player(const ClientConnectInfo* msg);
};

const ::OuterMsg::GUID&
ClientConnectInfo::_Internal::client(const ClientConnectInfo* msg) {
  return *msg->client_;
}
const ::OuterMsg::GUID&
ClientConnectInfo::_Internal::player(const ClientConnectInfo* msg) {
  return *msg->player_;
}
void ClientConnectInfo::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
void ClientConnectInfo::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
ClientConnectInfo::ClientConnectInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ClientConnectInfo)
}
ClientConnectInfo::ClientConnectInfo(const ClientConnectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client()) {
    client_ = new ::OuterMsg::GUID(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from.has_player()) {
    player_ = new ::OuterMsg::GUID(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(gate_id_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ClientConnectInfo)
}

void ClientConnectInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientConnectInfo_OuterMsg_2eproto.base);
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_id_) -
      reinterpret_cast<char*>(&client_)) + sizeof(gate_id_));
}

ClientConnectInfo::~ClientConnectInfo() {
  // @@protoc_insertion_point(destructor:OuterMsg.ClientConnectInfo)
  SharedDtor();
}

void ClientConnectInfo::SharedDtor() {
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete player_;
}

void ClientConnectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientConnectInfo& ClientConnectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientConnectInfo_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ClientConnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ClientConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_id_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(gate_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientConnectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gate_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientConnectInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ClientConnectInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID client = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gate_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ClientConnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ClientConnectInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientConnectInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ClientConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID client = 1;
  if (this->has_client()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::client(this), output);
  }

  // .OuterMsg.GUID player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // int32 gate_id = 4;
  if (this->gate_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->gate_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ClientConnectInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientConnectInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ClientConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID client = 1;
  if (this->has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::client(this), target);
  }

  // .OuterMsg.GUID player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // int32 gate_id = 4;
  if (this->gate_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->gate_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ClientConnectInfo)
  return target;
}

size_t ClientConnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ClientConnectInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .OuterMsg.GUID player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  // int32 gate_id = 4;
  if (this->gate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gate_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientConnectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ClientConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientConnectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientConnectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ClientConnectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ClientConnectInfo)
    MergeFrom(*source);
  }
}

void ClientConnectInfo::MergeFrom(const ClientConnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ClientConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client()) {
    mutable_client()->::OuterMsg::GUID::MergeFrom(from.client());
  }
  if (from.has_player()) {
    mutable_player()->::OuterMsg::GUID::MergeFrom(from.player());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.gate_id() != 0) {
    set_gate_id(from.gate_id());
  }
}

void ClientConnectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ClientConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnectInfo::CopyFrom(const ClientConnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ClientConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConnectInfo::IsInitialized() const {
  return true;
}

void ClientConnectInfo::InternalSwap(ClientConnectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(client_, other->client_);
  swap(player_, other->player_);
  swap(game_id_, other->game_id_);
  swap(gate_id_, other->gate_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientConnectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuidName::InitAsDefaultInstance() {
  ::OuterMsg::_GuidName_default_instance_._instance.get_mutable()->id_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class GuidName::_Internal {
 public:
  static const ::OuterMsg::GUID& id(const GuidName* msg);
};

const ::OuterMsg::GUID&
GuidName::_Internal::id(const GuidName* msg) {
  return *msg->id_;
}
void GuidName::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
GuidName::GuidName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.GuidName)
}
GuidName::GuidName(const GuidName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::OuterMsg::GUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.GuidName)
}

void GuidName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuidName_OuterMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

GuidName::~GuidName() {
  // @@protoc_insertion_point(destructor:OuterMsg.GuidName)
  SharedDtor();
}

void GuidName::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void GuidName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuidName& GuidName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuidName_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void GuidName::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.GuidName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GuidName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GuidName::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.GuidName)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.GuidName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.GuidName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GuidName::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.GuidName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.GuidName)
}

::PROTOBUF_NAMESPACE_ID::uint8* GuidName::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.GuidName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.GuidName)
  return target;
}

size_t GuidName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.GuidName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuidName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.GuidName)
  GOOGLE_DCHECK_NE(&from, this);
  const GuidName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuidName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.GuidName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.GuidName)
    MergeFrom(*source);
  }
}

void GuidName::MergeFrom(const GuidName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.GuidName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::OuterMsg::GUID::MergeFrom(from.id());
  }
}

void GuidName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.GuidName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuidName::CopyFrom(const GuidName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.GuidName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuidName::IsInitialized() const {
  return true;
}

void GuidName::InternalSwap(GuidName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuidName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuidNameList::InitAsDefaultInstance() {
}
class GuidNameList::_Internal {
 public:
};

GuidNameList::GuidNameList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.GuidNameList)
}
GuidNameList::GuidNameList(const GuidNameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.GuidNameList)
}

void GuidNameList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuidNameList_OuterMsg_2eproto.base);
  state_ = 0;
}

GuidNameList::~GuidNameList() {
  // @@protoc_insertion_point(destructor:OuterMsg.GuidNameList)
  SharedDtor();
}

void GuidNameList::SharedDtor() {
}

void GuidNameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuidNameList& GuidNameList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuidNameList_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void GuidNameList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.GuidNameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GuidNameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GuidNameList.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::OuterMsg::GuidNameList_State>(val));
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.GuidName list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GuidNameList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.GuidNameList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GuidNameList.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::OuterMsg::GuidNameList_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.GuidName list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.GuidNameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.GuidNameList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GuidNameList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.GuidNameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GuidNameList.State state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // repeated .OuterMsg.GuidName list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.GuidNameList)
}

::PROTOBUF_NAMESPACE_ID::uint8* GuidNameList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.GuidNameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GuidNameList.State state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // repeated .OuterMsg.GuidName list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.GuidNameList)
  return target;
}

size_t GuidNameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.GuidNameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.GuidName list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // .OuterMsg.GuidNameList.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuidNameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.GuidNameList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuidNameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuidNameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.GuidNameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.GuidNameList)
    MergeFrom(*source);
  }
}

void GuidNameList::MergeFrom(const GuidNameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.GuidNameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GuidNameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.GuidNameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuidNameList::CopyFrom(const GuidNameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.GuidNameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuidNameList::IsInitialized() const {
  return true;
}

void GuidNameList::InternalSwap(GuidNameList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuidNameList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptServerID::InitAsDefaultInstance() {
}
class OptServerID::_Internal {
 public:
};

OptServerID::OptServerID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.OptServerID)
}
OptServerID::OptServerID(const OptServerID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.OptServerID)
}

void OptServerID::SharedCtor() {
  server_id_ = 0;
}

OptServerID::~OptServerID() {
  // @@protoc_insertion_point(destructor:OuterMsg.OptServerID)
  SharedDtor();
}

void OptServerID::SharedDtor() {
}

void OptServerID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptServerID& OptServerID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptServerID_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void OptServerID::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.OptServerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptServerID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptServerID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.OptServerID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.OptServerID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.OptServerID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptServerID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.OptServerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.OptServerID)
}

::PROTOBUF_NAMESPACE_ID::uint8* OptServerID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.OptServerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.OptServerID)
  return target;
}

size_t OptServerID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.OptServerID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptServerID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.OptServerID)
  GOOGLE_DCHECK_NE(&from, this);
  const OptServerID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptServerID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.OptServerID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.OptServerID)
    MergeFrom(*source);
  }
}

void OptServerID::MergeFrom(const OptServerID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.OptServerID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void OptServerID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.OptServerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptServerID::CopyFrom(const OptServerID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.OptServerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptServerID::IsInitialized() const {
  return true;
}

void OptServerID::InternalSwap(OptServerID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptServerID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColdDataStore::InitAsDefaultInstance() {
}
class ColdDataStore::_Internal {
 public:
};

void ColdDataStore::clear_data() {
  data_.Clear();
}
ColdDataStore::ColdDataStore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ColdDataStore)
}
ColdDataStore::ColdDataStore(const ColdDataStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ColdDataStore)
}

void ColdDataStore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColdDataStore_OuterMsg_2eproto.base);
}

ColdDataStore::~ColdDataStore() {
  // @@protoc_insertion_point(destructor:OuterMsg.ColdDataStore)
  SharedDtor();
}

void ColdDataStore::SharedDtor() {
}

void ColdDataStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColdDataStore& ColdDataStore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColdDataStore_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ColdDataStore::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ColdDataStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColdDataStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.PropertyString data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColdDataStore::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ColdDataStore)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.PropertyString data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ColdDataStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ColdDataStore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColdDataStore::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ColdDataStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyString data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ColdDataStore)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColdDataStore::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ColdDataStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyString data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ColdDataStore)
  return target;
}

size_t ColdDataStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ColdDataStore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyString data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColdDataStore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ColdDataStore)
  GOOGLE_DCHECK_NE(&from, this);
  const ColdDataStore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColdDataStore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ColdDataStore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ColdDataStore)
    MergeFrom(*source);
  }
}

void ColdDataStore::MergeFrom(const ColdDataStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ColdDataStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ColdDataStore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ColdDataStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColdDataStore::CopyFrom(const ColdDataStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ColdDataStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColdDataStore::IsInitialized() const {
  return true;
}

void ColdDataStore::InternalSwap(ColdDataStore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColdDataStore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogToDB::InitAsDefaultInstance() {
  ::OuterMsg::_LogToDB_default_instance_._instance.get_mutable()->data_list_ = const_cast< ::OuterMsg::PBDataList*>(
      ::OuterMsg::PBDataList::internal_default_instance());
}
class LogToDB::_Internal {
 public:
  static const ::OuterMsg::PBDataList& data_list(const LogToDB* msg);
};

const ::OuterMsg::PBDataList&
LogToDB::_Internal::data_list(const LogToDB* msg) {
  return *msg->data_list_;
}
void LogToDB::clear_data_list() {
  if (GetArenaNoVirtual() == nullptr && data_list_ != nullptr) {
    delete data_list_;
  }
  data_list_ = nullptr;
}
LogToDB::LogToDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.LogToDB)
}
LogToDB::LogToDB(const LogToDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rec_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.rec_name().empty()) {
    rec_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rec_name_);
  }
  if (from.has_data_list()) {
    data_list_ = new ::OuterMsg::PBDataList(*from.data_list_);
  } else {
    data_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.LogToDB)
}

void LogToDB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogToDB_OuterMsg_2eproto.base);
  rec_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_list_ = nullptr;
}

LogToDB::~LogToDB() {
  // @@protoc_insertion_point(destructor:OuterMsg.LogToDB)
  SharedDtor();
}

void LogToDB::SharedDtor() {
  rec_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_list_;
}

void LogToDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogToDB& LogToDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogToDB_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void LogToDB::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.LogToDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rec_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_list_ != nullptr) {
    delete data_list_;
  }
  data_list_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogToDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes rec_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rec_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PBDataList data_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogToDB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.LogToDB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes rec_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rec_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PBDataList data_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.LogToDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.LogToDB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogToDB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.LogToDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rec_name = 1;
  if (this->rec_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rec_name(), output);
  }

  // .OuterMsg.PBDataList data_list = 2;
  if (this->has_data_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.LogToDB)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogToDB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.LogToDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rec_name = 1;
  if (this->rec_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->rec_name(), target);
  }

  // .OuterMsg.PBDataList data_list = 2;
  if (this->has_data_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.LogToDB)
  return target;
}

size_t LogToDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.LogToDB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rec_name = 1;
  if (this->rec_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->rec_name());
  }

  // .OuterMsg.PBDataList data_list = 2;
  if (this->has_data_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_list_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogToDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.LogToDB)
  GOOGLE_DCHECK_NE(&from, this);
  const LogToDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogToDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.LogToDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.LogToDB)
    MergeFrom(*source);
  }
}

void LogToDB::MergeFrom(const LogToDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.LogToDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rec_name().size() > 0) {

    rec_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rec_name_);
  }
  if (from.has_data_list()) {
    mutable_data_list()->::OuterMsg::PBDataList::MergeFrom(from.data_list());
  }
}

void LogToDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.LogToDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogToDB::CopyFrom(const LogToDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.LogToDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogToDB::IsInitialized() const {
  return true;
}

void LogToDB::InternalSwap(LogToDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rec_name_.Swap(&other->rec_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_list_, other->data_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogToDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConnectList::InitAsDefaultInstance() {
}
class ServerConnectList::_Internal {
 public:
};

ServerConnectList::ServerConnectList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ServerConnectList)
}
ServerConnectList::ServerConnectList(const ServerConnectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  OptType_ = from.OptType_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ServerConnectList)
}

void ServerConnectList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConnectList_OuterMsg_2eproto.base);
  OptType_ = 0;
}

ServerConnectList::~ServerConnectList() {
  // @@protoc_insertion_point(destructor:OuterMsg.ServerConnectList)
  SharedDtor();
}

void ServerConnectList::SharedDtor() {
}

void ServerConnectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConnectList& ServerConnectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConnectList_OuterMsg_2eproto.base);
  return *internal_default_instance();
}


void ServerConnectList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ServerConnectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  OptType_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerConnectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.ServerConnectList.EOptType OptType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_OptType(static_cast<::OuterMsg::ServerConnectList_EOptType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.ServerConnectInfo data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerConnectList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ServerConnectList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.ServerConnectList.EOptType OptType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_OptType(static_cast< ::OuterMsg::ServerConnectList_EOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.ServerConnectInfo data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ServerConnectList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ServerConnectList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerConnectList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ServerConnectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.ServerConnectList.EOptType OptType = 1;
  if (this->OptType() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->OptType(), output);
  }

  // repeated .OuterMsg.ServerConnectInfo data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ServerConnectList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConnectList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ServerConnectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.ServerConnectList.EOptType OptType = 1;
  if (this->OptType() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->OptType(), target);
  }

  // repeated .OuterMsg.ServerConnectInfo data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ServerConnectList)
  return target;
}

size_t ServerConnectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ServerConnectList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.ServerConnectInfo data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .OuterMsg.ServerConnectList.EOptType OptType = 1;
  if (this->OptType() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->OptType());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConnectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ServerConnectList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConnectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConnectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ServerConnectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ServerConnectList)
    MergeFrom(*source);
  }
}

void ServerConnectList::MergeFrom(const ServerConnectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ServerConnectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.OptType() != 0) {
    set_OptType(from.OptType());
  }
}

void ServerConnectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ServerConnectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConnectList::CopyFrom(const ServerConnectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ServerConnectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConnectList::IsInitialized() const {
  return true;
}

void ServerConnectList::InternalSwap(ServerConnectList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  swap(OptType_, other->OptType_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConnectList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OuterMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OuterMsg::MsgEmpty* Arena::CreateMaybeMessage< ::OuterMsg::MsgEmpty >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::MsgEmpty >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::MsgReply* Arena::CreateMaybeMessage< ::OuterMsg::MsgReply >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::MsgReply >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewCreate* Arena::CreateMaybeMessage< ::OuterMsg::ViewCreate >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewAdd* Arena::CreateMaybeMessage< ::OuterMsg::ViewAdd >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewRemove* Arena::CreateMaybeMessage< ::OuterMsg::ViewRemove >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewChange* Arena::CreateMaybeMessage< ::OuterMsg::ViewChange >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewChange >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewClose* Arena::CreateMaybeMessage< ::OuterMsg::ViewClose >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewClose >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewProperty* Arena::CreateMaybeMessage< ::OuterMsg::ViewProperty >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewRecord* Arena::CreateMaybeMessage< ::OuterMsg::ViewRecord >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewCellProperty* Arena::CreateMaybeMessage< ::OuterMsg::ViewCellProperty >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewCellProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ViewCellRecord* Arena::CreateMaybeMessage< ::OuterMsg::ViewCellRecord >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ViewCellRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ObjectVisRecord* Arena::CreateMaybeMessage< ::OuterMsg::ObjectVisRecord >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ObjectVisRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::MsgBase* Arena::CreateMaybeMessage< ::OuterMsg::MsgBase >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::MsgBase >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AckEventResult* Arena::CreateMaybeMessage< ::OuterMsg::AckEventResult >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AckEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqAccountLogin* Arena::CreateMaybeMessage< ::OuterMsg::ReqAccountLogin >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqAccountLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqAccountLogout* Arena::CreateMaybeMessage< ::OuterMsg::ReqAccountLogout >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqAccountLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerInfoReport* Arena::CreateMaybeMessage< ::OuterMsg::ServerInfoReport >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerInfoReport >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::NetTest* Arena::CreateMaybeMessage< ::OuterMsg::NetTest >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::NetTest >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse* Arena::CreateMaybeMessage< ::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerInfoReportList* Arena::CreateMaybeMessage< ::OuterMsg::ServerInfoReportList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerInfoReportList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerInfo* Arena::CreateMaybeMessage< ::OuterMsg::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerHeartBeat* Arena::CreateMaybeMessage< ::OuterMsg::ServerHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AckWorldList* Arena::CreateMaybeMessage< ::OuterMsg::AckWorldList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AckWorldList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqConnectWorld* Arena::CreateMaybeMessage< ::OuterMsg::ReqConnectWorld >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqConnectWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AckConnectWorldResult* Arena::CreateMaybeMessage< ::OuterMsg::AckConnectWorldResult >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AckConnectWorldResult >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse* Arena::CreateMaybeMessage< ::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::WorldParam* Arena::CreateMaybeMessage< ::OuterMsg::WorldParam >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::WorldParam >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqRoleList* Arena::CreateMaybeMessage< ::OuterMsg::ReqRoleList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqRoleList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RoleLiteInfo* Arena::CreateMaybeMessage< ::OuterMsg::RoleLiteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RoleLiteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AckRoleLiteInfoList* Arena::CreateMaybeMessage< ::OuterMsg::AckRoleLiteInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AckRoleLiteInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqCreateRole* Arena::CreateMaybeMessage< ::OuterMsg::ReqCreateRole >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqCreateRole >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqDeleteRole* Arena::CreateMaybeMessage< ::OuterMsg::ReqDeleteRole >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqDeleteRole >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RoleOnlineNotify* Arena::CreateMaybeMessage< ::OuterMsg::RoleOnlineNotify >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RoleOnlineNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RoleOfflineNotify* Arena::CreateMaybeMessage< ::OuterMsg::RoleOfflineNotify >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RoleOfflineNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqEnterGameServer* Arena::CreateMaybeMessage< ::OuterMsg::ReqEnterGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqEnterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage< ::OuterMsg::ReqAckEnterGameSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqAckEnterGameSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::OuterMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqLeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::CommandMsg* Arena::CreateMaybeMessage< ::OuterMsg::CommandMsg >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::CommandMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::LetterData* Arena::CreateMaybeMessage< ::OuterMsg::LetterData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::LetterData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::LetterDataPack* Arena::CreateMaybeMessage< ::OuterMsg::LetterDataPack >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::LetterDataPack >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqLookLetter* Arena::CreateMaybeMessage< ::OuterMsg::ReqLookLetter >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqLookLetter >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ReqDeleteLetter* Arena::CreateMaybeMessage< ::OuterMsg::ReqDeleteLetter >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ReqDeleteLetter >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AckQueryLetter* Arena::CreateMaybeMessage< ::OuterMsg::AckQueryLetter >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AckQueryLetter >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PubOpData* Arena::CreateMaybeMessage< ::OuterMsg::PubOpData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PubOpData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AckResult* Arena::CreateMaybeMessage< ::OuterMsg::AckResult >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PubNameData* Arena::CreateMaybeMessage< ::OuterMsg::PubNameData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PubNameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatRemoveRoom* Arena::CreateMaybeMessage< ::OuterMsg::ChatRemoveRoom >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatRemoveRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatAddPlayerToRoom* Arena::CreateMaybeMessage< ::OuterMsg::ChatAddPlayerToRoom >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatAddPlayerToRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatRemovePlayerToRoom* Arena::CreateMaybeMessage< ::OuterMsg::ChatRemovePlayerToRoom >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatRemovePlayerToRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatPlayerInfo* Arena::CreateMaybeMessage< ::OuterMsg::ChatPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatPlayerBanned* Arena::CreateMaybeMessage< ::OuterMsg::ChatPlayerBanned >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatPlayerBanned >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatClientData* Arena::CreateMaybeMessage< ::OuterMsg::ChatClientData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatClientData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatMsgRoom* Arena::CreateMaybeMessage< ::OuterMsg::ChatMsgRoom >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatMsgRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatMsgPlayer* Arena::CreateMaybeMessage< ::OuterMsg::ChatMsgPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatMsgPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ChatRecording* Arena::CreateMaybeMessage< ::OuterMsg::ChatRecording >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ChatRecording >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PlayerRename* Arena::CreateMaybeMessage< ::OuterMsg::PlayerRename >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PlayerRename >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ExtraMsg* Arena::CreateMaybeMessage< ::OuterMsg::ExtraMsg >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ExtraMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::AttachData* Arena::CreateMaybeMessage< ::OuterMsg::AttachData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::AttachData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListCreate* Arena::CreateMaybeMessage< ::OuterMsg::RankListCreate >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListCreateAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListCreateAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListCreateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDelete* Arena::CreateMaybeMessage< ::OuterMsg::RankListDelete >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDeleteAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListDeleteAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDeleteAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListScore* Arena::CreateMaybeMessage< ::OuterMsg::RankListScore >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListScore >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListScoreAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListScoreAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListScoreAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListData_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::OuterMsg::RankListData_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListData_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListData* Arena::CreateMaybeMessage< ::OuterMsg::RankListData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDataAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListDataAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDataArray* Arena::CreateMaybeMessage< ::OuterMsg::RankListDataArray >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDataArray >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDataArrayAck_RankData* Arena::CreateMaybeMessage< ::OuterMsg::RankListDataArrayAck_RankData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDataArrayAck_RankData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListDataArrayAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListDataArrayAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListDataArrayAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRank* Arena::CreateMaybeMessage< ::OuterMsg::RankListRank >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRank >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRankAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListRankAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRankAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRankArray* Arena::CreateMaybeMessage< ::OuterMsg::RankListRankArray >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRankArray >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRankArrayAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListRankArrayAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRankArrayAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRangeData* Arena::CreateMaybeMessage< ::OuterMsg::RankListRangeData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRange* Arena::CreateMaybeMessage< ::OuterMsg::RankListRange >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRange >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListRangeAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListRangeAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListRangeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListInit* Arena::CreateMaybeMessage< ::OuterMsg::RankListInit >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListInit >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListUpdate* Arena::CreateMaybeMessage< ::OuterMsg::RankListUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListSwapRank* Arena::CreateMaybeMessage< ::OuterMsg::RankListSwapRank >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListSwapRank >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RankListSwapRankAck* Arena::CreateMaybeMessage< ::OuterMsg::RankListSwapRankAck >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RankListSwapRankAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerConnectInfo* Arena::CreateMaybeMessage< ::OuterMsg::ServerConnectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerConnectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ClientConnectInfo* Arena::CreateMaybeMessage< ::OuterMsg::ClientConnectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ClientConnectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::GuidName* Arena::CreateMaybeMessage< ::OuterMsg::GuidName >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::GuidName >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::GuidNameList* Arena::CreateMaybeMessage< ::OuterMsg::GuidNameList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::GuidNameList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::OptServerID* Arena::CreateMaybeMessage< ::OuterMsg::OptServerID >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::OptServerID >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ColdDataStore* Arena::CreateMaybeMessage< ::OuterMsg::ColdDataStore >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ColdDataStore >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::LogToDB* Arena::CreateMaybeMessage< ::OuterMsg::LogToDB >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::LogToDB >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ServerConnectList* Arena::CreateMaybeMessage< ::OuterMsg::ServerConnectList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ServerConnectList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
