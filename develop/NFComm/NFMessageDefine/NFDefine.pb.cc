// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFDefine.proto

#include "NFDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace OuterMsg {
}  // namespace OuterMsg
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_NFDefine_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_NFDefine_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFDefine_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFDefine_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_NFDefine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016NFDefine.proto\022\010OuterMsg*>\n\014EServerSta"
  "te\022\r\n\tEST_CRASH\020\000\022\016\n\nEST_NARMAL\020\001\022\017\n\013EST"
  "_MAINTEN\020\002*J\n\nELoginMode\022\r\n\tELM_LOGIN\020\000\022"
  "\020\n\014ELM_REGISTER\020\001\022\033\n\027ELM_AUTO_REGISTER_L"
  "OGIN\020\002*~\n\022RecordOperatorType\022\021\n\rRECORD_O"
  "T_ADD\020\000\022\024\n\020RECORD_OT_REMOVE\020\001\022\024\n\020RECORD_"
  "OT_MODIFY\020\002\022\023\n\017RECORD_OT_CLEAR\020\003\022\024\n\020RECO"
  "RD_OT_UNKNOW\020\004*\331\004\n\016EGameEventCode\022\020\n\014EGE"
  "C_SUCCESS\020\000\022\025\n\021EGEC_UNKOWN_ERROR\020\001\022\026\n\022EG"
  "EC_ACCOUNT_EXIST\020\002\022\033\n\027EGEC_ACCOUNTPWD_IN"
  "VALID\020\003\022\032\n\026EGEC_SELECTSERVER_FAIL\020\004\022\031\n\025E"
  "GEC_CREATE_ROLE_EXIT\020\005\022 \n\034EGEC_CREATE_RO"
  "LE_NAME_REPEAT\020\006\022\035\n\031EGEC_CREATE_ROLE_DB_"
  "ERROR\020\007\022\036\n\032EGEC_ACCOUNTVERIFY_TIMEOUT\020\010\022"
  "\037\n\033EGEC_CREATE_PUB_NAME_REPEAT\020\t\022!\n\035EGEC"
  "_CREATE_GUILD_NAME_REPEAT\020\n\022\034\n\030EGEC_CREA"
  "TE_PUB_DB_ERROR\020\013\022\036\n\032EGEC_CREATE_GUILD_D"
  "B_ERROR\020\014\022\035\n\031EGEC_EXIST_SENSITIVE_WORD\020\r"
  "\022\025\n\021EGEC_LENGTH_ERROR\020\016\022\025\n\021EGEC_CAPITAL_"
  "LACK\020\017\022\022\n\016EGEC_ITEM_LACK\020\020\022!\n\035EGEC_CREAT"
  "E_PLATFORM_DB_ERROR\020\021\022\034\n\030EGEC_NOEXIST_PL"
  "ATFORM_DB\020\022\022\024\n\020EGEC_PLAYER_FULL\020\023\022\027\n\023EGE"
  "C_PLAYER_CLOSURE\020\024*\336\001\n\nObjectType\022\026\n\022OBJ"
  "ECT_TYPE_UNKNOW\020\000\022\025\n\021OBJECT_TYPE_SCENE\020\001"
  "\022\026\n\022OBJECT_TYPE_PLAYER\020\002\022\023\n\017OBJECT_TYPE_"
  "NPC\020\004\022\024\n\020OBJECT_TYPE_ITEM\020\010\022\026\n\022OBJECT_TY"
  "PE_HELPER\020\020\022\031\n\025OBJECT_TYPE_CONTAINER\020 \022\023"
  "\n\017OBJECT_TYPE_PUB\020@\022\026\n\021OBJECT_TYPE_GUILD"
  "\020\200\001*\223\002\n\rRankListMsgID\022\021\n\rMSG_RANK_NONE\020\000"
  "\022\023\n\017MSG_RANK_CREATE\020\001\022\023\n\017MSG_RANK_DELETE"
  "\020\002\022\026\n\022MSG_RANK_SET_SCORE\020\003\022\025\n\021MSG_RANK_S"
  "ET_DATA\020\004\022\025\n\021MSG_RANK_GET_DATA\020\005\022\025\n\021MSG_"
  "RANK_GET_RANK\020\006\022\026\n\022MSG_RANK_GET_RANGE\020\007\022"
  "\033\n\027MSG_RANK_GET_DATA_ARRAY\020\010\022\026\n\022MSG_RANK"
  "_SWAP_RANK\020\t\022\033\n\027MSG_RANK_GET_RANK_ARRAY\020"
  "\n*\202\003\n\014RankListCode\022\025\n\021RANK_CODE_SUCCEED\020"
  "\000\022\024\n\020RANK_CODE_UNKNOW\020\001\022\030\n\024RANK_CODE_NAM"
  "E_EMPTY\020\002\022\023\n\017RANK_CODE_EXIST\020\003\022\027\n\023RANK_C"
  "ODE_NOT_EXIST\020\004\022\031\n\025RANK_CODE_ORDER_EMPTY"
  "\020\005\022\030\n\024RANK_CODE_DATA_EMPTY\020\006\022\035\n\031RANK_COD"
  "E_SCORE_NOT_MATCH\020\007\022\030\n\024RANK_CODE_OVER_RA"
  "NGE\020\010\022\031\n\025RANK_CODE_ERROR_PARSE\020\t\022\035\n\031RANK"
  "_CODE_ERROR_SERIALIZE\020\n\022\030\n\024RANK_CODE_NO_"
  "ON_LIST\020\013\022 \n\034RANK_CODE_DB_GET_DATA_FAILE"
  "D\020\014\022\031\n\025RANK_CODE_PARAM_ERROR\020\r*S\n\006OsType"
  "\022\023\n\017OS_TYPE_UNKNOWN\020\000\022\017\n\013OS_TYPE_IOS\020\001\022\023"
  "\n\017OS_TYPE_ANDROID\020\002\022\016\n\nOS_TYPE_PC\020\003b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFDefine_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFDefine_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFDefine_2eproto_once;
static bool descriptor_table_NFDefine_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFDefine_2eproto = {
  &descriptor_table_NFDefine_2eproto_initialized, descriptor_table_protodef_NFDefine_2eproto, "NFDefine.proto", 1883,
  &descriptor_table_NFDefine_2eproto_once, descriptor_table_NFDefine_2eproto_sccs, descriptor_table_NFDefine_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_NFDefine_2eproto::offsets,
  file_level_metadata_NFDefine_2eproto, 0, file_level_enum_descriptors_NFDefine_2eproto, file_level_service_descriptors_NFDefine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFDefine_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFDefine_2eproto), true);
namespace OuterMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[0];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELoginMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[1];
}
bool ELoginMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordOperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[2];
}
bool RecordOperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameEventCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[3];
}
bool EGameEventCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[4];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RankListMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[5];
}
bool RankListMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RankListCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[6];
}
bool RankListCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFDefine_2eproto);
  return file_level_enum_descriptors_NFDefine_2eproto[7];
}
bool OsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OuterMsg
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
