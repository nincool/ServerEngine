// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterBase.proto

#include "OuterBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GUID_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectDataPack_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBData_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyBytes_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyFloat_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyInt_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PropertyList_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyObject_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyString_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Record_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordFloat_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordInt_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordList_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordObject_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RecordRow_OuterBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordString_OuterBase_2eproto;
namespace OuterMsg {
class GUIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GUID> _instance;
} _GUID_default_instance_;
class PropertyIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyInt> _instance;
} _PropertyInt_default_instance_;
class PropertyFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyFloat> _instance;
} _PropertyFloat_default_instance_;
class PropertyStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyString> _instance;
} _PropertyString_default_instance_;
class PropertyBytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyBytes> _instance;
} _PropertyBytes_default_instance_;
class PropertyObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyObject> _instance;
} _PropertyObject_default_instance_;
class PropertyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyList> _instance;
} _PropertyList_default_instance_;
class ObjectPropertyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyList> _instance;
} _ObjectPropertyList_default_instance_;
class RecordIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordInt> _instance;
} _RecordInt_default_instance_;
class RecordFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordFloat> _instance;
} _RecordFloat_default_instance_;
class RecordStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordString> _instance;
} _RecordString_default_instance_;
class RecordObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordObject> _instance;
} _RecordObject_default_instance_;
class RecordRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordRow> _instance;
} _RecordRow_default_instance_;
class RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Record> _instance;
} _Record_default_instance_;
class RecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordList> _instance;
} _RecordList_default_instance_;
class ObjectRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordList> _instance;
} _ObjectRecordList_default_instance_;
class ObjectDataPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDataPack> _instance;
} _ObjectDataPack_default_instance_;
class PBDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBData> _instance;
} _PBData_default_instance_;
class PBDataListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBDataList> _instance;
} _PBDataList_default_instance_;
class PackMysqlParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackMysqlParam> _instance;
} _PackMysqlParam_default_instance_;
class PackMysqlServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackMysqlServerInfo> _instance;
} _PackMysqlServerInfo_default_instance_;
class SqlExecuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SqlExecute> _instance;
} _SqlExecute_default_instance_;
}  // namespace OuterMsg
static void InitDefaultsscc_info_GUID_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_GUID_default_instance_;
    new (ptr) ::OuterMsg::GUID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::GUID::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GUID_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GUID_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_ObjectDataPack_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ObjectDataPack_default_instance_;
    new (ptr) ::OuterMsg::ObjectDataPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ObjectDataPack::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectDataPack_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ObjectDataPack_OuterBase_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_PropertyList_OuterBase_2eproto.base,
      &scc_info_RecordList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyList_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ObjectPropertyList_default_instance_;
    new (ptr) ::OuterMsg::ObjectPropertyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ObjectPropertyList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyList_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObjectPropertyList_OuterBase_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_PropertyList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordList_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_ObjectRecordList_default_instance_;
    new (ptr) ::OuterMsg::ObjectRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::ObjectRecordList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordList_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObjectRecordList_OuterBase_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,
      &scc_info_RecordList_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PBData_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PBData_default_instance_;
    new (ptr) ::OuterMsg::PBData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PBData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBData_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PBData_OuterBase_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PBDataList_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PBDataList_default_instance_;
    new (ptr) ::OuterMsg::PBDataList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PBDataList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PBDataList_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PBDataList_OuterBase_2eproto}, {
      &scc_info_PBData_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PackMysqlParam_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PackMysqlParam_default_instance_;
    new (ptr) ::OuterMsg::PackMysqlParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PackMysqlParam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackMysqlParam_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PackMysqlParam_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_PackMysqlServerInfo_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PackMysqlServerInfo_default_instance_;
    new (ptr) ::OuterMsg::PackMysqlServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PackMysqlServerInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackMysqlServerInfo_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PackMysqlServerInfo_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyBytes_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PropertyBytes_default_instance_;
    new (ptr) ::OuterMsg::PropertyBytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PropertyBytes::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyBytes_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PropertyBytes_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyFloat_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PropertyFloat_default_instance_;
    new (ptr) ::OuterMsg::PropertyFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PropertyFloat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyFloat_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PropertyFloat_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyInt_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PropertyInt_default_instance_;
    new (ptr) ::OuterMsg::PropertyInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PropertyInt::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyInt_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PropertyInt_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyList_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PropertyList_default_instance_;
    new (ptr) ::OuterMsg::PropertyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PropertyList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PropertyList_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_PropertyList_OuterBase_2eproto}, {
      &scc_info_PropertyInt_OuterBase_2eproto.base,
      &scc_info_PropertyFloat_OuterBase_2eproto.base,
      &scc_info_PropertyString_OuterBase_2eproto.base,
      &scc_info_PropertyObject_OuterBase_2eproto.base,
      &scc_info_PropertyBytes_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PropertyObject_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PropertyObject_default_instance_;
    new (ptr) ::OuterMsg::PropertyObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PropertyObject::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyObject_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PropertyObject_OuterBase_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_PropertyString_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_PropertyString_default_instance_;
    new (ptr) ::OuterMsg::PropertyString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::PropertyString::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyString_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PropertyString_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_Record_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_Record_default_instance_;
    new (ptr) ::OuterMsg::Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::Record::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Record_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Record_OuterBase_2eproto}, {
      &scc_info_RecordRow_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordFloat_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RecordFloat_default_instance_;
    new (ptr) ::OuterMsg::RecordFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RecordFloat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordFloat_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecordFloat_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_RecordInt_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RecordInt_default_instance_;
    new (ptr) ::OuterMsg::RecordInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RecordInt::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordInt_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecordInt_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_RecordList_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RecordList_default_instance_;
    new (ptr) ::OuterMsg::RecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RecordList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordList_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RecordList_OuterBase_2eproto}, {
      &scc_info_Record_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordObject_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RecordObject_default_instance_;
    new (ptr) ::OuterMsg::RecordObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RecordObject::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordObject_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RecordObject_OuterBase_2eproto}, {
      &scc_info_GUID_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordRow_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RecordRow_default_instance_;
    new (ptr) ::OuterMsg::RecordRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RecordRow::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RecordRow_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RecordRow_OuterBase_2eproto}, {
      &scc_info_RecordInt_OuterBase_2eproto.base,
      &scc_info_RecordFloat_OuterBase_2eproto.base,
      &scc_info_RecordString_OuterBase_2eproto.base,
      &scc_info_RecordObject_OuterBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordString_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_RecordString_default_instance_;
    new (ptr) ::OuterMsg::RecordString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::RecordString::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordString_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecordString_OuterBase_2eproto}, {}};

static void InitDefaultsscc_info_SqlExecute_OuterBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OuterMsg::_SqlExecute_default_instance_;
    new (ptr) ::OuterMsg::SqlExecute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OuterMsg::SqlExecute::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SqlExecute_OuterBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SqlExecute_OuterBase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OuterBase_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OuterBase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OuterBase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OuterBase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GUID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GUID, data1_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::GUID, data2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyInt, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyInt, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyFloat, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyFloat, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyString, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyBytes, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyBytes, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyObject, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyObject, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyList, property_int_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyList, property_float_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyList, property_string_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyList, property_object_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PropertyList, property_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectPropertyList, ident_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectPropertyList, type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectPropertyList, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordInt, col_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordInt, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordFloat, col_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordFloat, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordString, col_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordObject, col_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordObject, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordRow, row_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordRow, record_int_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordRow, record_float_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordRow, record_string_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordRow, record_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::Record, name_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::Record, row_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::RecordList, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectRecordList, ident_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectRecordList, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectDataPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectDataPack, ident_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectDataPack, property_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectDataPack, record_list_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::ObjectDataPack, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBData, v_type_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBData, v_int_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBData, v_float_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBData, v_string_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBData, v_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PBDataList, v_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, strRecordName_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, strKey_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, fieldVecList_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, valueVecList_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, bExit_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, nreqid_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, nRet_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlParam, eType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, nRconnectTime_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, nRconneCount_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, nPort_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, strDBName_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, strDnsIp_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, strDBUser_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, strDBPwd_),
  PROTOBUF_FIELD_OFFSET(::OuterMsg::PackMysqlServerInfo, nServerID_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::SqlExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OuterMsg::SqlExecute, SqlScript_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OuterMsg::GUID)},
  { 7, -1, sizeof(::OuterMsg::PropertyInt)},
  { 14, -1, sizeof(::OuterMsg::PropertyFloat)},
  { 21, -1, sizeof(::OuterMsg::PropertyString)},
  { 28, -1, sizeof(::OuterMsg::PropertyBytes)},
  { 35, -1, sizeof(::OuterMsg::PropertyObject)},
  { 42, -1, sizeof(::OuterMsg::PropertyList)},
  { 52, -1, sizeof(::OuterMsg::ObjectPropertyList)},
  { 60, -1, sizeof(::OuterMsg::RecordInt)},
  { 67, -1, sizeof(::OuterMsg::RecordFloat)},
  { 74, -1, sizeof(::OuterMsg::RecordString)},
  { 81, -1, sizeof(::OuterMsg::RecordObject)},
  { 88, -1, sizeof(::OuterMsg::RecordRow)},
  { 98, -1, sizeof(::OuterMsg::Record)},
  { 105, -1, sizeof(::OuterMsg::RecordList)},
  { 111, -1, sizeof(::OuterMsg::ObjectRecordList)},
  { 118, -1, sizeof(::OuterMsg::ObjectDataPack)},
  { 127, -1, sizeof(::OuterMsg::PBData)},
  { 137, -1, sizeof(::OuterMsg::PBDataList)},
  { 143, -1, sizeof(::OuterMsg::PackMysqlParam)},
  { 156, -1, sizeof(::OuterMsg::PackMysqlServerInfo)},
  { 169, -1, sizeof(::OuterMsg::SqlExecute)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_GUID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PropertyInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PropertyFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PropertyString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PropertyBytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PropertyObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ObjectPropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RecordInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RecordFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RecordString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RecordObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RecordRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_RecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ObjectRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_ObjectDataPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PBData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PBDataList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PackMysqlParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_PackMysqlServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OuterMsg::_SqlExecute_default_instance_),
};

const char descriptor_table_protodef_OuterBase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017OuterBase.proto\022\010OuterMsg\032\016NFDefine.pr"
  "oto\"$\n\004GUID\022\r\n\005data1\030\001 \001(\003\022\r\n\005data2\030\002 \001("
  "\003\")\n\013PropertyInt\022\014\n\004name\030\001 \001(\014\022\014\n\004data\030\002"
  " \001(\003\"+\n\rPropertyFloat\022\014\n\004name\030\001 \001(\014\022\014\n\004d"
  "ata\030\002 \001(\001\",\n\016PropertyString\022\014\n\004name\030\001 \001("
  "\014\022\014\n\004data\030\002 \001(\014\"+\n\rPropertyBytes\022\014\n\004name"
  "\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\"<\n\016PropertyObject\022\014"
  "\n\004name\030\001 \001(\014\022\034\n\004data\030\002 \001(\0132\016.OuterMsg.GU"
  "ID\"\203\002\n\014PropertyList\022+\n\014property_int\030\001 \003("
  "\0132\025.OuterMsg.PropertyInt\022/\n\016property_flo"
  "at\030\002 \003(\0132\027.OuterMsg.PropertyFloat\0221\n\017pro"
  "perty_string\030\003 \003(\0132\030.OuterMsg.PropertySt"
  "ring\0221\n\017property_object\030\004 \003(\0132\030.OuterMsg"
  ".PropertyObject\022/\n\016property_bytes\030\005 \003(\0132"
  "\027.OuterMsg.PropertyBytes\"\206\001\n\022ObjectPrope"
  "rtyList\022\035\n\005ident\030\001 \001(\0132\016.OuterMsg.GUID\022\""
  "\n\004type\030\002 \001(\0162\024.OuterMsg.ObjectType\022-\n\rpr"
  "operty_list\030\003 \001(\0132\026.OuterMsg.PropertyLis"
  "t\"&\n\tRecordInt\022\013\n\003col\030\001 \001(\005\022\014\n\004data\030\002 \001("
  "\003\"(\n\013RecordFloat\022\013\n\003col\030\001 \001(\005\022\014\n\004data\030\002 "
  "\001(\001\")\n\014RecordString\022\013\n\003col\030\001 \001(\005\022\014\n\004data"
  "\030\002 \001(\014\"9\n\014RecordObject\022\013\n\003col\030\001 \001(\005\022\034\n\004d"
  "ata\030\002 \001(\0132\016.OuterMsg.GUID\"\314\001\n\tRecordRow\022"
  "\013\n\003row\030\001 \001(\005\022\'\n\nrecord_int\030\002 \003(\0132\023.Outer"
  "Msg.RecordInt\022+\n\014record_float\030\003 \003(\0132\025.Ou"
  "terMsg.RecordFloat\022-\n\rrecord_string\030\004 \003("
  "\0132\026.OuterMsg.RecordString\022-\n\rrecord_obje"
  "ct\030\005 \003(\0132\026.OuterMsg.RecordObject\"=\n\006Reco"
  "rd\022\014\n\004name\030\001 \001(\014\022%\n\010row_data\030\002 \003(\0132\023.Out"
  "erMsg.RecordRow\".\n\nRecordList\022 \n\006record\030"
  "\001 \003(\0132\020.OuterMsg.Record\"\\\n\020ObjectRecordL"
  "ist\022\035\n\005ident\030\001 \001(\0132\016.OuterMsg.GUID\022)\n\013re"
  "cord_list\030\002 \001(\0132\024.OuterMsg.RecordList\"\262\001"
  "\n\016ObjectDataPack\022\035\n\005ident\030\001 \001(\0132\016.OuterM"
  "sg.GUID\022-\n\rproperty_list\030\002 \001(\0132\026.OuterMs"
  "g.PropertyList\022)\n\013record_list\030\003 \001(\0132\024.Ou"
  "terMsg.RecordList\022\'\n\005child\030\004 \003(\0132\030.Outer"
  "Msg.ObjectDataPack\"j\n\006PBData\022\016\n\006v_type\030\001"
  " \001(\005\022\r\n\005v_int\030\002 \001(\003\022\017\n\007v_float\030\003 \001(\001\022\020\n\010"
  "v_string\030\004 \001(\014\022\036\n\006v_guid\030\005 \001(\0132\016.OuterMs"
  "g.GUID\".\n\nPBDataList\022 \n\006v_data\030\001 \003(\0132\020.O"
  "uterMsg.PBData\"\237\001\n\016PackMysqlParam\022\025\n\rstr"
  "RecordName\030\001 \001(\014\022\016\n\006strKey\030\002 \001(\014\022\024\n\014fiel"
  "dVecList\030\003 \003(\014\022\024\n\014valueVecList\030\004 \003(\014\022\r\n\005"
  "bExit\030\005 \001(\003\022\016\n\006nreqid\030\006 \001(\003\022\014\n\004nRet\030\007 \001("
  "\003\022\r\n\005eType\030\010 \001(\003\"\256\001\n\023PackMysqlServerInfo"
  "\022\025\n\rnRconnectTime\030\001 \001(\003\022\024\n\014nRconneCount\030"
  "\002 \001(\003\022\r\n\005nPort\030\003 \001(\003\022\021\n\tstrDBName\030\004 \001(\014\022"
  "\020\n\010strDnsIp\030\005 \001(\014\022\021\n\tstrDBUser\030\006 \001(\014\022\020\n\010"
  "strDBPwd\030\007 \001(\014\022\021\n\tnServerID\030\010 \001(\003\"\037\n\nSql"
  "Execute\022\021\n\tSqlScript\030\001 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OuterBase_2eproto_deps[1] = {
  &::descriptor_table_NFDefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OuterBase_2eproto_sccs[22] = {
  &scc_info_GUID_OuterBase_2eproto.base,
  &scc_info_ObjectDataPack_OuterBase_2eproto.base,
  &scc_info_ObjectPropertyList_OuterBase_2eproto.base,
  &scc_info_ObjectRecordList_OuterBase_2eproto.base,
  &scc_info_PBData_OuterBase_2eproto.base,
  &scc_info_PBDataList_OuterBase_2eproto.base,
  &scc_info_PackMysqlParam_OuterBase_2eproto.base,
  &scc_info_PackMysqlServerInfo_OuterBase_2eproto.base,
  &scc_info_PropertyBytes_OuterBase_2eproto.base,
  &scc_info_PropertyFloat_OuterBase_2eproto.base,
  &scc_info_PropertyInt_OuterBase_2eproto.base,
  &scc_info_PropertyList_OuterBase_2eproto.base,
  &scc_info_PropertyObject_OuterBase_2eproto.base,
  &scc_info_PropertyString_OuterBase_2eproto.base,
  &scc_info_Record_OuterBase_2eproto.base,
  &scc_info_RecordFloat_OuterBase_2eproto.base,
  &scc_info_RecordInt_OuterBase_2eproto.base,
  &scc_info_RecordList_OuterBase_2eproto.base,
  &scc_info_RecordObject_OuterBase_2eproto.base,
  &scc_info_RecordRow_OuterBase_2eproto.base,
  &scc_info_RecordString_OuterBase_2eproto.base,
  &scc_info_SqlExecute_OuterBase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OuterBase_2eproto_once;
static bool descriptor_table_OuterBase_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OuterBase_2eproto = {
  &descriptor_table_OuterBase_2eproto_initialized, descriptor_table_protodef_OuterBase_2eproto, "OuterBase.proto", 2034,
  &descriptor_table_OuterBase_2eproto_once, descriptor_table_OuterBase_2eproto_sccs, descriptor_table_OuterBase_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_OuterBase_2eproto::offsets,
  file_level_metadata_OuterBase_2eproto, 22, file_level_enum_descriptors_OuterBase_2eproto, file_level_service_descriptors_OuterBase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OuterBase_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OuterBase_2eproto), true);
namespace OuterMsg {

// ===================================================================

void GUID::InitAsDefaultInstance() {
}
class GUID::_Internal {
 public:
};

GUID::GUID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.GUID)
}
GUID::GUID(const GUID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data1_, &from.data1_,
    static_cast<size_t>(reinterpret_cast<char*>(&data2_) -
    reinterpret_cast<char*>(&data1_)) + sizeof(data2_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.GUID)
}

void GUID::SharedCtor() {
  ::memset(&data1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data2_) -
      reinterpret_cast<char*>(&data1_)) + sizeof(data2_));
}

GUID::~GUID() {
  // @@protoc_insertion_point(destructor:OuterMsg.GUID)
  SharedDtor();
}

void GUID::SharedDtor() {
}

void GUID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GUID& GUID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GUID_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void GUID::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.GUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data2_) -
      reinterpret_cast<char*>(&data1_)) + sizeof(data2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GUID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 data1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GUID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.GUID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 data1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &data1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 data2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &data2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.GUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.GUID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GUID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.GUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data1 = 1;
  if (this->data1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->data1(), output);
  }

  // int64 data2 = 2;
  if (this->data2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->data2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.GUID)
}

::PROTOBUF_NAMESPACE_ID::uint8* GUID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.GUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data1 = 1;
  if (this->data1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->data1(), target);
  }

  // int64 data2 = 2;
  if (this->data2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->data2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.GUID)
  return target;
}

size_t GUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.GUID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 data1 = 1;
  if (this->data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->data1());
  }

  // int64 data2 = 2;
  if (this->data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->data2());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GUID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.GUID)
  GOOGLE_DCHECK_NE(&from, this);
  const GUID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GUID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.GUID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.GUID)
    MergeFrom(*source);
  }
}

void GUID::MergeFrom(const GUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.GUID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data1() != 0) {
    set_data1(from.data1());
  }
  if (from.data2() != 0) {
    set_data2(from.data2());
  }
}

void GUID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.GUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUID::CopyFrom(const GUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.GUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUID::IsInitialized() const {
  return true;
}

void GUID::InternalSwap(GUID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GUID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyInt::InitAsDefaultInstance() {
}
class PropertyInt::_Internal {
 public:
};

PropertyInt::PropertyInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PropertyInt)
}
PropertyInt::PropertyInt(const PropertyInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PropertyInt)
}

void PropertyInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyInt_OuterBase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = PROTOBUF_LONGLONG(0);
}

PropertyInt::~PropertyInt() {
  // @@protoc_insertion_point(destructor:OuterMsg.PropertyInt)
  SharedDtor();
}

void PropertyInt::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyInt& PropertyInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyInt_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyInt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PropertyInt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PropertyInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PropertyInt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyInt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // int64 data = 2;
  if (this->data() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PropertyInt)
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyInt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // int64 data = 2;
  if (this->data() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PropertyInt)
  return target;
}

size_t PropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PropertyInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // int64 data = 2;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PropertyInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PropertyInt)
    MergeFrom(*source);
  }
}

void PropertyInt::MergeFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
}

void PropertyInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInt::CopyFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInt::IsInitialized() const {
  return true;
}

void PropertyInt::InternalSwap(PropertyInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyFloat::InitAsDefaultInstance() {
}
class PropertyFloat::_Internal {
 public:
};

PropertyFloat::PropertyFloat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PropertyFloat)
}
PropertyFloat::PropertyFloat(const PropertyFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PropertyFloat)
}

void PropertyFloat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyFloat_OuterBase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = 0;
}

PropertyFloat::~PropertyFloat() {
  // @@protoc_insertion_point(destructor:OuterMsg.PropertyFloat)
  SharedDtor();
}

void PropertyFloat::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyFloat& PropertyFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyFloat_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyFloat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PropertyFloat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PropertyFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PropertyFloat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyFloat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // double data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PropertyFloat)
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyFloat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // double data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PropertyFloat)
  return target;
}

size_t PropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PropertyFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // double data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PropertyFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PropertyFloat)
    MergeFrom(*source);
  }
}

void PropertyFloat::MergeFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.data() <= 0 && from.data() >= 0)) {
    set_data(from.data());
  }
}

void PropertyFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyFloat::CopyFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFloat::IsInitialized() const {
  return true;
}

void PropertyFloat::InternalSwap(PropertyFloat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyString::InitAsDefaultInstance() {
}
class PropertyString::_Internal {
 public:
};

PropertyString::PropertyString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PropertyString)
}
PropertyString::PropertyString(const PropertyString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PropertyString)
}

void PropertyString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyString_OuterBase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PropertyString::~PropertyString() {
  // @@protoc_insertion_point(destructor:OuterMsg.PropertyString)
  SharedDtor();
}

void PropertyString::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyString& PropertyString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyString_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PropertyString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PropertyString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PropertyString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PropertyString)
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PropertyString)
  return target;
}

size_t PropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PropertyString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PropertyString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PropertyString)
    MergeFrom(*source);
  }
}

void PropertyString::MergeFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void PropertyString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyString::CopyFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyString::IsInitialized() const {
  return true;
}

void PropertyString::InternalSwap(PropertyString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyBytes::InitAsDefaultInstance() {
}
class PropertyBytes::_Internal {
 public:
};

PropertyBytes::PropertyBytes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PropertyBytes)
}
PropertyBytes::PropertyBytes(const PropertyBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PropertyBytes)
}

void PropertyBytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyBytes_OuterBase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PropertyBytes::~PropertyBytes() {
  // @@protoc_insertion_point(destructor:OuterMsg.PropertyBytes)
  SharedDtor();
}

void PropertyBytes::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyBytes& PropertyBytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyBytes_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PropertyBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyBytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyBytes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PropertyBytes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PropertyBytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PropertyBytes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyBytes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PropertyBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PropertyBytes)
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyBytes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PropertyBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PropertyBytes)
  return target;
}

size_t PropertyBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PropertyBytes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyBytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PropertyBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyBytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PropertyBytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PropertyBytes)
    MergeFrom(*source);
  }
}

void PropertyBytes::MergeFrom(const PropertyBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PropertyBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void PropertyBytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PropertyBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyBytes::CopyFrom(const PropertyBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PropertyBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyBytes::IsInitialized() const {
  return true;
}

void PropertyBytes::InternalSwap(PropertyBytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyBytes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyObject::InitAsDefaultInstance() {
  ::OuterMsg::_PropertyObject_default_instance_._instance.get_mutable()->data_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class PropertyObject::_Internal {
 public:
  static const ::OuterMsg::GUID& data(const PropertyObject* msg);
};

const ::OuterMsg::GUID&
PropertyObject::_Internal::data(const PropertyObject* msg) {
  return *msg->data_;
}
PropertyObject::PropertyObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PropertyObject)
}
PropertyObject::PropertyObject(const PropertyObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_data()) {
    data_ = new ::OuterMsg::GUID(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PropertyObject)
}

void PropertyObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyObject_OuterBase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

PropertyObject::~PropertyObject() {
  // @@protoc_insertion_point(destructor:OuterMsg.PropertyObject)
  SharedDtor();
}

void PropertyObject::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyObject& PropertyObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyObject_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PropertyObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PropertyObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PropertyObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // .OuterMsg.GUID data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PropertyObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // .OuterMsg.GUID data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PropertyObject)
  return target;
}

size_t PropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PropertyObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .OuterMsg.GUID data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PropertyObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PropertyObject)
    MergeFrom(*source);
  }
}

void PropertyObject::MergeFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_data()) {
    mutable_data()->::OuterMsg::GUID::MergeFrom(from.data());
  }
}

void PropertyObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyObject::CopyFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyObject::IsInitialized() const {
  return true;
}

void PropertyObject::InternalSwap(PropertyObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyList::InitAsDefaultInstance() {
}
class PropertyList::_Internal {
 public:
};

PropertyList::PropertyList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PropertyList)
}
PropertyList::PropertyList(const PropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      property_int_(from.property_int_),
      property_float_(from.property_float_),
      property_string_(from.property_string_),
      property_object_(from.property_object_),
      property_bytes_(from.property_bytes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PropertyList)
}

void PropertyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyList_OuterBase_2eproto.base);
}

PropertyList::~PropertyList() {
  // @@protoc_insertion_point(destructor:OuterMsg.PropertyList)
  SharedDtor();
}

void PropertyList::SharedDtor() {
}

void PropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyList& PropertyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyList_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_int_.Clear();
  property_float_.Clear();
  property_string_.Clear();
  property_object_.Clear();
  property_bytes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.PropertyInt property_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_property_int(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.PropertyFloat property_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_property_float(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.PropertyString property_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_property_string(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.PropertyObject property_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_property_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.PropertyBytes property_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_property_bytes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PropertyList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.PropertyInt property_int = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_property_int()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.PropertyFloat property_float = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_property_float()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.PropertyString property_string = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_property_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.PropertyObject property_object = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_property_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.PropertyBytes property_bytes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_property_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PropertyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PropertyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyInt property_int = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_int_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->property_int(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.PropertyFloat property_float = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_float_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->property_float(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.PropertyString property_string = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_string_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->property_string(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.PropertyObject property_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_object_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->property_object(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.PropertyBytes property_bytes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_bytes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->property_bytes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PropertyList)
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyInt property_int = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_int_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->property_int(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.PropertyFloat property_float = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_float_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->property_float(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.PropertyString property_string = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_string_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->property_string(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.PropertyObject property_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_object_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->property_object(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.PropertyBytes property_bytes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_bytes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->property_bytes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PropertyList)
  return target;
}

size_t PropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PropertyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.PropertyInt property_int = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->property_int_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->property_int(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.PropertyFloat property_float = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_float_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->property_float(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.PropertyString property_string = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_string_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->property_string(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.PropertyObject property_object = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->property_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->property_object(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.PropertyBytes property_bytes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->property_bytes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->property_bytes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PropertyList)
    MergeFrom(*source);
  }
}

void PropertyList::MergeFrom(const PropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_int_.MergeFrom(from.property_int_);
  property_float_.MergeFrom(from.property_float_);
  property_string_.MergeFrom(from.property_string_);
  property_object_.MergeFrom(from.property_object_);
  property_bytes_.MergeFrom(from.property_bytes_);
}

void PropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyList::CopyFrom(const PropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyList::IsInitialized() const {
  return true;
}

void PropertyList::InternalSwap(PropertyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&property_int_)->InternalSwap(CastToBase(&other->property_int_));
  CastToBase(&property_float_)->InternalSwap(CastToBase(&other->property_float_));
  CastToBase(&property_string_)->InternalSwap(CastToBase(&other->property_string_));
  CastToBase(&property_object_)->InternalSwap(CastToBase(&other->property_object_));
  CastToBase(&property_bytes_)->InternalSwap(CastToBase(&other->property_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyList::InitAsDefaultInstance() {
  ::OuterMsg::_ObjectPropertyList_default_instance_._instance.get_mutable()->ident_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ObjectPropertyList_default_instance_._instance.get_mutable()->property_list_ = const_cast< ::OuterMsg::PropertyList*>(
      ::OuterMsg::PropertyList::internal_default_instance());
}
class ObjectPropertyList::_Internal {
 public:
  static const ::OuterMsg::GUID& ident(const ObjectPropertyList* msg);
  static const ::OuterMsg::PropertyList& property_list(const ObjectPropertyList* msg);
};

const ::OuterMsg::GUID&
ObjectPropertyList::_Internal::ident(const ObjectPropertyList* msg) {
  return *msg->ident_;
}
const ::OuterMsg::PropertyList&
ObjectPropertyList::_Internal::property_list(const ObjectPropertyList* msg) {
  return *msg->property_list_;
}
ObjectPropertyList::ObjectPropertyList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ObjectPropertyList)
}
ObjectPropertyList::ObjectPropertyList(const ObjectPropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::OuterMsg::GUID(*from.ident_);
  } else {
    ident_ = nullptr;
  }
  if (from.has_property_list()) {
    property_list_ = new ::OuterMsg::PropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ObjectPropertyList)
}

void ObjectPropertyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyList_OuterBase_2eproto.base);
  ::memset(&ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ident_)) + sizeof(type_));
}

ObjectPropertyList::~ObjectPropertyList() {
  // @@protoc_insertion_point(destructor:OuterMsg.ObjectPropertyList)
  SharedDtor();
}

void ObjectPropertyList::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
  if (this != internal_default_instance()) delete property_list_;
}

void ObjectPropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyList& ObjectPropertyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyList_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectPropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.ObjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::OuterMsg::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PropertyList property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectPropertyList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ObjectPropertyList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID ident = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.ObjectType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::OuterMsg::ObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PropertyList property_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ObjectPropertyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ObjectPropertyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectPropertyList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ident(this), output);
  }

  // .OuterMsg.ObjectType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::property_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ObjectPropertyList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ident(this), target);
  }

  // .OuterMsg.ObjectType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::property_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ObjectPropertyList)
  return target;
}

size_t ObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ObjectPropertyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ident_);
  }

  // .OuterMsg.PropertyList property_list = 3;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  // .OuterMsg.ObjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ObjectPropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ObjectPropertyList)
    MergeFrom(*source);
  }
}

void ObjectPropertyList::MergeFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident()) {
    mutable_ident()->::OuterMsg::GUID::MergeFrom(from.ident());
  }
  if (from.has_property_list()) {
    mutable_property_list()->::OuterMsg::PropertyList::MergeFrom(from.property_list());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ObjectPropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyList::CopyFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyList::IsInitialized() const {
  return true;
}

void ObjectPropertyList::InternalSwap(ObjectPropertyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ident_, other->ident_);
  swap(property_list_, other->property_list_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordInt::InitAsDefaultInstance() {
}
class RecordInt::_Internal {
 public:
};

RecordInt::RecordInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RecordInt)
}
RecordInt::RecordInt(const RecordInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&data_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RecordInt)
}

void RecordInt::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordInt::~RecordInt() {
  // @@protoc_insertion_point(destructor:OuterMsg.RecordInt)
  SharedDtor();
}

void RecordInt::SharedDtor() {
}

void RecordInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordInt& RecordInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordInt_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void RecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 col = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordInt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RecordInt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 col = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RecordInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RecordInt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordInt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->col(), output);
  }

  // int64 data = 2;
  if (this->data() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RecordInt)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordInt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->col(), target);
  }

  // int64 data = 2;
  if (this->data() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RecordInt)
  return target;
}

size_t RecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RecordInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 data = 2;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->data());
  }

  // int32 col = 1;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->col());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RecordInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RecordInt)
    MergeFrom(*source);
  }
}

void RecordInt::MergeFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
}

void RecordInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInt::CopyFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInt::IsInitialized() const {
  return true;
}

void RecordInt::InternalSwap(RecordInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(col_, other->col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordFloat::InitAsDefaultInstance() {
}
class RecordFloat::_Internal {
 public:
};

RecordFloat::RecordFloat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RecordFloat)
}
RecordFloat::RecordFloat(const RecordFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&data_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RecordFloat)
}

void RecordFloat::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordFloat::~RecordFloat() {
  // @@protoc_insertion_point(destructor:OuterMsg.RecordFloat)
  SharedDtor();
}

void RecordFloat::SharedDtor() {
}

void RecordFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordFloat& RecordFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordFloat_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void RecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 col = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordFloat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RecordFloat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 col = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RecordFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RecordFloat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordFloat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->col(), output);
  }

  // double data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RecordFloat)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordFloat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->col(), target);
  }

  // double data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RecordFloat)
  return target;
}

size_t RecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RecordFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 col = 1;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->col());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RecordFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RecordFloat)
    MergeFrom(*source);
  }
}

void RecordFloat::MergeFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.data() <= 0 && from.data() >= 0)) {
    set_data(from.data());
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
}

void RecordFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordFloat::CopyFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFloat::IsInitialized() const {
  return true;
}

void RecordFloat::InternalSwap(RecordFloat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(col_, other->col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordString::InitAsDefaultInstance() {
}
class RecordString::_Internal {
 public:
};

RecordString::RecordString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RecordString)
}
RecordString::RecordString(const RecordString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  col_ = from.col_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RecordString)
}

void RecordString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordString_OuterBase_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_ = 0;
}

RecordString::~RecordString() {
  // @@protoc_insertion_point(destructor:OuterMsg.RecordString)
  SharedDtor();
}

void RecordString::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordString& RecordString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordString_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void RecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 col = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RecordString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 col = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RecordString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RecordString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->col(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RecordString)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->col(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RecordString)
  return target;
}

size_t RecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RecordString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 col = 1;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->col());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RecordString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RecordString)
    MergeFrom(*source);
  }
}

void RecordString::MergeFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
}

void RecordString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordString::CopyFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordString::IsInitialized() const {
  return true;
}

void RecordString::InternalSwap(RecordString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(col_, other->col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordObject::InitAsDefaultInstance() {
  ::OuterMsg::_RecordObject_default_instance_._instance.get_mutable()->data_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class RecordObject::_Internal {
 public:
  static const ::OuterMsg::GUID& data(const RecordObject* msg);
};

const ::OuterMsg::GUID&
RecordObject::_Internal::data(const RecordObject* msg) {
  return *msg->data_;
}
RecordObject::RecordObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RecordObject)
}
RecordObject::RecordObject(const RecordObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::OuterMsg::GUID(*from.data_);
  } else {
    data_ = nullptr;
  }
  col_ = from.col_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RecordObject)
}

void RecordObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordObject_OuterBase_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordObject::~RecordObject() {
  // @@protoc_insertion_point(destructor:OuterMsg.RecordObject)
  SharedDtor();
}

void RecordObject::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void RecordObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordObject& RecordObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordObject_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void RecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  col_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 col = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RecordObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 col = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RecordObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RecordObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->col(), output);
  }

  // .OuterMsg.GUID data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RecordObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->col(), target);
  }

  // .OuterMsg.GUID data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RecordObject)
  return target;
}

size_t RecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RecordObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 col = 1;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->col());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RecordObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RecordObject)
    MergeFrom(*source);
  }
}

void RecordObject::MergeFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::OuterMsg::GUID::MergeFrom(from.data());
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
}

void RecordObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordObject::CopyFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordObject::IsInitialized() const {
  return true;
}

void RecordObject::InternalSwap(RecordObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(col_, other->col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordRow::InitAsDefaultInstance() {
}
class RecordRow::_Internal {
 public:
};

RecordRow::RecordRow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RecordRow)
}
RecordRow::RecordRow(const RecordRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      record_int_(from.record_int_),
      record_float_(from.record_float_),
      record_string_(from.record_string_),
      record_object_(from.record_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_ = from.row_;
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RecordRow)
}

void RecordRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordRow_OuterBase_2eproto.base);
  row_ = 0;
}

RecordRow::~RecordRow() {
  // @@protoc_insertion_point(destructor:OuterMsg.RecordRow)
  SharedDtor();
}

void RecordRow::SharedDtor() {
}

void RecordRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordRow& RecordRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordRow_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void RecordRow::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RecordRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_int_.Clear();
  record_float_.Clear();
  record_string_.Clear();
  record_object_.Clear();
  row_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RecordInt record_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_record_int(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RecordFloat record_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_record_float(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RecordString record_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_record_string(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RecordObject record_object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_record_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordRow::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RecordRow)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RecordInt record_int = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_record_int()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RecordFloat record_float = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_record_float()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RecordString record_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_record_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RecordObject record_object = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_record_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RecordRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RecordRow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordRow::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RecordRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // repeated .OuterMsg.RecordInt record_int = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_int_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->record_int(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.RecordFloat record_float = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_float_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->record_float(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.RecordString record_string = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_string_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->record_string(static_cast<int>(i)),
      output);
  }

  // repeated .OuterMsg.RecordObject record_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_object_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->record_object(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RecordRow)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordRow::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RecordRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // repeated .OuterMsg.RecordInt record_int = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_int_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->record_int(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.RecordFloat record_float = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_float_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->record_float(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.RecordString record_string = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_string_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->record_string(static_cast<int>(i)), target);
  }

  // repeated .OuterMsg.RecordObject record_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_object_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->record_object(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RecordRow)
  return target;
}

size_t RecordRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RecordRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.RecordInt record_int = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->record_int_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->record_int(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.RecordFloat record_float = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->record_float_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->record_float(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.RecordString record_string = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->record_string_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->record_string(static_cast<int>(i)));
    }
  }

  // repeated .OuterMsg.RecordObject record_object = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->record_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->record_object(static_cast<int>(i)));
    }
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->row());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RecordRow)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RecordRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RecordRow)
    MergeFrom(*source);
  }
}

void RecordRow::MergeFrom(const RecordRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RecordRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_int_.MergeFrom(from.record_int_);
  record_float_.MergeFrom(from.record_float_);
  record_string_.MergeFrom(from.record_string_);
  record_object_.MergeFrom(from.record_object_);
  if (from.row() != 0) {
    set_row(from.row());
  }
}

void RecordRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RecordRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordRow::CopyFrom(const RecordRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RecordRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRow::IsInitialized() const {
  return true;
}

void RecordRow::InternalSwap(RecordRow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&record_int_)->InternalSwap(CastToBase(&other->record_int_));
  CastToBase(&record_float_)->InternalSwap(CastToBase(&other->record_float_));
  CastToBase(&record_string_)->InternalSwap(CastToBase(&other->record_string_));
  CastToBase(&record_object_)->InternalSwap(CastToBase(&other->record_object_));
  swap(row_, other->row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Record::InitAsDefaultInstance() {
}
class Record::_Internal {
 public:
};

Record::Record()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      row_data_(from.row_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.Record)
}

void Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Record_OuterBase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:OuterMsg.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Record& Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Record_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_data_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.RecordRow row_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_row_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Record::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.Record)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.RecordRow row_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_row_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.Record)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Record::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // repeated .OuterMsg.RecordRow row_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->row_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.Record)
}

::PROTOBUF_NAMESPACE_ID::uint8* Record::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // repeated .OuterMsg.RecordRow row_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->row_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.RecordRow row_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->row_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->row_data(static_cast<int>(i)));
    }
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_data_.MergeFrom(from.row_data_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&row_data_)->InternalSwap(CastToBase(&other->row_data_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordList::InitAsDefaultInstance() {
}
class RecordList::_Internal {
 public:
};

RecordList::RecordList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.RecordList)
}
RecordList::RecordList(const RecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      record_(from.record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.RecordList)
}

void RecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordList_OuterBase_2eproto.base);
}

RecordList::~RecordList() {
  // @@protoc_insertion_point(destructor:OuterMsg.RecordList)
  SharedDtor();
}

void RecordList::SharedDtor() {
}

void RecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordList& RecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordList_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void RecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.RecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.Record record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.RecordList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.Record record = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.RecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.RecordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.RecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.Record record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->record(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.RecordList)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.RecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.Record record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->record(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.RecordList)
  return target;
}

size_t RecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.RecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.Record record = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->record(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.RecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.RecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.RecordList)
    MergeFrom(*source);
  }
}

void RecordList::MergeFrom(const RecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.RecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
}

void RecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.RecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordList::CopyFrom(const RecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.RecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordList::IsInitialized() const {
  return true;
}

void RecordList::InternalSwap(RecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&record_)->InternalSwap(CastToBase(&other->record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordList::InitAsDefaultInstance() {
  ::OuterMsg::_ObjectRecordList_default_instance_._instance.get_mutable()->ident_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ObjectRecordList_default_instance_._instance.get_mutable()->record_list_ = const_cast< ::OuterMsg::RecordList*>(
      ::OuterMsg::RecordList::internal_default_instance());
}
class ObjectRecordList::_Internal {
 public:
  static const ::OuterMsg::GUID& ident(const ObjectRecordList* msg);
  static const ::OuterMsg::RecordList& record_list(const ObjectRecordList* msg);
};

const ::OuterMsg::GUID&
ObjectRecordList::_Internal::ident(const ObjectRecordList* msg) {
  return *msg->ident_;
}
const ::OuterMsg::RecordList&
ObjectRecordList::_Internal::record_list(const ObjectRecordList* msg) {
  return *msg->record_list_;
}
ObjectRecordList::ObjectRecordList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ObjectRecordList)
}
ObjectRecordList::ObjectRecordList(const ObjectRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::OuterMsg::GUID(*from.ident_);
  } else {
    ident_ = nullptr;
  }
  if (from.has_record_list()) {
    record_list_ = new ::OuterMsg::RecordList(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ObjectRecordList)
}

void ObjectRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordList_OuterBase_2eproto.base);
  ::memset(&ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_list_) -
      reinterpret_cast<char*>(&ident_)) + sizeof(record_list_));
}

ObjectRecordList::~ObjectRecordList() {
  // @@protoc_insertion_point(destructor:OuterMsg.ObjectRecordList)
  SharedDtor();
}

void ObjectRecordList::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
  if (this != internal_default_instance()) delete record_list_;
}

void ObjectRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordList& ObjectRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordList_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordList record_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectRecordList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ObjectRecordList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID ident = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordList record_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ObjectRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ObjectRecordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectRecordList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ident(this), output);
  }

  // .OuterMsg.RecordList record_list = 2;
  if (this->has_record_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::record_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ObjectRecordList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ident(this), target);
  }

  // .OuterMsg.RecordList record_list = 2;
  if (this->has_record_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::record_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ObjectRecordList)
  return target;
}

size_t ObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ObjectRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ident_);
  }

  // .OuterMsg.RecordList record_list = 2;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ObjectRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ObjectRecordList)
    MergeFrom(*source);
  }
}

void ObjectRecordList::MergeFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident()) {
    mutable_ident()->::OuterMsg::GUID::MergeFrom(from.ident());
  }
  if (from.has_record_list()) {
    mutable_record_list()->::OuterMsg::RecordList::MergeFrom(from.record_list());
  }
}

void ObjectRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordList::CopyFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordList::IsInitialized() const {
  return true;
}

void ObjectRecordList::InternalSwap(ObjectRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ident_, other->ident_);
  swap(record_list_, other->record_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDataPack::InitAsDefaultInstance() {
  ::OuterMsg::_ObjectDataPack_default_instance_._instance.get_mutable()->ident_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
  ::OuterMsg::_ObjectDataPack_default_instance_._instance.get_mutable()->property_list_ = const_cast< ::OuterMsg::PropertyList*>(
      ::OuterMsg::PropertyList::internal_default_instance());
  ::OuterMsg::_ObjectDataPack_default_instance_._instance.get_mutable()->record_list_ = const_cast< ::OuterMsg::RecordList*>(
      ::OuterMsg::RecordList::internal_default_instance());
}
class ObjectDataPack::_Internal {
 public:
  static const ::OuterMsg::GUID& ident(const ObjectDataPack* msg);
  static const ::OuterMsg::PropertyList& property_list(const ObjectDataPack* msg);
  static const ::OuterMsg::RecordList& record_list(const ObjectDataPack* msg);
};

const ::OuterMsg::GUID&
ObjectDataPack::_Internal::ident(const ObjectDataPack* msg) {
  return *msg->ident_;
}
const ::OuterMsg::PropertyList&
ObjectDataPack::_Internal::property_list(const ObjectDataPack* msg) {
  return *msg->property_list_;
}
const ::OuterMsg::RecordList&
ObjectDataPack::_Internal::record_list(const ObjectDataPack* msg) {
  return *msg->record_list_;
}
ObjectDataPack::ObjectDataPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.ObjectDataPack)
}
ObjectDataPack::ObjectDataPack(const ObjectDataPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      child_(from.child_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::OuterMsg::GUID(*from.ident_);
  } else {
    ident_ = nullptr;
  }
  if (from.has_property_list()) {
    property_list_ = new ::OuterMsg::PropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  if (from.has_record_list()) {
    record_list_ = new ::OuterMsg::RecordList(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.ObjectDataPack)
}

void ObjectDataPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDataPack_OuterBase_2eproto.base);
  ::memset(&ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_list_) -
      reinterpret_cast<char*>(&ident_)) + sizeof(record_list_));
}

ObjectDataPack::~ObjectDataPack() {
  // @@protoc_insertion_point(destructor:OuterMsg.ObjectDataPack)
  SharedDtor();
}

void ObjectDataPack::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
  if (this != internal_default_instance()) delete property_list_;
  if (this != internal_default_instance()) delete record_list_;
}

void ObjectDataPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDataPack& ObjectDataPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDataPack_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectDataPack::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.ObjectDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDataPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OuterMsg.GUID ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.PropertyList property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.RecordList record_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OuterMsg.ObjectDataPack child = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDataPack::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.ObjectDataPack)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OuterMsg.GUID ident = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.PropertyList property_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.RecordList record_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OuterMsg.ObjectDataPack child = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.ObjectDataPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.ObjectDataPack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDataPack::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.ObjectDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ident(this), output);
  }

  // .OuterMsg.PropertyList property_list = 2;
  if (this->has_property_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::property_list(this), output);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::record_list(this), output);
  }

  // repeated .OuterMsg.ObjectDataPack child = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->child(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.ObjectDataPack)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDataPack::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.ObjectDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ident(this), target);
  }

  // .OuterMsg.PropertyList property_list = 2;
  if (this->has_property_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::property_list(this), target);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::record_list(this), target);
  }

  // repeated .OuterMsg.ObjectDataPack child = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->child(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.ObjectDataPack)
  return target;
}

size_t ObjectDataPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.ObjectDataPack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.ObjectDataPack child = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->child_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->child(static_cast<int>(i)));
    }
  }

  // .OuterMsg.GUID ident = 1;
  if (this->has_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ident_);
  }

  // .OuterMsg.PropertyList property_list = 2;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  // .OuterMsg.RecordList record_list = 3;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDataPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.ObjectDataPack)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDataPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDataPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.ObjectDataPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.ObjectDataPack)
    MergeFrom(*source);
  }
}

void ObjectDataPack::MergeFrom(const ObjectDataPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.ObjectDataPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  if (from.has_ident()) {
    mutable_ident()->::OuterMsg::GUID::MergeFrom(from.ident());
  }
  if (from.has_property_list()) {
    mutable_property_list()->::OuterMsg::PropertyList::MergeFrom(from.property_list());
  }
  if (from.has_record_list()) {
    mutable_record_list()->::OuterMsg::RecordList::MergeFrom(from.record_list());
  }
}

void ObjectDataPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.ObjectDataPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDataPack::CopyFrom(const ObjectDataPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.ObjectDataPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDataPack::IsInitialized() const {
  return true;
}

void ObjectDataPack::InternalSwap(ObjectDataPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&child_)->InternalSwap(CastToBase(&other->child_));
  swap(ident_, other->ident_);
  swap(property_list_, other->property_list_);
  swap(record_list_, other->record_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDataPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBData::InitAsDefaultInstance() {
  ::OuterMsg::_PBData_default_instance_._instance.get_mutable()->v_guid_ = const_cast< ::OuterMsg::GUID*>(
      ::OuterMsg::GUID::internal_default_instance());
}
class PBData::_Internal {
 public:
  static const ::OuterMsg::GUID& v_guid(const PBData* msg);
};

const ::OuterMsg::GUID&
PBData::_Internal::v_guid(const PBData* msg) {
  return *msg->v_guid_;
}
PBData::PBData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PBData)
}
PBData::PBData(const PBData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  v_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.v_string().empty()) {
    v_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v_string_);
  }
  if (from.has_v_guid()) {
    v_guid_ = new ::OuterMsg::GUID(*from.v_guid_);
  } else {
    v_guid_ = nullptr;
  }
  ::memcpy(&v_int_, &from.v_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_type_) -
    reinterpret_cast<char*>(&v_int_)) + sizeof(v_type_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PBData)
}

void PBData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBData_OuterBase_2eproto.base);
  v_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&v_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_type_) -
      reinterpret_cast<char*>(&v_guid_)) + sizeof(v_type_));
}

PBData::~PBData() {
  // @@protoc_insertion_point(destructor:OuterMsg.PBData)
  SharedDtor();
}

void PBData::SharedDtor() {
  v_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete v_guid_;
}

void PBData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBData& PBData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBData_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PBData::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PBData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && v_guid_ != nullptr) {
    delete v_guid_;
  }
  v_guid_ = nullptr;
  ::memset(&v_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_type_) -
      reinterpret_cast<char*>(&v_int_)) + sizeof(v_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PBData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 v_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 v_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double v_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          v_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes v_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_v_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OuterMsg.GUID v_guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_v_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PBData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PBData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 v_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 v_int = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &v_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v_float = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes v_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OuterMsg.GUID v_guid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_v_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PBData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PBData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PBData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PBData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v_type = 1;
  if (this->v_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->v_type(), output);
  }

  // int64 v_int = 2;
  if (this->v_int() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->v_int(), output);
  }

  // double v_float = 3;
  if (!(this->v_float() <= 0 && this->v_float() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->v_float(), output);
  }

  // bytes v_string = 4;
  if (this->v_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->v_string(), output);
  }

  // .OuterMsg.GUID v_guid = 5;
  if (this->has_v_guid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::v_guid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PBData)
}

::PROTOBUF_NAMESPACE_ID::uint8* PBData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PBData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v_type = 1;
  if (this->v_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->v_type(), target);
  }

  // int64 v_int = 2;
  if (this->v_int() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->v_int(), target);
  }

  // double v_float = 3;
  if (!(this->v_float() <= 0 && this->v_float() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->v_float(), target);
  }

  // bytes v_string = 4;
  if (this->v_string().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->v_string(), target);
  }

  // .OuterMsg.GUID v_guid = 5;
  if (this->has_v_guid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::v_guid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PBData)
  return target;
}

size_t PBData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PBData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v_string = 4;
  if (this->v_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->v_string());
  }

  // .OuterMsg.GUID v_guid = 5;
  if (this->has_v_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *v_guid_);
  }

  // int64 v_int = 2;
  if (this->v_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->v_int());
  }

  // double v_float = 3;
  if (!(this->v_float() <= 0 && this->v_float() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 v_type = 1;
  if (this->v_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->v_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PBData)
  GOOGLE_DCHECK_NE(&from, this);
  const PBData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PBData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PBData)
    MergeFrom(*source);
  }
}

void PBData::MergeFrom(const PBData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PBData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v_string().size() > 0) {

    v_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v_string_);
  }
  if (from.has_v_guid()) {
    mutable_v_guid()->::OuterMsg::GUID::MergeFrom(from.v_guid());
  }
  if (from.v_int() != 0) {
    set_v_int(from.v_int());
  }
  if (!(from.v_float() <= 0 && from.v_float() >= 0)) {
    set_v_float(from.v_float());
  }
  if (from.v_type() != 0) {
    set_v_type(from.v_type());
  }
}

void PBData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PBData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBData::CopyFrom(const PBData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PBData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBData::IsInitialized() const {
  return true;
}

void PBData::InternalSwap(PBData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  v_string_.Swap(&other->v_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(v_guid_, other->v_guid_);
  swap(v_int_, other->v_int_);
  swap(v_float_, other->v_float_);
  swap(v_type_, other->v_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBDataList::InitAsDefaultInstance() {
}
class PBDataList::_Internal {
 public:
};

PBDataList::PBDataList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PBDataList)
}
PBDataList::PBDataList(const PBDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      v_data_(from.v_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PBDataList)
}

void PBDataList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBDataList_OuterBase_2eproto.base);
}

PBDataList::~PBDataList() {
  // @@protoc_insertion_point(destructor:OuterMsg.PBDataList)
  SharedDtor();
}

void PBDataList::SharedDtor() {
}

void PBDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBDataList& PBDataList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBDataList_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PBDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PBDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PBDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OuterMsg.PBData v_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_v_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PBDataList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PBDataList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OuterMsg.PBData v_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_v_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PBDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PBDataList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PBDataList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PBDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.PBData v_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->v_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PBDataList)
}

::PROTOBUF_NAMESPACE_ID::uint8* PBDataList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PBDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OuterMsg.PBData v_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->v_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PBDataList)
  return target;
}

size_t PBDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PBDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OuterMsg.PBData v_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->v_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->v_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBDataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PBDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const PBDataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBDataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PBDataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PBDataList)
    MergeFrom(*source);
  }
}

void PBDataList::MergeFrom(const PBDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PBDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_data_.MergeFrom(from.v_data_);
}

void PBDataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PBDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDataList::CopyFrom(const PBDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PBDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDataList::IsInitialized() const {
  return true;
}

void PBDataList::InternalSwap(PBDataList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&v_data_)->InternalSwap(CastToBase(&other->v_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBDataList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PackMysqlParam::InitAsDefaultInstance() {
}
class PackMysqlParam::_Internal {
 public:
};

PackMysqlParam::PackMysqlParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PackMysqlParam)
}
PackMysqlParam::PackMysqlParam(const PackMysqlParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fieldVecList_(from.fieldVecList_),
      valueVecList_(from.valueVecList_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strRecordName_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strRecordName().empty()) {
    strRecordName_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strRecordName_);
  }
  strKey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strKey().empty()) {
    strKey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strKey_);
  }
  ::memcpy(&bExit_, &from.bExit_,
    static_cast<size_t>(reinterpret_cast<char*>(&eType_) -
    reinterpret_cast<char*>(&bExit_)) + sizeof(eType_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PackMysqlParam)
}

void PackMysqlParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PackMysqlParam_OuterBase_2eproto.base);
  strRecordName_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strKey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bExit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eType_) -
      reinterpret_cast<char*>(&bExit_)) + sizeof(eType_));
}

PackMysqlParam::~PackMysqlParam() {
  // @@protoc_insertion_point(destructor:OuterMsg.PackMysqlParam)
  SharedDtor();
}

void PackMysqlParam::SharedDtor() {
  strRecordName_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strKey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PackMysqlParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackMysqlParam& PackMysqlParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackMysqlParam_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PackMysqlParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PackMysqlParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldVecList_.Clear();
  valueVecList_.Clear();
  strRecordName_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strKey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bExit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eType_) -
      reinterpret_cast<char*>(&bExit_)) + sizeof(eType_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PackMysqlParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes strRecordName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_strRecordName(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes strKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_strKey(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes fieldVecList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_fieldVecList(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated bytes valueVecList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_valueVecList(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int64 bExit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bExit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nreqid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nreqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nRet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nRet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 eType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          eType_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PackMysqlParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PackMysqlParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes strRecordName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strRecordName()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strKey = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strKey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes fieldVecList = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_fieldVecList()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes valueVecList = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_valueVecList()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bExit = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bExit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nreqid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nreqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nRet = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nRet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 eType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &eType_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PackMysqlParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PackMysqlParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PackMysqlParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PackMysqlParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strRecordName = 1;
  if (this->strRecordName().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->strRecordName(), output);
  }

  // bytes strKey = 2;
  if (this->strKey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->strKey(), output);
  }

  // repeated bytes fieldVecList = 3;
  for (int i = 0, n = this->fieldVecList_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->fieldVecList(i), output);
  }

  // repeated bytes valueVecList = 4;
  for (int i = 0, n = this->valueVecList_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->valueVecList(i), output);
  }

  // int64 bExit = 5;
  if (this->bExit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->bExit(), output);
  }

  // int64 nreqid = 6;
  if (this->nreqid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->nreqid(), output);
  }

  // int64 nRet = 7;
  if (this->nRet() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->nRet(), output);
  }

  // int64 eType = 8;
  if (this->eType() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->eType(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PackMysqlParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* PackMysqlParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PackMysqlParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strRecordName = 1;
  if (this->strRecordName().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->strRecordName(), target);
  }

  // bytes strKey = 2;
  if (this->strKey().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->strKey(), target);
  }

  // repeated bytes fieldVecList = 3;
  for (int i = 0, n = this->fieldVecList_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->fieldVecList(i), target);
  }

  // repeated bytes valueVecList = 4;
  for (int i = 0, n = this->valueVecList_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->valueVecList(i), target);
  }

  // int64 bExit = 5;
  if (this->bExit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->bExit(), target);
  }

  // int64 nreqid = 6;
  if (this->nreqid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->nreqid(), target);
  }

  // int64 nRet = 7;
  if (this->nRet() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->nRet(), target);
  }

  // int64 eType = 8;
  if (this->eType() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->eType(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PackMysqlParam)
  return target;
}

size_t PackMysqlParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PackMysqlParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes fieldVecList = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fieldVecList_size());
  for (int i = 0, n = this->fieldVecList_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->fieldVecList(i));
  }

  // repeated bytes valueVecList = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->valueVecList_size());
  for (int i = 0, n = this->valueVecList_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->valueVecList(i));
  }

  // bytes strRecordName = 1;
  if (this->strRecordName().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->strRecordName());
  }

  // bytes strKey = 2;
  if (this->strKey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->strKey());
  }

  // int64 bExit = 5;
  if (this->bExit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bExit());
  }

  // int64 nreqid = 6;
  if (this->nreqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nreqid());
  }

  // int64 nRet = 7;
  if (this->nRet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nRet());
  }

  // int64 eType = 8;
  if (this->eType() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->eType());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackMysqlParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PackMysqlParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PackMysqlParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackMysqlParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PackMysqlParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PackMysqlParam)
    MergeFrom(*source);
  }
}

void PackMysqlParam::MergeFrom(const PackMysqlParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PackMysqlParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldVecList_.MergeFrom(from.fieldVecList_);
  valueVecList_.MergeFrom(from.valueVecList_);
  if (from.strRecordName().size() > 0) {

    strRecordName_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strRecordName_);
  }
  if (from.strKey().size() > 0) {

    strKey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strKey_);
  }
  if (from.bExit() != 0) {
    set_bExit(from.bExit());
  }
  if (from.nreqid() != 0) {
    set_nreqid(from.nreqid());
  }
  if (from.nRet() != 0) {
    set_nRet(from.nRet());
  }
  if (from.eType() != 0) {
    set_eType(from.eType());
  }
}

void PackMysqlParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PackMysqlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackMysqlParam::CopyFrom(const PackMysqlParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PackMysqlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackMysqlParam::IsInitialized() const {
  return true;
}

void PackMysqlParam::InternalSwap(PackMysqlParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fieldVecList_.InternalSwap(CastToBase(&other->fieldVecList_));
  valueVecList_.InternalSwap(CastToBase(&other->valueVecList_));
  strRecordName_.Swap(&other->strRecordName_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strKey_.Swap(&other->strKey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bExit_, other->bExit_);
  swap(nreqid_, other->nreqid_);
  swap(nRet_, other->nRet_);
  swap(eType_, other->eType_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackMysqlParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PackMysqlServerInfo::InitAsDefaultInstance() {
}
class PackMysqlServerInfo::_Internal {
 public:
};

PackMysqlServerInfo::PackMysqlServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.PackMysqlServerInfo)
}
PackMysqlServerInfo::PackMysqlServerInfo(const PackMysqlServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strDBName_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strDBName().empty()) {
    strDBName_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDBName_);
  }
  strDnsIp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strDnsIp().empty()) {
    strDnsIp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDnsIp_);
  }
  strDBUser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strDBUser().empty()) {
    strDBUser_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDBUser_);
  }
  strDBPwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strDBPwd().empty()) {
    strDBPwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDBPwd_);
  }
  ::memcpy(&nRconnectTime_, &from.nRconnectTime_,
    static_cast<size_t>(reinterpret_cast<char*>(&nServerID_) -
    reinterpret_cast<char*>(&nRconnectTime_)) + sizeof(nServerID_));
  // @@protoc_insertion_point(copy_constructor:OuterMsg.PackMysqlServerInfo)
}

void PackMysqlServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PackMysqlServerInfo_OuterBase_2eproto.base);
  strDBName_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDnsIp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDBUser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDBPwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nRconnectTime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nServerID_) -
      reinterpret_cast<char*>(&nRconnectTime_)) + sizeof(nServerID_));
}

PackMysqlServerInfo::~PackMysqlServerInfo() {
  // @@protoc_insertion_point(destructor:OuterMsg.PackMysqlServerInfo)
  SharedDtor();
}

void PackMysqlServerInfo::SharedDtor() {
  strDBName_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDnsIp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDBUser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDBPwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PackMysqlServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackMysqlServerInfo& PackMysqlServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackMysqlServerInfo_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void PackMysqlServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.PackMysqlServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strDBName_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDnsIp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDBUser_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strDBPwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nRconnectTime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nServerID_) -
      reinterpret_cast<char*>(&nRconnectTime_)) + sizeof(nServerID_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PackMysqlServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 nRconnectTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nRconnectTime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nRconneCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nRconneCount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nPort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes strDBName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_strDBName(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes strDnsIp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_strDnsIp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes strDBUser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_strDBUser(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes strDBPwd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_strDBPwd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nServerID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nServerID_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PackMysqlServerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.PackMysqlServerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 nRconnectTime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nRconnectTime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nRconneCount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nRconneCount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nPort = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nPort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDBName = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strDBName()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDnsIp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strDnsIp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDBUser = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strDBUser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDBPwd = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strDBPwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nServerID = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nServerID_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.PackMysqlServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.PackMysqlServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PackMysqlServerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.PackMysqlServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nRconnectTime = 1;
  if (this->nRconnectTime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->nRconnectTime(), output);
  }

  // int64 nRconneCount = 2;
  if (this->nRconneCount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->nRconneCount(), output);
  }

  // int64 nPort = 3;
  if (this->nPort() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->nPort(), output);
  }

  // bytes strDBName = 4;
  if (this->strDBName().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->strDBName(), output);
  }

  // bytes strDnsIp = 5;
  if (this->strDnsIp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->strDnsIp(), output);
  }

  // bytes strDBUser = 6;
  if (this->strDBUser().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->strDBUser(), output);
  }

  // bytes strDBPwd = 7;
  if (this->strDBPwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->strDBPwd(), output);
  }

  // int64 nServerID = 8;
  if (this->nServerID() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->nServerID(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.PackMysqlServerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* PackMysqlServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.PackMysqlServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nRconnectTime = 1;
  if (this->nRconnectTime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->nRconnectTime(), target);
  }

  // int64 nRconneCount = 2;
  if (this->nRconneCount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->nRconneCount(), target);
  }

  // int64 nPort = 3;
  if (this->nPort() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->nPort(), target);
  }

  // bytes strDBName = 4;
  if (this->strDBName().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->strDBName(), target);
  }

  // bytes strDnsIp = 5;
  if (this->strDnsIp().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->strDnsIp(), target);
  }

  // bytes strDBUser = 6;
  if (this->strDBUser().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->strDBUser(), target);
  }

  // bytes strDBPwd = 7;
  if (this->strDBPwd().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->strDBPwd(), target);
  }

  // int64 nServerID = 8;
  if (this->nServerID() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->nServerID(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.PackMysqlServerInfo)
  return target;
}

size_t PackMysqlServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.PackMysqlServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strDBName = 4;
  if (this->strDBName().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->strDBName());
  }

  // bytes strDnsIp = 5;
  if (this->strDnsIp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->strDnsIp());
  }

  // bytes strDBUser = 6;
  if (this->strDBUser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->strDBUser());
  }

  // bytes strDBPwd = 7;
  if (this->strDBPwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->strDBPwd());
  }

  // int64 nRconnectTime = 1;
  if (this->nRconnectTime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nRconnectTime());
  }

  // int64 nRconneCount = 2;
  if (this->nRconneCount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nRconneCount());
  }

  // int64 nPort = 3;
  if (this->nPort() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nPort());
  }

  // int64 nServerID = 8;
  if (this->nServerID() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nServerID());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackMysqlServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.PackMysqlServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PackMysqlServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackMysqlServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.PackMysqlServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.PackMysqlServerInfo)
    MergeFrom(*source);
  }
}

void PackMysqlServerInfo::MergeFrom(const PackMysqlServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.PackMysqlServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strDBName().size() > 0) {

    strDBName_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDBName_);
  }
  if (from.strDnsIp().size() > 0) {

    strDnsIp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDnsIp_);
  }
  if (from.strDBUser().size() > 0) {

    strDBUser_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDBUser_);
  }
  if (from.strDBPwd().size() > 0) {

    strDBPwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strDBPwd_);
  }
  if (from.nRconnectTime() != 0) {
    set_nRconnectTime(from.nRconnectTime());
  }
  if (from.nRconneCount() != 0) {
    set_nRconneCount(from.nRconneCount());
  }
  if (from.nPort() != 0) {
    set_nPort(from.nPort());
  }
  if (from.nServerID() != 0) {
    set_nServerID(from.nServerID());
  }
}

void PackMysqlServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.PackMysqlServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackMysqlServerInfo::CopyFrom(const PackMysqlServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.PackMysqlServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackMysqlServerInfo::IsInitialized() const {
  return true;
}

void PackMysqlServerInfo::InternalSwap(PackMysqlServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  strDBName_.Swap(&other->strDBName_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strDnsIp_.Swap(&other->strDnsIp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strDBUser_.Swap(&other->strDBUser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strDBPwd_.Swap(&other->strDBPwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nRconnectTime_, other->nRconnectTime_);
  swap(nRconneCount_, other->nRconneCount_);
  swap(nPort_, other->nPort_);
  swap(nServerID_, other->nServerID_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackMysqlServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SqlExecute::InitAsDefaultInstance() {
}
class SqlExecute::_Internal {
 public:
};

SqlExecute::SqlExecute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OuterMsg.SqlExecute)
}
SqlExecute::SqlExecute(const SqlExecute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  SqlScript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.SqlScript().empty()) {
    SqlScript_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.SqlScript_);
  }
  // @@protoc_insertion_point(copy_constructor:OuterMsg.SqlExecute)
}

void SqlExecute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SqlExecute_OuterBase_2eproto.base);
  SqlScript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SqlExecute::~SqlExecute() {
  // @@protoc_insertion_point(destructor:OuterMsg.SqlExecute)
  SharedDtor();
}

void SqlExecute::SharedDtor() {
  SqlScript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SqlExecute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SqlExecute& SqlExecute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SqlExecute_OuterBase_2eproto.base);
  return *internal_default_instance();
}


void SqlExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:OuterMsg.SqlExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  SqlScript_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SqlExecute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes SqlScript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_SqlScript(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SqlExecute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:OuterMsg.SqlExecute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes SqlScript = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_SqlScript()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OuterMsg.SqlExecute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OuterMsg.SqlExecute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SqlExecute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OuterMsg.SqlExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SqlScript = 1;
  if (this->SqlScript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->SqlScript(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OuterMsg.SqlExecute)
}

::PROTOBUF_NAMESPACE_ID::uint8* SqlExecute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OuterMsg.SqlExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SqlScript = 1;
  if (this->SqlScript().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->SqlScript(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OuterMsg.SqlExecute)
  return target;
}

size_t SqlExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OuterMsg.SqlExecute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SqlScript = 1;
  if (this->SqlScript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->SqlScript());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SqlExecute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OuterMsg.SqlExecute)
  GOOGLE_DCHECK_NE(&from, this);
  const SqlExecute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SqlExecute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OuterMsg.SqlExecute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OuterMsg.SqlExecute)
    MergeFrom(*source);
  }
}

void SqlExecute::MergeFrom(const SqlExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OuterMsg.SqlExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.SqlScript().size() > 0) {

    SqlScript_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.SqlScript_);
  }
}

void SqlExecute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OuterMsg.SqlExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlExecute::CopyFrom(const SqlExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OuterMsg.SqlExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlExecute::IsInitialized() const {
  return true;
}

void SqlExecute::InternalSwap(SqlExecute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  SqlScript_.Swap(&other->SqlScript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SqlExecute::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OuterMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OuterMsg::GUID* Arena::CreateMaybeMessage< ::OuterMsg::GUID >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::GUID >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PropertyInt* Arena::CreateMaybeMessage< ::OuterMsg::PropertyInt >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PropertyInt >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PropertyFloat* Arena::CreateMaybeMessage< ::OuterMsg::PropertyFloat >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PropertyFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PropertyString* Arena::CreateMaybeMessage< ::OuterMsg::PropertyString >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PropertyString >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PropertyBytes* Arena::CreateMaybeMessage< ::OuterMsg::PropertyBytes >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PropertyBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PropertyObject* Arena::CreateMaybeMessage< ::OuterMsg::PropertyObject >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PropertyObject >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PropertyList* Arena::CreateMaybeMessage< ::OuterMsg::PropertyList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ObjectPropertyList* Arena::CreateMaybeMessage< ::OuterMsg::ObjectPropertyList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ObjectPropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RecordInt* Arena::CreateMaybeMessage< ::OuterMsg::RecordInt >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RecordInt >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RecordFloat* Arena::CreateMaybeMessage< ::OuterMsg::RecordFloat >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RecordFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RecordString* Arena::CreateMaybeMessage< ::OuterMsg::RecordString >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RecordString >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RecordObject* Arena::CreateMaybeMessage< ::OuterMsg::RecordObject >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RecordObject >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RecordRow* Arena::CreateMaybeMessage< ::OuterMsg::RecordRow >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RecordRow >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::Record* Arena::CreateMaybeMessage< ::OuterMsg::Record >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::RecordList* Arena::CreateMaybeMessage< ::OuterMsg::RecordList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::RecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ObjectRecordList* Arena::CreateMaybeMessage< ::OuterMsg::ObjectRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ObjectRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::ObjectDataPack* Arena::CreateMaybeMessage< ::OuterMsg::ObjectDataPack >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::ObjectDataPack >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PBData* Arena::CreateMaybeMessage< ::OuterMsg::PBData >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PBData >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PBDataList* Arena::CreateMaybeMessage< ::OuterMsg::PBDataList >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PBDataList >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PackMysqlParam* Arena::CreateMaybeMessage< ::OuterMsg::PackMysqlParam >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PackMysqlParam >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::PackMysqlServerInfo* Arena::CreateMaybeMessage< ::OuterMsg::PackMysqlServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::PackMysqlServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OuterMsg::SqlExecute* Arena::CreateMaybeMessage< ::OuterMsg::SqlExecute >(Arena* arena) {
  return Arena::CreateInternal< ::OuterMsg::SqlExecute >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
