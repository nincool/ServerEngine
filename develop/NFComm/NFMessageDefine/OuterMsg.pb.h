// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OuterMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OuterMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "OuterBase.pb.h"
#include "NFDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OuterMsg_2eproto LIBPROTOC_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct_OuterMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[92]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBPROTOC_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OuterMsg_2eproto;
namespace OuterMsg {
class AckConnectWorldResult;
class AckConnectWorldResultDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckConnectWorldResultDefaultTypeInternal _AckConnectWorldResult_default_instance_;
class AckEventResult;
class AckEventResultDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckEventResultDefaultTypeInternal _AckEventResult_default_instance_;
class AckQueryLetter;
class AckQueryLetterDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckQueryLetterDefaultTypeInternal _AckQueryLetter_default_instance_;
class AckResult;
class AckResultDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckResultDefaultTypeInternal _AckResult_default_instance_;
class AckRoleLiteInfoList;
class AckRoleLiteInfoListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckRoleLiteInfoListDefaultTypeInternal _AckRoleLiteInfoList_default_instance_;
class AckWorldList;
class AckWorldListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckWorldListDefaultTypeInternal _AckWorldList_default_instance_;
class AttachData;
class AttachDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern AttachDataDefaultTypeInternal _AttachData_default_instance_;
class ChatAddPlayerToRoom;
class ChatAddPlayerToRoomDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatAddPlayerToRoomDefaultTypeInternal _ChatAddPlayerToRoom_default_instance_;
class ChatClientData;
class ChatClientDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatClientDataDefaultTypeInternal _ChatClientData_default_instance_;
class ChatMsgPlayer;
class ChatMsgPlayerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatMsgPlayerDefaultTypeInternal _ChatMsgPlayer_default_instance_;
class ChatMsgRoom;
class ChatMsgRoomDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatMsgRoomDefaultTypeInternal _ChatMsgRoom_default_instance_;
class ChatPlayerBanned;
class ChatPlayerBannedDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatPlayerBannedDefaultTypeInternal _ChatPlayerBanned_default_instance_;
class ChatPlayerInfo;
class ChatPlayerInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatPlayerInfoDefaultTypeInternal _ChatPlayerInfo_default_instance_;
class ChatRecording;
class ChatRecordingDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatRecordingDefaultTypeInternal _ChatRecording_default_instance_;
class ChatRemovePlayerToRoom;
class ChatRemovePlayerToRoomDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatRemovePlayerToRoomDefaultTypeInternal _ChatRemovePlayerToRoom_default_instance_;
class ChatRemoveRoom;
class ChatRemoveRoomDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatRemoveRoomDefaultTypeInternal _ChatRemoveRoom_default_instance_;
class ClientConnectInfo;
class ClientConnectInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ClientConnectInfoDefaultTypeInternal _ClientConnectInfo_default_instance_;
class ColdDataStore;
class ColdDataStoreDefaultTypeInternal;
LIBPROTOC_EXPORT extern ColdDataStoreDefaultTypeInternal _ColdDataStore_default_instance_;
class CommandMsg;
class CommandMsgDefaultTypeInternal;
LIBPROTOC_EXPORT extern CommandMsgDefaultTypeInternal _CommandMsg_default_instance_;
class ExtraMsg;
class ExtraMsgDefaultTypeInternal;
LIBPROTOC_EXPORT extern ExtraMsgDefaultTypeInternal _ExtraMsg_default_instance_;
class GuidName;
class GuidNameDefaultTypeInternal;
LIBPROTOC_EXPORT extern GuidNameDefaultTypeInternal _GuidName_default_instance_;
class GuidNameList;
class GuidNameListDefaultTypeInternal;
LIBPROTOC_EXPORT extern GuidNameListDefaultTypeInternal _GuidNameList_default_instance_;
class LetterData;
class LetterDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern LetterDataDefaultTypeInternal _LetterData_default_instance_;
class LetterDataPack;
class LetterDataPackDefaultTypeInternal;
LIBPROTOC_EXPORT extern LetterDataPackDefaultTypeInternal _LetterDataPack_default_instance_;
class LogToDB;
class LogToDBDefaultTypeInternal;
LIBPROTOC_EXPORT extern LogToDBDefaultTypeInternal _LogToDB_default_instance_;
class MsgBase;
class MsgBaseDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MsgEmpty;
class MsgEmptyDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgEmptyDefaultTypeInternal _MsgEmpty_default_instance_;
class MsgReply;
class MsgReplyDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgReplyDefaultTypeInternal _MsgReply_default_instance_;
class NetTest;
class NetTestDefaultTypeInternal;
LIBPROTOC_EXPORT extern NetTestDefaultTypeInternal _NetTest_default_instance_;
class ObjectVisRecord;
class ObjectVisRecordDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectVisRecordDefaultTypeInternal _ObjectVisRecord_default_instance_;
class OptServerID;
class OptServerIDDefaultTypeInternal;
LIBPROTOC_EXPORT extern OptServerIDDefaultTypeInternal _OptServerID_default_instance_;
class PlayerRename;
class PlayerRenameDefaultTypeInternal;
LIBPROTOC_EXPORT extern PlayerRenameDefaultTypeInternal _PlayerRename_default_instance_;
class PubNameData;
class PubNameDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern PubNameDataDefaultTypeInternal _PubNameData_default_instance_;
class PubOpData;
class PubOpDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern PubOpDataDefaultTypeInternal _PubOpData_default_instance_;
class RankListCreate;
class RankListCreateDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListCreateDefaultTypeInternal _RankListCreate_default_instance_;
class RankListCreateAck;
class RankListCreateAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListCreateAckDefaultTypeInternal _RankListCreateAck_default_instance_;
class RankListData;
class RankListDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDataDefaultTypeInternal _RankListData_default_instance_;
class RankListDataAck;
class RankListDataAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDataAckDefaultTypeInternal _RankListDataAck_default_instance_;
class RankListDataAck_MapDataEntry_DoNotUse;
class RankListDataAck_MapDataEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDataAck_MapDataEntry_DoNotUseDefaultTypeInternal _RankListDataAck_MapDataEntry_DoNotUse_default_instance_;
class RankListDataArray;
class RankListDataArrayDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDataArrayDefaultTypeInternal _RankListDataArray_default_instance_;
class RankListDataArrayAck;
class RankListDataArrayAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDataArrayAckDefaultTypeInternal _RankListDataArrayAck_default_instance_;
class RankListDataArrayAck_RankData;
class RankListDataArrayAck_RankDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDataArrayAck_RankDataDefaultTypeInternal _RankListDataArrayAck_RankData_default_instance_;
class RankListData_MapDataEntry_DoNotUse;
class RankListData_MapDataEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListData_MapDataEntry_DoNotUseDefaultTypeInternal _RankListData_MapDataEntry_DoNotUse_default_instance_;
class RankListDelete;
class RankListDeleteDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDeleteDefaultTypeInternal _RankListDelete_default_instance_;
class RankListDeleteAck;
class RankListDeleteAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListDeleteAckDefaultTypeInternal _RankListDeleteAck_default_instance_;
class RankListInit;
class RankListInitDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListInitDefaultTypeInternal _RankListInit_default_instance_;
class RankListRange;
class RankListRangeDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRangeDefaultTypeInternal _RankListRange_default_instance_;
class RankListRangeAck;
class RankListRangeAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRangeAckDefaultTypeInternal _RankListRangeAck_default_instance_;
class RankListRangeData;
class RankListRangeDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRangeDataDefaultTypeInternal _RankListRangeData_default_instance_;
class RankListRangeData_MapDataEntry_DoNotUse;
class RankListRangeData_MapDataEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRangeData_MapDataEntry_DoNotUseDefaultTypeInternal _RankListRangeData_MapDataEntry_DoNotUse_default_instance_;
class RankListRank;
class RankListRankDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRankDefaultTypeInternal _RankListRank_default_instance_;
class RankListRankAck;
class RankListRankAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRankAckDefaultTypeInternal _RankListRankAck_default_instance_;
class RankListRankAck_MapDataEntry_DoNotUse;
class RankListRankAck_MapDataEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRankAck_MapDataEntry_DoNotUseDefaultTypeInternal _RankListRankAck_MapDataEntry_DoNotUse_default_instance_;
class RankListRankArray;
class RankListRankArrayDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRankArrayDefaultTypeInternal _RankListRankArray_default_instance_;
class RankListRankArrayAck;
class RankListRankArrayAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListRankArrayAckDefaultTypeInternal _RankListRankArrayAck_default_instance_;
class RankListScore;
class RankListScoreDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListScoreDefaultTypeInternal _RankListScore_default_instance_;
class RankListScoreAck;
class RankListScoreAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListScoreAckDefaultTypeInternal _RankListScoreAck_default_instance_;
class RankListSwapRank;
class RankListSwapRankDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListSwapRankDefaultTypeInternal _RankListSwapRank_default_instance_;
class RankListSwapRankAck;
class RankListSwapRankAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListSwapRankAckDefaultTypeInternal _RankListSwapRankAck_default_instance_;
class RankListUpdate;
class RankListUpdateDefaultTypeInternal;
LIBPROTOC_EXPORT extern RankListUpdateDefaultTypeInternal _RankListUpdate_default_instance_;
class ReqAccountLogin;
class ReqAccountLoginDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAccountLoginDefaultTypeInternal _ReqAccountLogin_default_instance_;
class ReqAccountLogout;
class ReqAccountLogoutDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAccountLogoutDefaultTypeInternal _ReqAccountLogout_default_instance_;
class ReqAckEnterGameSuccess;
class ReqAckEnterGameSuccessDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckEnterGameSuccessDefaultTypeInternal _ReqAckEnterGameSuccess_default_instance_;
class ReqConnectWorld;
class ReqConnectWorldDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqConnectWorldDefaultTypeInternal _ReqConnectWorld_default_instance_;
class ReqCreateRole;
class ReqCreateRoleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCreateRoleDefaultTypeInternal _ReqCreateRole_default_instance_;
class ReqDeleteLetter;
class ReqDeleteLetterDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqDeleteLetterDefaultTypeInternal _ReqDeleteLetter_default_instance_;
class ReqDeleteRole;
class ReqDeleteRoleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqDeleteRoleDefaultTypeInternal _ReqDeleteRole_default_instance_;
class ReqEnterGameServer;
class ReqEnterGameServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqEnterGameServerDefaultTypeInternal _ReqEnterGameServer_default_instance_;
class ReqLeaveGameServer;
class ReqLeaveGameServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
class ReqLookLetter;
class ReqLookLetterDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqLookLetterDefaultTypeInternal _ReqLookLetter_default_instance_;
class ReqRoleList;
class ReqRoleListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqRoleListDefaultTypeInternal _ReqRoleList_default_instance_;
class RoleLiteInfo;
class RoleLiteInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern RoleLiteInfoDefaultTypeInternal _RoleLiteInfo_default_instance_;
class RoleOfflineNotify;
class RoleOfflineNotifyDefaultTypeInternal;
LIBPROTOC_EXPORT extern RoleOfflineNotifyDefaultTypeInternal _RoleOfflineNotify_default_instance_;
class RoleOnlineNotify;
class RoleOnlineNotifyDefaultTypeInternal;
LIBPROTOC_EXPORT extern RoleOnlineNotifyDefaultTypeInternal _RoleOnlineNotify_default_instance_;
class ServerConnectInfo;
class ServerConnectInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerConnectInfoDefaultTypeInternal _ServerConnectInfo_default_instance_;
class ServerConnectList;
class ServerConnectListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerConnectListDefaultTypeInternal _ServerConnectList_default_instance_;
class ServerHeartBeat;
class ServerHeartBeatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerHeartBeatDefaultTypeInternal _ServerHeartBeat_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfoReport;
class ServerInfoReportDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
class ServerInfoReportList;
class ServerInfoReportListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
class ServerInfoReportList_ServerListEntry_DoNotUse;
class ServerInfoReportList_ServerListEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoReportList_ServerListEntry_DoNotUseDefaultTypeInternal _ServerInfoReportList_ServerListEntry_DoNotUse_default_instance_;
class ViewAdd;
class ViewAddDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewAddDefaultTypeInternal _ViewAdd_default_instance_;
class ViewCellProperty;
class ViewCellPropertyDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewCellPropertyDefaultTypeInternal _ViewCellProperty_default_instance_;
class ViewCellRecord;
class ViewCellRecordDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewCellRecordDefaultTypeInternal _ViewCellRecord_default_instance_;
class ViewChange;
class ViewChangeDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewChangeDefaultTypeInternal _ViewChange_default_instance_;
class ViewClose;
class ViewCloseDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewCloseDefaultTypeInternal _ViewClose_default_instance_;
class ViewCreate;
class ViewCreateDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewCreateDefaultTypeInternal _ViewCreate_default_instance_;
class ViewProperty;
class ViewPropertyDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewPropertyDefaultTypeInternal _ViewProperty_default_instance_;
class ViewRecord;
class ViewRecordDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewRecordDefaultTypeInternal _ViewRecord_default_instance_;
class ViewRemove;
class ViewRemoveDefaultTypeInternal;
LIBPROTOC_EXPORT extern ViewRemoveDefaultTypeInternal _ViewRemove_default_instance_;
class WorldParam;
class WorldParamDefaultTypeInternal;
LIBPROTOC_EXPORT extern WorldParamDefaultTypeInternal _WorldParam_default_instance_;
class WorldParam_ExtraServerEntry_DoNotUse;
class WorldParam_ExtraServerEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern WorldParam_ExtraServerEntry_DoNotUseDefaultTypeInternal _WorldParam_ExtraServerEntry_DoNotUse_default_instance_;
}  // namespace OuterMsg
PROTOBUF_NAMESPACE_OPEN
template<> LIBPROTOC_EXPORT ::OuterMsg::AckConnectWorldResult* Arena::CreateMaybeMessage<::OuterMsg::AckConnectWorldResult>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::AckEventResult* Arena::CreateMaybeMessage<::OuterMsg::AckEventResult>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::AckQueryLetter* Arena::CreateMaybeMessage<::OuterMsg::AckQueryLetter>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::AckResult* Arena::CreateMaybeMessage<::OuterMsg::AckResult>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::AckRoleLiteInfoList* Arena::CreateMaybeMessage<::OuterMsg::AckRoleLiteInfoList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::AckWorldList* Arena::CreateMaybeMessage<::OuterMsg::AckWorldList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::AttachData* Arena::CreateMaybeMessage<::OuterMsg::AttachData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatAddPlayerToRoom* Arena::CreateMaybeMessage<::OuterMsg::ChatAddPlayerToRoom>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatClientData* Arena::CreateMaybeMessage<::OuterMsg::ChatClientData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatMsgPlayer* Arena::CreateMaybeMessage<::OuterMsg::ChatMsgPlayer>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatMsgRoom* Arena::CreateMaybeMessage<::OuterMsg::ChatMsgRoom>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatPlayerBanned* Arena::CreateMaybeMessage<::OuterMsg::ChatPlayerBanned>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatPlayerInfo* Arena::CreateMaybeMessage<::OuterMsg::ChatPlayerInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatRecording* Arena::CreateMaybeMessage<::OuterMsg::ChatRecording>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatRemovePlayerToRoom* Arena::CreateMaybeMessage<::OuterMsg::ChatRemovePlayerToRoom>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ChatRemoveRoom* Arena::CreateMaybeMessage<::OuterMsg::ChatRemoveRoom>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ClientConnectInfo* Arena::CreateMaybeMessage<::OuterMsg::ClientConnectInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ColdDataStore* Arena::CreateMaybeMessage<::OuterMsg::ColdDataStore>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::CommandMsg* Arena::CreateMaybeMessage<::OuterMsg::CommandMsg>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ExtraMsg* Arena::CreateMaybeMessage<::OuterMsg::ExtraMsg>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::GuidName* Arena::CreateMaybeMessage<::OuterMsg::GuidName>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::GuidNameList* Arena::CreateMaybeMessage<::OuterMsg::GuidNameList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::LetterData* Arena::CreateMaybeMessage<::OuterMsg::LetterData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::LetterDataPack* Arena::CreateMaybeMessage<::OuterMsg::LetterDataPack>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::LogToDB* Arena::CreateMaybeMessage<::OuterMsg::LogToDB>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::MsgBase* Arena::CreateMaybeMessage<::OuterMsg::MsgBase>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::MsgEmpty* Arena::CreateMaybeMessage<::OuterMsg::MsgEmpty>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::MsgReply* Arena::CreateMaybeMessage<::OuterMsg::MsgReply>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::NetTest* Arena::CreateMaybeMessage<::OuterMsg::NetTest>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ObjectVisRecord* Arena::CreateMaybeMessage<::OuterMsg::ObjectVisRecord>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::OptServerID* Arena::CreateMaybeMessage<::OuterMsg::OptServerID>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PlayerRename* Arena::CreateMaybeMessage<::OuterMsg::PlayerRename>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PubNameData* Arena::CreateMaybeMessage<::OuterMsg::PubNameData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PubOpData* Arena::CreateMaybeMessage<::OuterMsg::PubOpData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListCreate* Arena::CreateMaybeMessage<::OuterMsg::RankListCreate>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListCreateAck* Arena::CreateMaybeMessage<::OuterMsg::RankListCreateAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListData* Arena::CreateMaybeMessage<::OuterMsg::RankListData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDataAck* Arena::CreateMaybeMessage<::OuterMsg::RankListDataAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterMsg::RankListDataAck_MapDataEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDataArray* Arena::CreateMaybeMessage<::OuterMsg::RankListDataArray>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDataArrayAck* Arena::CreateMaybeMessage<::OuterMsg::RankListDataArrayAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDataArrayAck_RankData* Arena::CreateMaybeMessage<::OuterMsg::RankListDataArrayAck_RankData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListData_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterMsg::RankListData_MapDataEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDelete* Arena::CreateMaybeMessage<::OuterMsg::RankListDelete>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListDeleteAck* Arena::CreateMaybeMessage<::OuterMsg::RankListDeleteAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListInit* Arena::CreateMaybeMessage<::OuterMsg::RankListInit>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRange* Arena::CreateMaybeMessage<::OuterMsg::RankListRange>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRangeAck* Arena::CreateMaybeMessage<::OuterMsg::RankListRangeAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRangeData* Arena::CreateMaybeMessage<::OuterMsg::RankListRangeData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterMsg::RankListRangeData_MapDataEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRank* Arena::CreateMaybeMessage<::OuterMsg::RankListRank>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRankAck* Arena::CreateMaybeMessage<::OuterMsg::RankListRankAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterMsg::RankListRankAck_MapDataEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRankArray* Arena::CreateMaybeMessage<::OuterMsg::RankListRankArray>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListRankArrayAck* Arena::CreateMaybeMessage<::OuterMsg::RankListRankArrayAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListScore* Arena::CreateMaybeMessage<::OuterMsg::RankListScore>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListScoreAck* Arena::CreateMaybeMessage<::OuterMsg::RankListScoreAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListSwapRank* Arena::CreateMaybeMessage<::OuterMsg::RankListSwapRank>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListSwapRankAck* Arena::CreateMaybeMessage<::OuterMsg::RankListSwapRankAck>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RankListUpdate* Arena::CreateMaybeMessage<::OuterMsg::RankListUpdate>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqAccountLogin* Arena::CreateMaybeMessage<::OuterMsg::ReqAccountLogin>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqAccountLogout* Arena::CreateMaybeMessage<::OuterMsg::ReqAccountLogout>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage<::OuterMsg::ReqAckEnterGameSuccess>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqConnectWorld* Arena::CreateMaybeMessage<::OuterMsg::ReqConnectWorld>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqCreateRole* Arena::CreateMaybeMessage<::OuterMsg::ReqCreateRole>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqDeleteLetter* Arena::CreateMaybeMessage<::OuterMsg::ReqDeleteLetter>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqDeleteRole* Arena::CreateMaybeMessage<::OuterMsg::ReqDeleteRole>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqEnterGameServer* Arena::CreateMaybeMessage<::OuterMsg::ReqEnterGameServer>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage<::OuterMsg::ReqLeaveGameServer>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqLookLetter* Arena::CreateMaybeMessage<::OuterMsg::ReqLookLetter>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ReqRoleList* Arena::CreateMaybeMessage<::OuterMsg::ReqRoleList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RoleLiteInfo* Arena::CreateMaybeMessage<::OuterMsg::RoleLiteInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RoleOfflineNotify* Arena::CreateMaybeMessage<::OuterMsg::RoleOfflineNotify>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RoleOnlineNotify* Arena::CreateMaybeMessage<::OuterMsg::RoleOnlineNotify>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerConnectInfo* Arena::CreateMaybeMessage<::OuterMsg::ServerConnectInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerConnectList* Arena::CreateMaybeMessage<::OuterMsg::ServerConnectList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerHeartBeat* Arena::CreateMaybeMessage<::OuterMsg::ServerHeartBeat>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerInfo* Arena::CreateMaybeMessage<::OuterMsg::ServerInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerInfoReport* Arena::CreateMaybeMessage<::OuterMsg::ServerInfoReport>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerInfoReportList* Arena::CreateMaybeMessage<::OuterMsg::ServerInfoReportList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterMsg::ServerInfoReportList_ServerListEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewAdd* Arena::CreateMaybeMessage<::OuterMsg::ViewAdd>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewCellProperty* Arena::CreateMaybeMessage<::OuterMsg::ViewCellProperty>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewCellRecord* Arena::CreateMaybeMessage<::OuterMsg::ViewCellRecord>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewChange* Arena::CreateMaybeMessage<::OuterMsg::ViewChange>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewClose* Arena::CreateMaybeMessage<::OuterMsg::ViewClose>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewCreate* Arena::CreateMaybeMessage<::OuterMsg::ViewCreate>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewProperty* Arena::CreateMaybeMessage<::OuterMsg::ViewProperty>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewRecord* Arena::CreateMaybeMessage<::OuterMsg::ViewRecord>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ViewRemove* Arena::CreateMaybeMessage<::OuterMsg::ViewRemove>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::WorldParam* Arena::CreateMaybeMessage<::OuterMsg::WorldParam>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterMsg::WorldParam_ExtraServerEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OuterMsg {

enum GuidNameList_State : int {
  GuidNameList_State_ADD = 0,
  GuidNameList_State_INIT_ADD = 1,
  GuidNameList_State_INIT_FINISH = 2,
  GuidNameList_State_GuidNameList_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GuidNameList_State_GuidNameList_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBPROTOC_EXPORT bool GuidNameList_State_IsValid(int value);
constexpr GuidNameList_State GuidNameList_State_State_MIN = GuidNameList_State_ADD;
constexpr GuidNameList_State GuidNameList_State_State_MAX = GuidNameList_State_INIT_FINISH;
constexpr int GuidNameList_State_State_ARRAYSIZE = GuidNameList_State_State_MAX + 1;

LIBPROTOC_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuidNameList_State_descriptor();
template<typename T>
inline const std::string& GuidNameList_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GuidNameList_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GuidNameList_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GuidNameList_State_descriptor(), enum_t_value);
}
inline bool GuidNameList_State_Parse(
    const std::string& name, GuidNameList_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GuidNameList_State>(
    GuidNameList_State_descriptor(), name, value);
}
enum ServerConnectList_EOptType : int {
  ServerConnectList_EOptType_OPT_ADD = 0,
  ServerConnectList_EOptType_OPT_REMOVE = 1,
  ServerConnectList_EOptType_ServerConnectList_EOptType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerConnectList_EOptType_ServerConnectList_EOptType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBPROTOC_EXPORT bool ServerConnectList_EOptType_IsValid(int value);
constexpr ServerConnectList_EOptType ServerConnectList_EOptType_EOptType_MIN = ServerConnectList_EOptType_OPT_ADD;
constexpr ServerConnectList_EOptType ServerConnectList_EOptType_EOptType_MAX = ServerConnectList_EOptType_OPT_REMOVE;
constexpr int ServerConnectList_EOptType_EOptType_ARRAYSIZE = ServerConnectList_EOptType_EOptType_MAX + 1;

LIBPROTOC_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConnectList_EOptType_descriptor();
template<typename T>
inline const std::string& ServerConnectList_EOptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerConnectList_EOptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerConnectList_EOptType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerConnectList_EOptType_descriptor(), enum_t_value);
}
inline bool ServerConnectList_EOptType_Parse(
    const std::string& name, ServerConnectList_EOptType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerConnectList_EOptType>(
    ServerConnectList_EOptType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT MsgEmpty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.MsgEmpty) */ {
 public:
  MsgEmpty();
  virtual ~MsgEmpty();

  MsgEmpty(const MsgEmpty& from);
  MsgEmpty(MsgEmpty&& from) noexcept
    : MsgEmpty() {
    *this = ::std::move(from);
  }

  inline MsgEmpty& operator=(const MsgEmpty& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgEmpty& operator=(MsgEmpty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgEmpty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgEmpty* internal_default_instance() {
    return reinterpret_cast<const MsgEmpty*>(
               &_MsgEmpty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgEmpty& a, MsgEmpty& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgEmpty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgEmpty* New() const final {
    return CreateMaybeMessage<MsgEmpty>(nullptr);
  }

  MsgEmpty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgEmpty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgEmpty& from);
  void MergeFrom(const MsgEmpty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgEmpty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.MsgEmpty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OuterMsg.MsgEmpty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.MsgReply) */ {
 public:
  MsgReply();
  virtual ~MsgReply();

  MsgReply(const MsgReply& from);
  MsgReply(MsgReply&& from) noexcept
    : MsgReply() {
    *this = ::std::move(from);
  }

  inline MsgReply& operator=(const MsgReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgReply& operator=(MsgReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgReply* internal_default_instance() {
    return reinterpret_cast<const MsgReply*>(
               &_MsgReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgReply& a, MsgReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgReply* New() const final {
    return CreateMaybeMessage<MsgReply>(nullptr);
  }

  MsgReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgReply& from);
  void MergeFrom(const MsgReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.MsgReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraDataFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // bytes extra_data = 2;
  void clear_extra_data();
  const std::string& extra_data() const;
  void set_extra_data(const std::string& value);
  void set_extra_data(std::string&& value);
  void set_extra_data(const char* value);
  void set_extra_data(const void* value, size_t size);
  std::string* mutable_extra_data();
  std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.MsgReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewCreate) */ {
 public:
  ViewCreate();
  virtual ~ViewCreate();

  ViewCreate(const ViewCreate& from);
  ViewCreate(ViewCreate&& from) noexcept
    : ViewCreate() {
    *this = ::std::move(from);
  }

  inline ViewCreate& operator=(const ViewCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewCreate& operator=(ViewCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewCreate* internal_default_instance() {
    return reinterpret_cast<const ViewCreate*>(
               &_ViewCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ViewCreate& a, ViewCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewCreate* New() const final {
    return CreateMaybeMessage<ViewCreate>(nullptr);
  }

  ViewCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewCreate& from);
  void MergeFrom(const ViewCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kViewIdFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // .OuterMsg.PropertyList property_list = 3;
  bool has_property_list() const;
  void clear_property_list();
  const ::OuterMsg::PropertyList& property_list() const;
  ::OuterMsg::PropertyList* release_property_list();
  ::OuterMsg::PropertyList* mutable_property_list();
  void set_allocated_property_list(::OuterMsg::PropertyList* property_list);

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 capacity = 2;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::PropertyList* property_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewAdd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewAdd) */ {
 public:
  ViewAdd();
  virtual ~ViewAdd();

  ViewAdd(const ViewAdd& from);
  ViewAdd(ViewAdd&& from) noexcept
    : ViewAdd() {
    *this = ::std::move(from);
  }

  inline ViewAdd& operator=(const ViewAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewAdd& operator=(ViewAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewAdd* internal_default_instance() {
    return reinterpret_cast<const ViewAdd*>(
               &_ViewAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ViewAdd& a, ViewAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewAdd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewAdd* New() const final {
    return CreateMaybeMessage<ViewAdd>(nullptr);
  }

  ViewAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewAdd& from);
  void MergeFrom(const ViewAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewAdd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kViewIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .OuterMsg.PropertyList property_list = 3;
  bool has_property_list() const;
  void clear_property_list();
  const ::OuterMsg::PropertyList& property_list() const;
  ::OuterMsg::PropertyList* release_property_list();
  ::OuterMsg::PropertyList* mutable_property_list();
  void set_allocated_property_list(::OuterMsg::PropertyList* property_list);

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewAdd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::PropertyList* property_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewRemove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewRemove) */ {
 public:
  ViewRemove();
  virtual ~ViewRemove();

  ViewRemove(const ViewRemove& from);
  ViewRemove(ViewRemove&& from) noexcept
    : ViewRemove() {
    *this = ::std::move(from);
  }

  inline ViewRemove& operator=(const ViewRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewRemove& operator=(ViewRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewRemove* internal_default_instance() {
    return reinterpret_cast<const ViewRemove*>(
               &_ViewRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ViewRemove& a, ViewRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewRemove* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewRemove* New() const final {
    return CreateMaybeMessage<ViewRemove>(nullptr);
  }

  ViewRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewRemove& from);
  void MergeFrom(const ViewRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewRemove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewRemove)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewChange) */ {
 public:
  ViewChange();
  virtual ~ViewChange();

  ViewChange(const ViewChange& from);
  ViewChange(ViewChange&& from) noexcept
    : ViewChange() {
    *this = ::std::move(from);
  }

  inline ViewChange& operator=(const ViewChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewChange& operator=(ViewChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewChange* internal_default_instance() {
    return reinterpret_cast<const ViewChange*>(
               &_ViewChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ViewChange& a, ViewChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewChange* New() const final {
    return CreateMaybeMessage<ViewChange>(nullptr);
  }

  ViewChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewChange& from);
  void MergeFrom(const ViewChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 1,
    kOldIndexFieldNumber = 2,
    kNewIndexFieldNumber = 3,
  };
  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 old_index = 2;
  void clear_old_index();
  ::PROTOBUF_NAMESPACE_ID::int32 old_index() const;
  void set_old_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 new_index = 3;
  void clear_new_index();
  ::PROTOBUF_NAMESPACE_ID::int32 new_index() const;
  void set_new_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewClose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewClose) */ {
 public:
  ViewClose();
  virtual ~ViewClose();

  ViewClose(const ViewClose& from);
  ViewClose(ViewClose&& from) noexcept
    : ViewClose() {
    *this = ::std::move(from);
  }

  inline ViewClose& operator=(const ViewClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewClose& operator=(ViewClose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewClose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewClose* internal_default_instance() {
    return reinterpret_cast<const ViewClose*>(
               &_ViewClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ViewClose& a, ViewClose& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewClose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewClose* New() const final {
    return CreateMaybeMessage<ViewClose>(nullptr);
  }

  ViewClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewClose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewClose& from);
  void MergeFrom(const ViewClose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewClose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewClose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 1,
  };
  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewClose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewProperty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewProperty) */ {
 public:
  ViewProperty();
  virtual ~ViewProperty();

  ViewProperty(const ViewProperty& from);
  ViewProperty(ViewProperty&& from) noexcept
    : ViewProperty() {
    *this = ::std::move(from);
  }

  inline ViewProperty& operator=(const ViewProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewProperty& operator=(ViewProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewProperty* internal_default_instance() {
    return reinterpret_cast<const ViewProperty*>(
               &_ViewProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ViewProperty& a, ViewProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewProperty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewProperty* New() const final {
    return CreateMaybeMessage<ViewProperty>(nullptr);
  }

  ViewProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewProperty& from);
  void MergeFrom(const ViewProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewProperty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kViewIdFieldNumber = 1,
  };
  // .OuterMsg.PropertyList property_list = 2;
  bool has_property_list() const;
  void clear_property_list();
  const ::OuterMsg::PropertyList& property_list() const;
  ::OuterMsg::PropertyList* release_property_list();
  ::OuterMsg::PropertyList* mutable_property_list();
  void set_allocated_property_list(::OuterMsg::PropertyList* property_list);

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewProperty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::PropertyList* property_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewRecord) */ {
 public:
  ViewRecord();
  virtual ~ViewRecord();

  ViewRecord(const ViewRecord& from);
  ViewRecord(ViewRecord&& from) noexcept
    : ViewRecord() {
    *this = ::std::move(from);
  }

  inline ViewRecord& operator=(const ViewRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewRecord& operator=(ViewRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewRecord* internal_default_instance() {
    return reinterpret_cast<const ViewRecord*>(
               &_ViewRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ViewRecord& a, ViewRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewRecord* New() const final {
    return CreateMaybeMessage<ViewRecord>(nullptr);
  }

  ViewRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewRecord& from);
  void MergeFrom(const ViewRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 3,
    kViewIdFieldNumber = 1,
    kOperaTypeFieldNumber = 2,
  };
  // .OuterMsg.RecordList record_list = 3;
  bool has_record_list() const;
  void clear_record_list();
  const ::OuterMsg::RecordList& record_list() const;
  ::OuterMsg::RecordList* release_record_list();
  ::OuterMsg::RecordList* mutable_record_list();
  void set_allocated_record_list(::OuterMsg::RecordList* record_list);

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.RecordOperatorType opera_type = 2;
  void clear_opera_type();
  ::OuterMsg::RecordOperatorType opera_type() const;
  void set_opera_type(::OuterMsg::RecordOperatorType value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::RecordList* record_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  int opera_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewCellProperty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewCellProperty) */ {
 public:
  ViewCellProperty();
  virtual ~ViewCellProperty();

  ViewCellProperty(const ViewCellProperty& from);
  ViewCellProperty(ViewCellProperty&& from) noexcept
    : ViewCellProperty() {
    *this = ::std::move(from);
  }

  inline ViewCellProperty& operator=(const ViewCellProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewCellProperty& operator=(ViewCellProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewCellProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewCellProperty* internal_default_instance() {
    return reinterpret_cast<const ViewCellProperty*>(
               &_ViewCellProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ViewCellProperty& a, ViewCellProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewCellProperty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewCellProperty* New() const final {
    return CreateMaybeMessage<ViewCellProperty>(nullptr);
  }

  ViewCellProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewCellProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewCellProperty& from);
  void MergeFrom(const ViewCellProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewCellProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewCellProperty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kViewIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .OuterMsg.PropertyList property_list = 3;
  bool has_property_list() const;
  void clear_property_list();
  const ::OuterMsg::PropertyList& property_list() const;
  ::OuterMsg::PropertyList* release_property_list();
  ::OuterMsg::PropertyList* mutable_property_list();
  void set_allocated_property_list(::OuterMsg::PropertyList* property_list);

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewCellProperty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::PropertyList* property_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ViewCellRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ViewCellRecord) */ {
 public:
  ViewCellRecord();
  virtual ~ViewCellRecord();

  ViewCellRecord(const ViewCellRecord& from);
  ViewCellRecord(ViewCellRecord&& from) noexcept
    : ViewCellRecord() {
    *this = ::std::move(from);
  }

  inline ViewCellRecord& operator=(const ViewCellRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewCellRecord& operator=(ViewCellRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewCellRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewCellRecord* internal_default_instance() {
    return reinterpret_cast<const ViewCellRecord*>(
               &_ViewCellRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ViewCellRecord& a, ViewCellRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewCellRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewCellRecord* New() const final {
    return CreateMaybeMessage<ViewCellRecord>(nullptr);
  }

  ViewCellRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewCellRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewCellRecord& from);
  void MergeFrom(const ViewCellRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewCellRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ViewCellRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 4,
    kViewIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kOperaTypeFieldNumber = 3,
  };
  // .OuterMsg.RecordList record_list = 4;
  bool has_record_list() const;
  void clear_record_list();
  const ::OuterMsg::RecordList& record_list() const;
  ::OuterMsg::RecordList* release_record_list();
  ::OuterMsg::RecordList* mutable_record_list();
  void set_allocated_record_list(::OuterMsg::RecordList* record_list);

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.RecordOperatorType opera_type = 3;
  void clear_opera_type();
  ::OuterMsg::RecordOperatorType opera_type() const;
  void set_opera_type(::OuterMsg::RecordOperatorType value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ViewCellRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::RecordList* record_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  int opera_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectVisRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ObjectVisRecord) */ {
 public:
  ObjectVisRecord();
  virtual ~ObjectVisRecord();

  ObjectVisRecord(const ObjectVisRecord& from);
  ObjectVisRecord(ObjectVisRecord&& from) noexcept
    : ObjectVisRecord() {
    *this = ::std::move(from);
  }

  inline ObjectVisRecord& operator=(const ObjectVisRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectVisRecord& operator=(ObjectVisRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectVisRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectVisRecord* internal_default_instance() {
    return reinterpret_cast<const ObjectVisRecord*>(
               &_ObjectVisRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ObjectVisRecord& a, ObjectVisRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectVisRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectVisRecord* New() const final {
    return CreateMaybeMessage<ObjectVisRecord>(nullptr);
  }

  ObjectVisRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectVisRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectVisRecord& from);
  void MergeFrom(const ObjectVisRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectVisRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ObjectVisRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentFieldNumber = 1,
    kRecordListFieldNumber = 3,
    kOperaTypeFieldNumber = 2,
  };
  // .OuterMsg.GUID ident = 1;
  bool has_ident() const;
  void clear_ident();
  const ::OuterMsg::GUID& ident() const;
  ::OuterMsg::GUID* release_ident();
  ::OuterMsg::GUID* mutable_ident();
  void set_allocated_ident(::OuterMsg::GUID* ident);

  // .OuterMsg.RecordList record_list = 3;
  bool has_record_list() const;
  void clear_record_list();
  const ::OuterMsg::RecordList& record_list() const;
  ::OuterMsg::RecordList* release_record_list();
  ::OuterMsg::RecordList* mutable_record_list();
  void set_allocated_record_list(::OuterMsg::RecordList* record_list);

  // .OuterMsg.RecordOperatorType opera_type = 2;
  void clear_opera_type();
  ::OuterMsg::RecordOperatorType opera_type() const;
  void set_opera_type(::OuterMsg::RecordOperatorType value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ObjectVisRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* ident_;
  ::OuterMsg::RecordList* record_list_;
  int opera_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.MsgBase) */ {
 public:
  MsgBase();
  virtual ~MsgBase();

  MsgBase(const MsgBase& from);
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBase* New() const final {
    return CreateMaybeMessage<MsgBase>(nullptr);
  }

  MsgBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBase& from);
  void MergeFrom(const MsgBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.MsgBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerClientListFieldNumber = 3,
    kMsgDataFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kHashIdentFieldNumber = 4,
  };
  // repeated .OuterMsg.GUID player_Client_list = 3;
  int player_Client_list_size() const;
  void clear_player_Client_list();
  ::OuterMsg::GUID* mutable_player_Client_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
      mutable_player_Client_list();
  const ::OuterMsg::GUID& player_Client_list(int index) const;
  ::OuterMsg::GUID* add_player_Client_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
      player_Client_list() const;

  // bytes msg_data = 2;
  void clear_msg_data();
  const std::string& msg_data() const;
  void set_msg_data(const std::string& value);
  void set_msg_data(std::string&& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  std::string* mutable_msg_data();
  std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);

  // .OuterMsg.GUID player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  const ::OuterMsg::GUID& player_id() const;
  ::OuterMsg::GUID* release_player_id();
  ::OuterMsg::GUID* mutable_player_id();
  void set_allocated_player_id(::OuterMsg::GUID* player_id);

  // .OuterMsg.GUID hash_ident = 4;
  bool has_hash_ident() const;
  void clear_hash_ident();
  const ::OuterMsg::GUID& hash_ident() const;
  ::OuterMsg::GUID* release_hash_ident();
  ::OuterMsg::GUID* mutable_hash_ident();
  void set_allocated_hash_ident(::OuterMsg::GUID* hash_ident);

  // @@protoc_insertion_point(class_scope:OuterMsg.MsgBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID > player_Client_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::OuterMsg::GUID* player_id_;
  ::OuterMsg::GUID* hash_ident_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckEventResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AckEventResult) */ {
 public:
  AckEventResult();
  virtual ~AckEventResult();

  AckEventResult(const AckEventResult& from);
  AckEventResult(AckEventResult&& from) noexcept
    : AckEventResult() {
    *this = ::std::move(from);
  }

  inline AckEventResult& operator=(const AckEventResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckEventResult& operator=(AckEventResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckEventResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckEventResult* internal_default_instance() {
    return reinterpret_cast<const AckEventResult*>(
               &_AckEventResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AckEventResult& a, AckEventResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AckEventResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckEventResult* New() const final {
    return CreateMaybeMessage<AckEventResult>(nullptr);
  }

  AckEventResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckEventResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckEventResult& from);
  void MergeFrom(const AckEventResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckEventResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AckEventResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventObjectFieldNumber = 2,
    kEventClientFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // .OuterMsg.GUID event_object = 2;
  bool has_event_object() const;
  void clear_event_object();
  const ::OuterMsg::GUID& event_object() const;
  ::OuterMsg::GUID* release_event_object();
  ::OuterMsg::GUID* mutable_event_object();
  void set_allocated_event_object(::OuterMsg::GUID* event_object);

  // .OuterMsg.GUID event_client = 3;
  bool has_event_client() const;
  void clear_event_client();
  const ::OuterMsg::GUID& event_client() const;
  ::OuterMsg::GUID* release_event_client();
  ::OuterMsg::GUID* mutable_event_client();
  void set_allocated_event_client(::OuterMsg::GUID* event_client);

  // .OuterMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::OuterMsg::EGameEventCode event_code() const;
  void set_event_code(::OuterMsg::EGameEventCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.AckEventResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* event_object_;
  ::OuterMsg::GUID* event_client_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAccountLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqAccountLogin) */ {
 public:
  ReqAccountLogin();
  virtual ~ReqAccountLogin();

  ReqAccountLogin(const ReqAccountLogin& from);
  ReqAccountLogin(ReqAccountLogin&& from) noexcept
    : ReqAccountLogin() {
    *this = ::std::move(from);
  }

  inline ReqAccountLogin& operator=(const ReqAccountLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAccountLogin& operator=(ReqAccountLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAccountLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAccountLogin* internal_default_instance() {
    return reinterpret_cast<const ReqAccountLogin*>(
               &_ReqAccountLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReqAccountLogin& a, ReqAccountLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAccountLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAccountLogin* New() const final {
    return CreateMaybeMessage<ReqAccountLogin>(nullptr);
  }

  ReqAccountLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAccountLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAccountLogin& from);
  void MergeFrom(const ReqAccountLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAccountLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqAccountLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kSecurityCodeFieldNumber = 3,
    kDeviceInfoFieldNumber = 6,
    kExtraInfoFieldNumber = 7,
    kClientIpFieldNumber = 11,
    kClientMACFieldNumber = 5,
    kClientVersionFieldNumber = 4,
    kPlatformTypeFieldNumber = 8,
    kWorldIdFieldNumber = 9,
    kLoginIdFieldNumber = 10,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // bytes security_code = 3;
  void clear_security_code();
  const std::string& security_code() const;
  void set_security_code(const std::string& value);
  void set_security_code(std::string&& value);
  void set_security_code(const char* value);
  void set_security_code(const void* value, size_t size);
  std::string* mutable_security_code();
  std::string* release_security_code();
  void set_allocated_security_code(std::string* security_code);

  // bytes device_info = 6;
  void clear_device_info();
  const std::string& device_info() const;
  void set_device_info(const std::string& value);
  void set_device_info(std::string&& value);
  void set_device_info(const char* value);
  void set_device_info(const void* value, size_t size);
  std::string* mutable_device_info();
  std::string* release_device_info();
  void set_allocated_device_info(std::string* device_info);

  // bytes extra_info = 7;
  void clear_extra_info();
  const std::string& extra_info() const;
  void set_extra_info(const std::string& value);
  void set_extra_info(std::string&& value);
  void set_extra_info(const char* value);
  void set_extra_info(const void* value, size_t size);
  std::string* mutable_extra_info();
  std::string* release_extra_info();
  void set_allocated_extra_info(std::string* extra_info);

  // bytes client_ip = 11;
  void clear_client_ip();
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const void* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // int64 clientMAC = 5;
  void clear_clientMAC();
  ::PROTOBUF_NAMESPACE_ID::int64 clientMAC() const;
  void set_clientMAC(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 clientVersion = 4;
  void clear_clientVersion();
  ::PROTOBUF_NAMESPACE_ID::int32 clientVersion() const;
  void set_clientVersion(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 platform_type = 8;
  void clear_platform_type();
  ::PROTOBUF_NAMESPACE_ID::int32 platform_type() const;
  void set_platform_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 world_id = 9;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 login_id = 10;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqAccountLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientMAC_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientVersion_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAccountLogout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqAccountLogout) */ {
 public:
  ReqAccountLogout();
  virtual ~ReqAccountLogout();

  ReqAccountLogout(const ReqAccountLogout& from);
  ReqAccountLogout(ReqAccountLogout&& from) noexcept
    : ReqAccountLogout() {
    *this = ::std::move(from);
  }

  inline ReqAccountLogout& operator=(const ReqAccountLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAccountLogout& operator=(ReqAccountLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAccountLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAccountLogout* internal_default_instance() {
    return reinterpret_cast<const ReqAccountLogout*>(
               &_ReqAccountLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReqAccountLogout& a, ReqAccountLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAccountLogout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAccountLogout* New() const final {
    return CreateMaybeMessage<ReqAccountLogout>(nullptr);
  }

  ReqAccountLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAccountLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAccountLogout& from);
  void MergeFrom(const ReqAccountLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAccountLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqAccountLogout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kExtraInfoFieldNumber = 3,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes extra_info = 3;
  void clear_extra_info();
  const std::string& extra_info() const;
  void set_extra_info(const std::string& value);
  void set_extra_info(std::string&& value);
  void set_extra_info(const char* value);
  void set_extra_info(const void* value, size_t size);
  std::string* mutable_extra_info();
  std::string* release_extra_info();
  void set_allocated_extra_info(std::string* extra_info);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqAccountLogout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerInfoReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ServerInfoReport) */ {
 public:
  ServerInfoReport();
  virtual ~ServerInfoReport();

  ServerInfoReport(const ServerInfoReport& from);
  ServerInfoReport(ServerInfoReport&& from) noexcept
    : ServerInfoReport() {
    *this = ::std::move(from);
  }

  inline ServerInfoReport& operator=(const ServerInfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoReport& operator=(ServerInfoReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReport* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReport*>(
               &_ServerInfoReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ServerInfoReport& a, ServerInfoReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReport* New() const final {
    return CreateMaybeMessage<ServerInfoReport>(nullptr);
  }

  ServerInfoReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoReport& from);
  void MergeFrom(const ServerInfoReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ServerInfoReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kServerIpFieldNumber = 3,
    kMaintainIpFieldNumber = 11,
    kWlanIpFieldNumber = 13,
    kNotesFieldNumber = 15,
    kStateInfoFieldNumber = 16,
    kServerIdFieldNumber = 1,
    kServerPortFieldNumber = 4,
    kServerMaxOnlineFieldNumber = 5,
    kServerCurCountFieldNumber = 6,
    kServerStateFieldNumber = 7,
    kServerTypeFieldNumber = 8,
    kAppIdFieldNumber = 9,
    kDistrictIdFieldNumber = 10,
    kMaintainPortFieldNumber = 12,
    kWlanPortFieldNumber = 14,
    kNetCallbackFieldNumber = 17,
    kNetCallbackSockFieldNumber = 18,
  };
  // bytes server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const void* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);

  // bytes server_ip = 3;
  void clear_server_ip();
  const std::string& server_ip() const;
  void set_server_ip(const std::string& value);
  void set_server_ip(std::string&& value);
  void set_server_ip(const char* value);
  void set_server_ip(const void* value, size_t size);
  std::string* mutable_server_ip();
  std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);

  // bytes maintain_ip = 11;
  void clear_maintain_ip();
  const std::string& maintain_ip() const;
  void set_maintain_ip(const std::string& value);
  void set_maintain_ip(std::string&& value);
  void set_maintain_ip(const char* value);
  void set_maintain_ip(const void* value, size_t size);
  std::string* mutable_maintain_ip();
  std::string* release_maintain_ip();
  void set_allocated_maintain_ip(std::string* maintain_ip);

  // bytes wlan_ip = 13;
  void clear_wlan_ip();
  const std::string& wlan_ip() const;
  void set_wlan_ip(const std::string& value);
  void set_wlan_ip(std::string&& value);
  void set_wlan_ip(const char* value);
  void set_wlan_ip(const void* value, size_t size);
  std::string* mutable_wlan_ip();
  std::string* release_wlan_ip();
  void set_allocated_wlan_ip(std::string* wlan_ip);

  // bytes notes = 15;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const void* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);

  // bytes state_info = 16;
  void clear_state_info();
  const std::string& state_info() const;
  void set_state_info(const std::string& value);
  void set_state_info(std::string&& value);
  void set_state_info(const char* value);
  void set_state_info(const void* value, size_t size);
  std::string* mutable_state_info();
  std::string* release_state_info();
  void set_allocated_state_info(std::string* state_info);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 server_port = 4;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::int32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 server_max_online = 5;
  void clear_server_max_online();
  ::PROTOBUF_NAMESPACE_ID::int32 server_max_online() const;
  void set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 server_cur_count = 6;
  void clear_server_cur_count();
  ::PROTOBUF_NAMESPACE_ID::int32 server_cur_count() const;
  void set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.EServerState server_state = 7;
  void clear_server_state();
  ::OuterMsg::EServerState server_state() const;
  void set_server_state(::OuterMsg::EServerState value);

  // int32 server_type = 8;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::int32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_id = 9;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 district_id = 10;
  void clear_district_id();
  ::PROTOBUF_NAMESPACE_ID::int32 district_id() const;
  void set_district_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 maintain_port = 12;
  void clear_maintain_port();
  ::PROTOBUF_NAMESPACE_ID::int32 maintain_port() const;
  void set_maintain_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 wlan_port = 14;
  void clear_wlan_port();
  ::PROTOBUF_NAMESPACE_ID::int32 wlan_port() const;
  void set_wlan_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 net_callback = 17;
  void clear_net_callback();
  ::PROTOBUF_NAMESPACE_ID::uint64 net_callback() const;
  void set_net_callback(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 net_callback_sock = 18;
  void clear_net_callback_sock();
  ::PROTOBUF_NAMESPACE_ID::uint64 net_callback_sock() const;
  void set_net_callback_sock(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ServerInfoReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maintain_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wlan_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_max_online_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_cur_count_;
  int server_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 district_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 maintain_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 wlan_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 net_callback_;
  ::PROTOBUF_NAMESPACE_ID::uint64 net_callback_sock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT NetTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.NetTest) */ {
 public:
  NetTest();
  virtual ~NetTest();

  NetTest(const NetTest& from);
  NetTest(NetTest&& from) noexcept
    : NetTest() {
    *this = ::std::move(from);
  }

  inline NetTest& operator=(const NetTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetTest& operator=(NetTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetTest* internal_default_instance() {
    return reinterpret_cast<const NetTest*>(
               &_NetTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NetTest& a, NetTest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetTest* New() const final {
    return CreateMaybeMessage<NetTest>(nullptr);
  }

  NetTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetTest& from);
  void MergeFrom(const NetTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.NetTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kClientSockFieldNumber = 1,
    kClientSendTimeFieldNumber = 2,
    kSrcServerSockFieldNumber = 3,
    kWordServerIdFieldNumber = 4,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // int64 client_sock = 1;
  void clear_client_sock();
  ::PROTOBUF_NAMESPACE_ID::int64 client_sock() const;
  void set_client_sock(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 client_send_time = 2;
  void clear_client_send_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_send_time() const;
  void set_client_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 src_server_sock = 3;
  void clear_src_server_sock();
  ::PROTOBUF_NAMESPACE_ID::int64 src_server_sock() const;
  void set_src_server_sock(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 word_server_id = 4;
  void clear_word_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 word_server_id() const;
  void set_word_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.NetTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_sock_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_send_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 src_server_sock_;
  ::PROTOBUF_NAMESPACE_ID::int32 word_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoReportList_ServerListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerInfoReportList_ServerListEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerInfoReportList_ServerListEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ServerInfoReportList_ServerListEntry_DoNotUse();
  ServerInfoReportList_ServerListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServerInfoReportList_ServerListEntry_DoNotUse& other);
  static const ServerInfoReportList_ServerListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServerInfoReportList_ServerListEntry_DoNotUse*>(&_ServerInfoReportList_ServerListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerInfoReportList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ServerInfoReportList) */ {
 public:
  ServerInfoReportList();
  virtual ~ServerInfoReportList();

  ServerInfoReportList(const ServerInfoReportList& from);
  ServerInfoReportList(ServerInfoReportList&& from) noexcept
    : ServerInfoReportList() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportList& operator=(const ServerInfoReportList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoReportList& operator=(ServerInfoReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReportList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportList*>(
               &_ServerInfoReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ServerInfoReportList& a, ServerInfoReportList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoReportList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportList* New() const final {
    return CreateMaybeMessage<ServerInfoReportList>(nullptr);
  }

  ServerInfoReportList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReportList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoReportList& from);
  void MergeFrom(const ServerInfoReportList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReportList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ServerInfoReportList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kServerListFieldNumber = 1,
  };
  // map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
  int server_list_size() const;
  void clear_server_list();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >&
      server_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >*
      mutable_server_list();

  // @@protoc_insertion_point(class_scope:OuterMsg.ServerInfoReportList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServerInfoReportList_ServerListEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > server_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(nullptr);
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kWaitCountFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 wait_count = 3;
  void clear_wait_count();
  ::PROTOBUF_NAMESPACE_ID::int32 wait_count() const;
  void set_wait_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.EServerState status = 4;
  void clear_status();
  ::OuterMsg::EServerState status() const;
  void set_status(::OuterMsg::EServerState value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_count_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ServerHeartBeat) */ {
 public:
  ServerHeartBeat();
  virtual ~ServerHeartBeat();

  ServerHeartBeat(const ServerHeartBeat& from);
  ServerHeartBeat(ServerHeartBeat&& from) noexcept
    : ServerHeartBeat() {
    *this = ::std::move(from);
  }

  inline ServerHeartBeat& operator=(const ServerHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerHeartBeat& operator=(ServerHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ServerHeartBeat*>(
               &_ServerHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ServerHeartBeat& a, ServerHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerHeartBeat* New() const final {
    return CreateMaybeMessage<ServerHeartBeat>(nullptr);
  }

  ServerHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerHeartBeat& from);
  void MergeFrom(const ServerHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ServerHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ServerHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckWorldList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AckWorldList) */ {
 public:
  AckWorldList();
  virtual ~AckWorldList();

  AckWorldList(const AckWorldList& from);
  AckWorldList(AckWorldList&& from) noexcept
    : AckWorldList() {
    *this = ::std::move(from);
  }

  inline AckWorldList& operator=(const AckWorldList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWorldList& operator=(AckWorldList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckWorldList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckWorldList* internal_default_instance() {
    return reinterpret_cast<const AckWorldList*>(
               &_AckWorldList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AckWorldList& a, AckWorldList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWorldList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWorldList* New() const final {
    return CreateMaybeMessage<AckWorldList>(nullptr);
  }

  AckWorldList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWorldList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWorldList& from);
  void MergeFrom(const AckWorldList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWorldList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AckWorldList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .OuterMsg.ServerInfo info = 1;
  int info_size() const;
  void clear_info();
  ::OuterMsg::ServerInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerInfo >*
      mutable_info();
  const ::OuterMsg::ServerInfo& info(int index) const;
  ::OuterMsg::ServerInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:OuterMsg.AckWorldList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerInfo > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqConnectWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqConnectWorld) */ {
 public:
  ReqConnectWorld();
  virtual ~ReqConnectWorld();

  ReqConnectWorld(const ReqConnectWorld& from);
  ReqConnectWorld(ReqConnectWorld&& from) noexcept
    : ReqConnectWorld() {
    *this = ::std::move(from);
  }

  inline ReqConnectWorld& operator=(const ReqConnectWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqConnectWorld& operator=(ReqConnectWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqConnectWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqConnectWorld* internal_default_instance() {
    return reinterpret_cast<const ReqConnectWorld*>(
               &_ReqConnectWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ReqConnectWorld& a, ReqConnectWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqConnectWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqConnectWorld* New() const final {
    return CreateMaybeMessage<ReqConnectWorld>(nullptr);
  }

  ReqConnectWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqConnectWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqConnectWorld& from);
  void MergeFrom(const ReqConnectWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqConnectWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqConnectWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kClientIpFieldNumber = 6,
    kSenderFieldNumber = 3,
    kWorldIdFieldNumber = 1,
    kLoginIdFieldNumber = 4,
    kClientVersionFieldNumber = 5,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes client_ip = 6;
  void clear_client_ip();
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const void* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // .OuterMsg.GUID sender = 3;
  bool has_sender() const;
  void clear_sender();
  const ::OuterMsg::GUID& sender() const;
  ::OuterMsg::GUID* release_sender();
  ::OuterMsg::GUID* mutable_sender();
  void set_allocated_sender(::OuterMsg::GUID* sender);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 login_id = 4;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 clientVersion = 5;
  void clear_clientVersion();
  ::PROTOBUF_NAMESPACE_ID::int32 clientVersion() const;
  void set_clientVersion(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqConnectWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::OuterMsg::GUID* sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientVersion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckConnectWorldResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AckConnectWorldResult) */ {
 public:
  AckConnectWorldResult();
  virtual ~AckConnectWorldResult();

  AckConnectWorldResult(const AckConnectWorldResult& from);
  AckConnectWorldResult(AckConnectWorldResult&& from) noexcept
    : AckConnectWorldResult() {
    *this = ::std::move(from);
  }

  inline AckConnectWorldResult& operator=(const AckConnectWorldResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckConnectWorldResult& operator=(AckConnectWorldResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckConnectWorldResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckConnectWorldResult* internal_default_instance() {
    return reinterpret_cast<const AckConnectWorldResult*>(
               &_AckConnectWorldResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AckConnectWorldResult& a, AckConnectWorldResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AckConnectWorldResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckConnectWorldResult* New() const final {
    return CreateMaybeMessage<AckConnectWorldResult>(nullptr);
  }

  AckConnectWorldResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckConnectWorldResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckConnectWorldResult& from);
  void MergeFrom(const AckConnectWorldResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckConnectWorldResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AckConnectWorldResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 4,
    kWorldIpFieldNumber = 5,
    kWorldKeyFieldNumber = 7,
    kClientIpFieldNumber = 9,
    kSenderFieldNumber = 2,
    kWorldParamFieldNumber = 8,
    kWorldIdFieldNumber = 1,
    kLoginIdFieldNumber = 3,
    kWorldPortFieldNumber = 6,
    kEventCodeFieldNumber = 10,
  };
  // bytes account = 4;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes world_ip = 5;
  void clear_world_ip();
  const std::string& world_ip() const;
  void set_world_ip(const std::string& value);
  void set_world_ip(std::string&& value);
  void set_world_ip(const char* value);
  void set_world_ip(const void* value, size_t size);
  std::string* mutable_world_ip();
  std::string* release_world_ip();
  void set_allocated_world_ip(std::string* world_ip);

  // bytes world_key = 7;
  void clear_world_key();
  const std::string& world_key() const;
  void set_world_key(const std::string& value);
  void set_world_key(std::string&& value);
  void set_world_key(const char* value);
  void set_world_key(const void* value, size_t size);
  std::string* mutable_world_key();
  std::string* release_world_key();
  void set_allocated_world_key(std::string* world_key);

  // bytes client_ip = 9;
  void clear_client_ip();
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const void* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // .OuterMsg.GUID sender = 2;
  bool has_sender() const;
  void clear_sender();
  const ::OuterMsg::GUID& sender() const;
  ::OuterMsg::GUID* release_sender();
  ::OuterMsg::GUID* mutable_sender();
  void set_allocated_sender(::OuterMsg::GUID* sender);

  // .OuterMsg.WorldParam world_param = 8;
  bool has_world_param() const;
  void clear_world_param();
  const ::OuterMsg::WorldParam& world_param() const;
  ::OuterMsg::WorldParam* release_world_param();
  ::OuterMsg::WorldParam* mutable_world_param();
  void set_allocated_world_param(::OuterMsg::WorldParam* world_param);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 login_id = 3;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 world_port = 6;
  void clear_world_port();
  ::PROTOBUF_NAMESPACE_ID::int32 world_port() const;
  void set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.EGameEventCode event_code = 10;
  void clear_event_code();
  ::OuterMsg::EGameEventCode event_code() const;
  void set_event_code(::OuterMsg::EGameEventCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.AckConnectWorldResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::OuterMsg::GUID* sender_;
  ::OuterMsg::WorldParam* world_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_port_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class WorldParam_ExtraServerEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorldParam_ExtraServerEntry_DoNotUse, 
    std::string, ::OuterMsg::ServerConnectInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorldParam_ExtraServerEntry_DoNotUse, 
    std::string, ::OuterMsg::ServerConnectInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  WorldParam_ExtraServerEntry_DoNotUse();
  WorldParam_ExtraServerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WorldParam_ExtraServerEntry_DoNotUse& other);
  static const WorldParam_ExtraServerEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorldParam_ExtraServerEntry_DoNotUse*>(&_WorldParam_ExtraServerEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "OuterMsg.WorldParam.ExtraServerEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[25];
  }

  public:
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT WorldParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.WorldParam) */ {
 public:
  WorldParam();
  virtual ~WorldParam();

  WorldParam(const WorldParam& from);
  WorldParam(WorldParam&& from) noexcept
    : WorldParam() {
    *this = ::std::move(from);
  }

  inline WorldParam& operator=(const WorldParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldParam& operator=(WorldParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldParam* internal_default_instance() {
    return reinterpret_cast<const WorldParam*>(
               &_WorldParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WorldParam& a, WorldParam& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldParam* New() const final {
    return CreateMaybeMessage<WorldParam>(nullptr);
  }

  WorldParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldParam& from);
  void MergeFrom(const WorldParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.WorldParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraServerFieldNumber = 1,
  };
  // map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
  int extra_server_size() const;
  void clear_extra_server();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >&
      extra_server() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >*
      mutable_extra_server();

  // @@protoc_insertion_point(class_scope:OuterMsg.WorldParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WorldParam_ExtraServerEntry_DoNotUse,
      std::string, ::OuterMsg::ServerConnectInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqRoleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqRoleList) */ {
 public:
  ReqRoleList();
  virtual ~ReqRoleList();

  ReqRoleList(const ReqRoleList& from);
  ReqRoleList(ReqRoleList&& from) noexcept
    : ReqRoleList() {
    *this = ::std::move(from);
  }

  inline ReqRoleList& operator=(const ReqRoleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRoleList& operator=(ReqRoleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqRoleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRoleList* internal_default_instance() {
    return reinterpret_cast<const ReqRoleList*>(
               &_ReqRoleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ReqRoleList& a, ReqRoleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRoleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRoleList* New() const final {
    return CreateMaybeMessage<ReqRoleList>(nullptr);
  }

  ReqRoleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRoleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRoleList& from);
  void MergeFrom(const ReqRoleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRoleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqRoleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqRoleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RoleLiteInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RoleLiteInfo) */ {
 public:
  RoleLiteInfo();
  virtual ~RoleLiteInfo();

  RoleLiteInfo(const RoleLiteInfo& from);
  RoleLiteInfo(RoleLiteInfo&& from) noexcept
    : RoleLiteInfo() {
    *this = ::std::move(from);
  }

  inline RoleLiteInfo& operator=(const RoleLiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLiteInfo& operator=(RoleLiteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleLiteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleLiteInfo* internal_default_instance() {
    return reinterpret_cast<const RoleLiteInfo*>(
               &_RoleLiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RoleLiteInfo& a, RoleLiteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLiteInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleLiteInfo* New() const final {
    return CreateMaybeMessage<RoleLiteInfo>(nullptr);
  }

  RoleLiteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleLiteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleLiteInfo& from);
  void MergeFrom(const RoleLiteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLiteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RoleLiteInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kIdFieldNumber = 1,
    kOpenTimeFieldNumber = 3,
  };
  // bytes info = 2;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // int32 open_time = 3;
  void clear_open_time();
  ::PROTOBUF_NAMESPACE_ID::int32 open_time() const;
  void set_open_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RoleLiteInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::OuterMsg::GUID* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckRoleLiteInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AckRoleLiteInfoList) */ {
 public:
  AckRoleLiteInfoList();
  virtual ~AckRoleLiteInfoList();

  AckRoleLiteInfoList(const AckRoleLiteInfoList& from);
  AckRoleLiteInfoList(AckRoleLiteInfoList&& from) noexcept
    : AckRoleLiteInfoList() {
    *this = ::std::move(from);
  }

  inline AckRoleLiteInfoList& operator=(const AckRoleLiteInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRoleLiteInfoList& operator=(AckRoleLiteInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckRoleLiteInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckRoleLiteInfoList* internal_default_instance() {
    return reinterpret_cast<const AckRoleLiteInfoList*>(
               &_AckRoleLiteInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AckRoleLiteInfoList& a, AckRoleLiteInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRoleLiteInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRoleLiteInfoList* New() const final {
    return CreateMaybeMessage<AckRoleLiteInfoList>(nullptr);
  }

  AckRoleLiteInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRoleLiteInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRoleLiteInfoList& from);
  void MergeFrom(const AckRoleLiteInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRoleLiteInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AckRoleLiteInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharDataFieldNumber = 1,
    kAccountFieldNumber = 2,
  };
  // repeated .OuterMsg.RoleLiteInfo char_data = 1;
  int char_data_size() const;
  void clear_char_data();
  ::OuterMsg::RoleLiteInfo* mutable_char_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RoleLiteInfo >*
      mutable_char_data();
  const ::OuterMsg::RoleLiteInfo& char_data(int index) const;
  ::OuterMsg::RoleLiteInfo* add_char_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RoleLiteInfo >&
      char_data() const;

  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:OuterMsg.AckRoleLiteInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RoleLiteInfo > char_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCreateRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqCreateRole) */ {
 public:
  ReqCreateRole();
  virtual ~ReqCreateRole();

  ReqCreateRole(const ReqCreateRole& from);
  ReqCreateRole(ReqCreateRole&& from) noexcept
    : ReqCreateRole() {
    *this = ::std::move(from);
  }

  inline ReqCreateRole& operator=(const ReqCreateRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateRole& operator=(ReqCreateRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCreateRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCreateRole* internal_default_instance() {
    return reinterpret_cast<const ReqCreateRole*>(
               &_ReqCreateRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReqCreateRole& a, ReqCreateRole& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateRole* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateRole* New() const final {
    return CreateMaybeMessage<ReqCreateRole>(nullptr);
  }

  ReqCreateRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateRole& from);
  void MergeFrom(const ReqCreateRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqCreateRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kNoobNameFieldNumber = 2,
    kMsgDataFieldNumber = 4,
    kClientIdFieldNumber = 3,
    kRoleDataFieldNumber = 5,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes noob_name = 2;
  void clear_noob_name();
  const std::string& noob_name() const;
  void set_noob_name(const std::string& value);
  void set_noob_name(std::string&& value);
  void set_noob_name(const char* value);
  void set_noob_name(const void* value, size_t size);
  std::string* mutable_noob_name();
  std::string* release_noob_name();
  void set_allocated_noob_name(std::string* noob_name);

  // bytes msg_data = 4;
  void clear_msg_data();
  const std::string& msg_data() const;
  void set_msg_data(const std::string& value);
  void set_msg_data(std::string&& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  std::string* mutable_msg_data();
  std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);

  // .OuterMsg.GUID client_id = 3;
  bool has_client_id() const;
  void clear_client_id();
  const ::OuterMsg::GUID& client_id() const;
  ::OuterMsg::GUID* release_client_id();
  ::OuterMsg::GUID* mutable_client_id();
  void set_allocated_client_id(::OuterMsg::GUID* client_id);

  // .OuterMsg.ObjectDataPack roleData = 5;
  bool has_roleData() const;
  void clear_roleData();
  const ::OuterMsg::ObjectDataPack& roleData() const;
  ::OuterMsg::ObjectDataPack* release_roleData();
  ::OuterMsg::ObjectDataPack* mutable_roleData();
  void set_allocated_roleData(::OuterMsg::ObjectDataPack* roleData);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqCreateRole)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr noob_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::OuterMsg::GUID* client_id_;
  ::OuterMsg::ObjectDataPack* roleData_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqDeleteRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqDeleteRole) */ {
 public:
  ReqDeleteRole();
  virtual ~ReqDeleteRole();

  ReqDeleteRole(const ReqDeleteRole& from);
  ReqDeleteRole(ReqDeleteRole&& from) noexcept
    : ReqDeleteRole() {
    *this = ::std::move(from);
  }

  inline ReqDeleteRole& operator=(const ReqDeleteRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteRole& operator=(ReqDeleteRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqDeleteRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteRole* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteRole*>(
               &_ReqDeleteRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ReqDeleteRole& a, ReqDeleteRole& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteRole* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteRole* New() const final {
    return CreateMaybeMessage<ReqDeleteRole>(nullptr);
  }

  ReqDeleteRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteRole& from);
  void MergeFrom(const ReqDeleteRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqDeleteRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqDeleteRole)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RoleOnlineNotify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RoleOnlineNotify) */ {
 public:
  RoleOnlineNotify();
  virtual ~RoleOnlineNotify();

  RoleOnlineNotify(const RoleOnlineNotify& from);
  RoleOnlineNotify(RoleOnlineNotify&& from) noexcept
    : RoleOnlineNotify() {
    *this = ::std::move(from);
  }

  inline RoleOnlineNotify& operator=(const RoleOnlineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleOnlineNotify& operator=(RoleOnlineNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleOnlineNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleOnlineNotify* internal_default_instance() {
    return reinterpret_cast<const RoleOnlineNotify*>(
               &_RoleOnlineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RoleOnlineNotify& a, RoleOnlineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleOnlineNotify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleOnlineNotify* New() const final {
    return CreateMaybeMessage<RoleOnlineNotify>(nullptr);
  }

  RoleOnlineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleOnlineNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleOnlineNotify& from);
  void MergeFrom(const RoleOnlineNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleOnlineNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RoleOnlineNotify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
    kClientFieldNumber = 4,
    kGameFieldNumber = 2,
    kProxyFieldNumber = 3,
  };
  // .OuterMsg.GUID self = 1;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // .OuterMsg.GUID client = 4;
  bool has_client() const;
  void clear_client();
  const ::OuterMsg::GUID& client() const;
  ::OuterMsg::GUID* release_client();
  ::OuterMsg::GUID* mutable_client();
  void set_allocated_client(::OuterMsg::GUID* client);

  // int32 game = 2;
  void clear_game();
  ::PROTOBUF_NAMESPACE_ID::int32 game() const;
  void set_game(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 proxy = 3;
  void clear_proxy();
  ::PROTOBUF_NAMESPACE_ID::int32 proxy() const;
  void set_proxy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RoleOnlineNotify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* self_;
  ::OuterMsg::GUID* client_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_;
  ::PROTOBUF_NAMESPACE_ID::int32 proxy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RoleOfflineNotify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RoleOfflineNotify) */ {
 public:
  RoleOfflineNotify();
  virtual ~RoleOfflineNotify();

  RoleOfflineNotify(const RoleOfflineNotify& from);
  RoleOfflineNotify(RoleOfflineNotify&& from) noexcept
    : RoleOfflineNotify() {
    *this = ::std::move(from);
  }

  inline RoleOfflineNotify& operator=(const RoleOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleOfflineNotify& operator=(RoleOfflineNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleOfflineNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const RoleOfflineNotify*>(
               &_RoleOfflineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RoleOfflineNotify& a, RoleOfflineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleOfflineNotify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleOfflineNotify* New() const final {
    return CreateMaybeMessage<RoleOfflineNotify>(nullptr);
  }

  RoleOfflineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleOfflineNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleOfflineNotify& from);
  void MergeFrom(const RoleOfflineNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleOfflineNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RoleOfflineNotify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
    kGameFieldNumber = 2,
    kProxyFieldNumber = 3,
  };
  // .OuterMsg.GUID self = 1;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // int32 game = 2;
  void clear_game();
  ::PROTOBUF_NAMESPACE_ID::int32 game() const;
  void set_game(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 proxy = 3;
  void clear_proxy();
  ::PROTOBUF_NAMESPACE_ID::int32 proxy() const;
  void set_proxy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RoleOfflineNotify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* self_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_;
  ::PROTOBUF_NAMESPACE_ID::int32 proxy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqEnterGameServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqEnterGameServer) */ {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);
  ReqEnterGameServer(ReqEnterGameServer&& from) noexcept
    : ReqEnterGameServer() {
    *this = ::std::move(from);
  }

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqEnterGameServer& operator=(ReqEnterGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqEnterGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEnterGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGameServer*>(
               &_ReqEnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ReqEnterGameServer& a, ReqEnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqEnterGameServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterGameServer* New() const final {
    return CreateMaybeMessage<ReqEnterGameServer>(nullptr);
  }

  ReqEnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqEnterGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEnterGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqEnterGameServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kIpFieldNumber = 3,
    kDeviceIdFieldNumber = 4,
    kDeviceMacFieldNumber = 5,
    kIdFieldNumber = 1,
    kOsTypeFieldNumber = 6,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // bytes device_id = 4;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);

  // bytes device_mac = 5;
  void clear_device_mac();
  const std::string& device_mac() const;
  void set_device_mac(const std::string& value);
  void set_device_mac(std::string&& value);
  void set_device_mac(const char* value);
  void set_device_mac(const void* value, size_t size);
  std::string* mutable_device_mac();
  std::string* release_device_mac();
  void set_allocated_device_mac(std::string* device_mac);

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.OsType os_type = 6;
  void clear_os_type();
  ::OuterMsg::OsType os_type() const;
  void set_os_type(::OuterMsg::OsType value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqEnterGameServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_mac_;
  ::OuterMsg::GUID* id_;
  int os_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckEnterGameSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqAckEnterGameSuccess) */ {
 public:
  ReqAckEnterGameSuccess();
  virtual ~ReqAckEnterGameSuccess();

  ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from);
  ReqAckEnterGameSuccess(ReqAckEnterGameSuccess&& from) noexcept
    : ReqAckEnterGameSuccess() {
    *this = ::std::move(from);
  }

  inline ReqAckEnterGameSuccess& operator=(const ReqAckEnterGameSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckEnterGameSuccess& operator=(ReqAckEnterGameSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckEnterGameSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckEnterGameSuccess* internal_default_instance() {
    return reinterpret_cast<const ReqAckEnterGameSuccess*>(
               &_ReqAckEnterGameSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ReqAckEnterGameSuccess& a, ReqAckEnterGameSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckEnterGameSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckEnterGameSuccess* New() const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(nullptr);
  }

  ReqAckEnterGameSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckEnterGameSuccess& from);
  void MergeFrom(const ReqAckEnterGameSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckEnterGameSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqAckEnterGameSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  ::PROTOBUF_NAMESPACE_ID::int32 arg() const;
  void set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqAckEnterGameSuccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLeaveGameServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqLeaveGameServer) */ {
 public:
  ReqLeaveGameServer();
  virtual ~ReqLeaveGameServer();

  ReqLeaveGameServer(const ReqLeaveGameServer& from);
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLeaveGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLeaveGameServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(nullptr);
  }

  ReqLeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqLeaveGameServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  ::PROTOBUF_NAMESPACE_ID::int32 arg() const;
  void set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqLeaveGameServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT CommandMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.CommandMsg) */ {
 public:
  CommandMsg();
  virtual ~CommandMsg();

  CommandMsg(const CommandMsg& from);
  CommandMsg(CommandMsg&& from) noexcept
    : CommandMsg() {
    *this = ::std::move(from);
  }

  inline CommandMsg& operator=(const CommandMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMsg& operator=(CommandMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandMsg* internal_default_instance() {
    return reinterpret_cast<const CommandMsg*>(
               &_CommandMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CommandMsg& a, CommandMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMsg* New() const final {
    return CreateMaybeMessage<CommandMsg>(nullptr);
  }

  CommandMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandMsg& from);
  void MergeFrom(const CommandMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.CommandMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetClassNameFieldNumber = 4,
    kSelfFieldNumber = 2,
    kTargetFieldNumber = 3,
    kDataFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // bytes target_class_Name = 4;
  void clear_target_class_Name();
  const std::string& target_class_Name() const;
  void set_target_class_Name(const std::string& value);
  void set_target_class_Name(std::string&& value);
  void set_target_class_Name(const char* value);
  void set_target_class_Name(const void* value, size_t size);
  std::string* mutable_target_class_Name();
  std::string* release_target_class_Name();
  void set_allocated_target_class_Name(std::string* target_class_Name);

  // .OuterMsg.GUID self = 2;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // .OuterMsg.GUID target = 3;
  bool has_target() const;
  void clear_target();
  const ::OuterMsg::GUID& target() const;
  ::OuterMsg::GUID* release_target();
  ::OuterMsg::GUID* mutable_target();
  void set_allocated_target(::OuterMsg::GUID* target);

  // .OuterMsg.PBDataList data = 5;
  bool has_data() const;
  void clear_data();
  const ::OuterMsg::PBDataList& data() const;
  ::OuterMsg::PBDataList* release_data();
  ::OuterMsg::PBDataList* mutable_data();
  void set_allocated_data(::OuterMsg::PBDataList* data);

  // int32 Id = 1;
  void clear_Id();
  ::PROTOBUF_NAMESPACE_ID::int32 Id() const;
  void set_Id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.CommandMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_class_Name_;
  ::OuterMsg::GUID* self_;
  ::OuterMsg::GUID* target_;
  ::OuterMsg::PBDataList* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 Id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT LetterData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.LetterData) */ {
 public:
  LetterData();
  virtual ~LetterData();

  LetterData(const LetterData& from);
  LetterData(LetterData&& from) noexcept
    : LetterData() {
    *this = ::std::move(from);
  }

  inline LetterData& operator=(const LetterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LetterData& operator=(LetterData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LetterData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LetterData* internal_default_instance() {
    return reinterpret_cast<const LetterData*>(
               &_LetterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LetterData& a, LetterData& b) {
    a.Swap(&b);
  }
  inline void Swap(LetterData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LetterData* New() const final {
    return CreateMaybeMessage<LetterData>(nullptr);
  }

  LetterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LetterData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LetterData& from);
  void MergeFrom(const LetterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LetterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.LetterData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kSendnameFieldNumber = 3,
    kTitleFieldNumber = 6,
    kContentFieldNumber = 7,
    kAppendFieldNumber = 9,
    kSenderFieldNumber = 2,
    kReceiverFieldNumber = 5,
    kArgsFieldNumber = 8,
    kTimeFieldNumber = 4,
  };
  // bytes ID = 1;
  void clear_ID();
  const std::string& ID() const;
  void set_ID(const std::string& value);
  void set_ID(std::string&& value);
  void set_ID(const char* value);
  void set_ID(const void* value, size_t size);
  std::string* mutable_ID();
  std::string* release_ID();
  void set_allocated_ID(std::string* ID);

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);

  // bytes title = 6;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const void* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // bytes content = 7;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // bytes append = 9;
  void clear_append();
  const std::string& append() const;
  void set_append(const std::string& value);
  void set_append(std::string&& value);
  void set_append(const char* value);
  void set_append(const void* value, size_t size);
  std::string* mutable_append();
  std::string* release_append();
  void set_allocated_append(std::string* append);

  // .OuterMsg.GUID sender = 2;
  bool has_sender() const;
  void clear_sender();
  const ::OuterMsg::GUID& sender() const;
  ::OuterMsg::GUID* release_sender();
  ::OuterMsg::GUID* mutable_sender();
  void set_allocated_sender(::OuterMsg::GUID* sender);

  // .OuterMsg.GUID receiver = 5;
  bool has_receiver() const;
  void clear_receiver();
  const ::OuterMsg::GUID& receiver() const;
  ::OuterMsg::GUID* release_receiver();
  ::OuterMsg::GUID* mutable_receiver();
  void set_allocated_receiver(::OuterMsg::GUID* receiver);

  // .OuterMsg.PBDataList args = 8;
  bool has_args() const;
  void clear_args();
  const ::OuterMsg::PBDataList& args() const;
  ::OuterMsg::PBDataList* release_args();
  ::OuterMsg::PBDataList* mutable_args();
  void set_allocated_args(::OuterMsg::PBDataList* args);

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.LetterData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ID_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr append_;
  ::OuterMsg::GUID* sender_;
  ::OuterMsg::GUID* receiver_;
  ::OuterMsg::PBDataList* args_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT LetterDataPack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.LetterDataPack) */ {
 public:
  LetterDataPack();
  virtual ~LetterDataPack();

  LetterDataPack(const LetterDataPack& from);
  LetterDataPack(LetterDataPack&& from) noexcept
    : LetterDataPack() {
    *this = ::std::move(from);
  }

  inline LetterDataPack& operator=(const LetterDataPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline LetterDataPack& operator=(LetterDataPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LetterDataPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LetterDataPack* internal_default_instance() {
    return reinterpret_cast<const LetterDataPack*>(
               &_LetterDataPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LetterDataPack& a, LetterDataPack& b) {
    a.Swap(&b);
  }
  inline void Swap(LetterDataPack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LetterDataPack* New() const final {
    return CreateMaybeMessage<LetterDataPack>(nullptr);
  }

  LetterDataPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LetterDataPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LetterDataPack& from);
  void MergeFrom(const LetterDataPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LetterDataPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.LetterDataPack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLetterFieldNumber = 2,
    kSelfFieldNumber = 1,
  };
  // repeated .OuterMsg.LetterData letter = 2;
  int letter_size() const;
  void clear_letter();
  ::OuterMsg::LetterData* mutable_letter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::LetterData >*
      mutable_letter();
  const ::OuterMsg::LetterData& letter(int index) const;
  ::OuterMsg::LetterData* add_letter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::LetterData >&
      letter() const;

  // .OuterMsg.GUID self = 1;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // @@protoc_insertion_point(class_scope:OuterMsg.LetterDataPack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::LetterData > letter_;
  ::OuterMsg::GUID* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLookLetter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqLookLetter) */ {
 public:
  ReqLookLetter();
  virtual ~ReqLookLetter();

  ReqLookLetter(const ReqLookLetter& from);
  ReqLookLetter(ReqLookLetter&& from) noexcept
    : ReqLookLetter() {
    *this = ::std::move(from);
  }

  inline ReqLookLetter& operator=(const ReqLookLetter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLookLetter& operator=(ReqLookLetter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLookLetter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLookLetter* internal_default_instance() {
    return reinterpret_cast<const ReqLookLetter*>(
               &_ReqLookLetter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ReqLookLetter& a, ReqLookLetter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLookLetter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLookLetter* New() const final {
    return CreateMaybeMessage<ReqLookLetter>(nullptr);
  }

  ReqLookLetter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLookLetter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLookLetter& from);
  void MergeFrom(const ReqLookLetter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLookLetter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqLookLetter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // .OuterMsg.GUID self = 1;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqLookLetter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* self_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqDeleteLetter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ReqDeleteLetter) */ {
 public:
  ReqDeleteLetter();
  virtual ~ReqDeleteLetter();

  ReqDeleteLetter(const ReqDeleteLetter& from);
  ReqDeleteLetter(ReqDeleteLetter&& from) noexcept
    : ReqDeleteLetter() {
    *this = ::std::move(from);
  }

  inline ReqDeleteLetter& operator=(const ReqDeleteLetter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteLetter& operator=(ReqDeleteLetter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqDeleteLetter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteLetter* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteLetter*>(
               &_ReqDeleteLetter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ReqDeleteLetter& a, ReqDeleteLetter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteLetter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteLetter* New() const final {
    return CreateMaybeMessage<ReqDeleteLetter>(nullptr);
  }

  ReqDeleteLetter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteLetter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteLetter& from);
  void MergeFrom(const ReqDeleteLetter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteLetter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ReqDeleteLetter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLetterIDFieldNumber = 2,
    kSelfFieldNumber = 1,
  };
  // bytes letterID = 2;
  void clear_letterID();
  const std::string& letterID() const;
  void set_letterID(const std::string& value);
  void set_letterID(std::string&& value);
  void set_letterID(const char* value);
  void set_letterID(const void* value, size_t size);
  std::string* mutable_letterID();
  std::string* release_letterID();
  void set_allocated_letterID(std::string* letterID);

  // .OuterMsg.GUID self = 1;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // @@protoc_insertion_point(class_scope:OuterMsg.ReqDeleteLetter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr letterID_;
  ::OuterMsg::GUID* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckQueryLetter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AckQueryLetter) */ {
 public:
  AckQueryLetter();
  virtual ~AckQueryLetter();

  AckQueryLetter(const AckQueryLetter& from);
  AckQueryLetter(AckQueryLetter&& from) noexcept
    : AckQueryLetter() {
    *this = ::std::move(from);
  }

  inline AckQueryLetter& operator=(const AckQueryLetter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQueryLetter& operator=(AckQueryLetter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckQueryLetter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckQueryLetter* internal_default_instance() {
    return reinterpret_cast<const AckQueryLetter*>(
               &_AckQueryLetter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AckQueryLetter& a, AckQueryLetter& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQueryLetter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQueryLetter* New() const final {
    return CreateMaybeMessage<AckQueryLetter>(nullptr);
  }

  AckQueryLetter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQueryLetter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQueryLetter& from);
  void MergeFrom(const AckQueryLetter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQueryLetter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AckQueryLetter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // .OuterMsg.GUID self = 1;
  bool has_self() const;
  void clear_self();
  const ::OuterMsg::GUID& self() const;
  ::OuterMsg::GUID* release_self();
  ::OuterMsg::GUID* mutable_self();
  void set_allocated_self(::OuterMsg::GUID* self);

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.AckQueryLetter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* self_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PubOpData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PubOpData) */ {
 public:
  PubOpData();
  virtual ~PubOpData();

  PubOpData(const PubOpData& from);
  PubOpData(PubOpData&& from) noexcept
    : PubOpData() {
    *this = ::std::move(from);
  }

  inline PubOpData& operator=(const PubOpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubOpData& operator=(PubOpData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubOpData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubOpData* internal_default_instance() {
    return reinterpret_cast<const PubOpData*>(
               &_PubOpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PubOpData& a, PubOpData& b) {
    a.Swap(&b);
  }
  inline void Swap(PubOpData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubOpData* New() const final {
    return CreateMaybeMessage<PubOpData>(nullptr);
  }

  PubOpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubOpData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubOpData& from);
  void MergeFrom(const PubOpData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubOpData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PubOpData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubNameFieldNumber = 1,
    kPubIdFieldNumber = 2,
  };
  // bytes PubName = 1;
  void clear_PubName();
  const std::string& PubName() const;
  void set_PubName(const std::string& value);
  void set_PubName(std::string&& value);
  void set_PubName(const char* value);
  void set_PubName(const void* value, size_t size);
  std::string* mutable_PubName();
  std::string* release_PubName();
  void set_allocated_PubName(std::string* PubName);

  // .OuterMsg.GUID pub_id = 2;
  bool has_pub_id() const;
  void clear_pub_id();
  const ::OuterMsg::GUID& pub_id() const;
  ::OuterMsg::GUID* release_pub_id();
  ::OuterMsg::GUID* mutable_pub_id();
  void set_allocated_pub_id(::OuterMsg::GUID* pub_id);

  // @@protoc_insertion_point(class_scope:OuterMsg.PubOpData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr PubName_;
  ::OuterMsg::GUID* pub_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AckResult) */ {
 public:
  AckResult();
  virtual ~AckResult();

  AckResult(const AckResult& from);
  AckResult(AckResult&& from) noexcept
    : AckResult() {
    *this = ::std::move(from);
  }

  inline AckResult& operator=(const AckResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckResult& operator=(AckResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckResult* internal_default_instance() {
    return reinterpret_cast<const AckResult*>(
               &_AckResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(AckResult& a, AckResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AckResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckResult* New() const final {
    return CreateMaybeMessage<AckResult>(nullptr);
  }

  AckResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckResult& from);
  void MergeFrom(const AckResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AckResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kObjIdFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID obj_id = 3;
  bool has_obj_id() const;
  void clear_obj_id();
  const ::OuterMsg::GUID& obj_id() const;
  ::OuterMsg::GUID* release_obj_id();
  ::OuterMsg::GUID* mutable_obj_id();
  void set_allocated_obj_id(::OuterMsg::GUID* obj_id);

  // .OuterMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::OuterMsg::EGameEventCode event_code() const;
  void set_event_code(::OuterMsg::EGameEventCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.AckResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* obj_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PubNameData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PubNameData) */ {
 public:
  PubNameData();
  virtual ~PubNameData();

  PubNameData(const PubNameData& from);
  PubNameData(PubNameData&& from) noexcept
    : PubNameData() {
    *this = ::std::move(from);
  }

  inline PubNameData& operator=(const PubNameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubNameData& operator=(PubNameData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubNameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubNameData* internal_default_instance() {
    return reinterpret_cast<const PubNameData*>(
               &_PubNameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PubNameData& a, PubNameData& b) {
    a.Swap(&b);
  }
  inline void Swap(PubNameData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubNameData* New() const final {
    return CreateMaybeMessage<PubNameData>(nullptr);
  }

  PubNameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubNameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubNameData& from);
  void MergeFrom(const PubNameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubNameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PubNameData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 1,
    kObjectDataFieldNumber = 2,
  };
  // bytes class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const void* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // .OuterMsg.ObjectDataPack object_data = 2;
  bool has_object_data() const;
  void clear_object_data();
  const ::OuterMsg::ObjectDataPack& object_data() const;
  ::OuterMsg::ObjectDataPack* release_object_data();
  ::OuterMsg::ObjectDataPack* mutable_object_data();
  void set_allocated_object_data(::OuterMsg::ObjectDataPack* object_data);

  // @@protoc_insertion_point(class_scope:OuterMsg.PubNameData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::OuterMsg::ObjectDataPack* object_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatRemoveRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatRemoveRoom) */ {
 public:
  ChatRemoveRoom();
  virtual ~ChatRemoveRoom();

  ChatRemoveRoom(const ChatRemoveRoom& from);
  ChatRemoveRoom(ChatRemoveRoom&& from) noexcept
    : ChatRemoveRoom() {
    *this = ::std::move(from);
  }

  inline ChatRemoveRoom& operator=(const ChatRemoveRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRemoveRoom& operator=(ChatRemoveRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatRemoveRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRemoveRoom* internal_default_instance() {
    return reinterpret_cast<const ChatRemoveRoom*>(
               &_ChatRemoveRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ChatRemoveRoom& a, ChatRemoveRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRemoveRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRemoveRoom* New() const final {
    return CreateMaybeMessage<ChatRemoveRoom>(nullptr);
  }

  ChatRemoveRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRemoveRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRemoveRoom& from);
  void MergeFrom(const ChatRemoveRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRemoveRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatRemoveRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatRemoveRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatAddPlayerToRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatAddPlayerToRoom) */ {
 public:
  ChatAddPlayerToRoom();
  virtual ~ChatAddPlayerToRoom();

  ChatAddPlayerToRoom(const ChatAddPlayerToRoom& from);
  ChatAddPlayerToRoom(ChatAddPlayerToRoom&& from) noexcept
    : ChatAddPlayerToRoom() {
    *this = ::std::move(from);
  }

  inline ChatAddPlayerToRoom& operator=(const ChatAddPlayerToRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatAddPlayerToRoom& operator=(ChatAddPlayerToRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatAddPlayerToRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatAddPlayerToRoom* internal_default_instance() {
    return reinterpret_cast<const ChatAddPlayerToRoom*>(
               &_ChatAddPlayerToRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ChatAddPlayerToRoom& a, ChatAddPlayerToRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatAddPlayerToRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatAddPlayerToRoom* New() const final {
    return CreateMaybeMessage<ChatAddPlayerToRoom>(nullptr);
  }

  ChatAddPlayerToRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatAddPlayerToRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatAddPlayerToRoom& from);
  void MergeFrom(const ChatAddPlayerToRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatAddPlayerToRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatAddPlayerToRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kPlayerFieldNumber = 1,
    kRoomIdFieldNumber = 3,
    kChatRecordingFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // .OuterMsg.GUID player = 1;
  bool has_player() const;
  void clear_player();
  const ::OuterMsg::GUID& player() const;
  ::OuterMsg::GUID* release_player();
  ::OuterMsg::GUID* mutable_player();
  void set_allocated_player(::OuterMsg::GUID* player);

  // int32 room_id = 3;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 chat_recording = 4;
  void clear_chat_recording();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_recording() const;
  void set_chat_recording(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatAddPlayerToRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::OuterMsg::GUID* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_recording_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatRemovePlayerToRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatRemovePlayerToRoom) */ {
 public:
  ChatRemovePlayerToRoom();
  virtual ~ChatRemovePlayerToRoom();

  ChatRemovePlayerToRoom(const ChatRemovePlayerToRoom& from);
  ChatRemovePlayerToRoom(ChatRemovePlayerToRoom&& from) noexcept
    : ChatRemovePlayerToRoom() {
    *this = ::std::move(from);
  }

  inline ChatRemovePlayerToRoom& operator=(const ChatRemovePlayerToRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRemovePlayerToRoom& operator=(ChatRemovePlayerToRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatRemovePlayerToRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRemovePlayerToRoom* internal_default_instance() {
    return reinterpret_cast<const ChatRemovePlayerToRoom*>(
               &_ChatRemovePlayerToRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ChatRemovePlayerToRoom& a, ChatRemovePlayerToRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRemovePlayerToRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRemovePlayerToRoom* New() const final {
    return CreateMaybeMessage<ChatRemovePlayerToRoom>(nullptr);
  }

  ChatRemovePlayerToRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRemovePlayerToRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRemovePlayerToRoom& from);
  void MergeFrom(const ChatRemovePlayerToRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRemovePlayerToRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatRemovePlayerToRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kPlayerFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // .OuterMsg.GUID player = 1;
  bool has_player() const;
  void clear_player();
  const ::OuterMsg::GUID& player() const;
  ::OuterMsg::GUID* release_player();
  ::OuterMsg::GUID* mutable_player();
  void set_allocated_player(::OuterMsg::GUID* player);

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatRemovePlayerToRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::OuterMsg::GUID* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatPlayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatPlayerInfo) */ {
 public:
  ChatPlayerInfo();
  virtual ~ChatPlayerInfo();

  ChatPlayerInfo(const ChatPlayerInfo& from);
  ChatPlayerInfo(ChatPlayerInfo&& from) noexcept
    : ChatPlayerInfo() {
    *this = ::std::move(from);
  }

  inline ChatPlayerInfo& operator=(const ChatPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatPlayerInfo& operator=(ChatPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const ChatPlayerInfo*>(
               &_ChatPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ChatPlayerInfo& a, ChatPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatPlayerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatPlayerInfo* New() const final {
    return CreateMaybeMessage<ChatPlayerInfo>(nullptr);
  }

  ChatPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatPlayerInfo& from);
  void MergeFrom(const ChatPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatPlayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomInfoFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // bytes custom_info = 2;
  void clear_custom_info();
  const std::string& custom_info() const;
  void set_custom_info(const std::string& value);
  void set_custom_info(std::string&& value);
  void set_custom_info(const char* value);
  void set_custom_info(const void* value, size_t size);
  std::string* mutable_custom_info();
  std::string* release_custom_info();
  void set_allocated_custom_info(std::string* custom_info);

  // .OuterMsg.GUID player = 1;
  bool has_player() const;
  void clear_player();
  const ::OuterMsg::GUID& player() const;
  ::OuterMsg::GUID* release_player();
  ::OuterMsg::GUID* mutable_player();
  void set_allocated_player(::OuterMsg::GUID* player);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatPlayerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_info_;
  ::OuterMsg::GUID* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatPlayerBanned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatPlayerBanned) */ {
 public:
  ChatPlayerBanned();
  virtual ~ChatPlayerBanned();

  ChatPlayerBanned(const ChatPlayerBanned& from);
  ChatPlayerBanned(ChatPlayerBanned&& from) noexcept
    : ChatPlayerBanned() {
    *this = ::std::move(from);
  }

  inline ChatPlayerBanned& operator=(const ChatPlayerBanned& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatPlayerBanned& operator=(ChatPlayerBanned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatPlayerBanned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatPlayerBanned* internal_default_instance() {
    return reinterpret_cast<const ChatPlayerBanned*>(
               &_ChatPlayerBanned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ChatPlayerBanned& a, ChatPlayerBanned& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatPlayerBanned* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatPlayerBanned* New() const final {
    return CreateMaybeMessage<ChatPlayerBanned>(nullptr);
  }

  ChatPlayerBanned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatPlayerBanned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatPlayerBanned& from);
  void MergeFrom(const ChatPlayerBanned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatPlayerBanned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatPlayerBanned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kBannedFieldNumber = 2,
  };
  // .OuterMsg.GUID player = 1;
  bool has_player() const;
  void clear_player();
  const ::OuterMsg::GUID& player() const;
  ::OuterMsg::GUID* release_player();
  ::OuterMsg::GUID* mutable_player();
  void set_allocated_player(::OuterMsg::GUID* player);

  // int32 banned = 2;
  void clear_banned();
  ::PROTOBUF_NAMESPACE_ID::int32 banned() const;
  void set_banned(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatPlayerBanned)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 banned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatClientData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatClientData) */ {
 public:
  ChatClientData();
  virtual ~ChatClientData();

  ChatClientData(const ChatClientData& from);
  ChatClientData(ChatClientData&& from) noexcept
    : ChatClientData() {
    *this = ::std::move(from);
  }

  inline ChatClientData& operator=(const ChatClientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatClientData& operator=(ChatClientData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatClientData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatClientData* internal_default_instance() {
    return reinterpret_cast<const ChatClientData*>(
               &_ChatClientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ChatClientData& a, ChatClientData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatClientData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatClientData* New() const final {
    return CreateMaybeMessage<ChatClientData>(nullptr);
  }

  ChatClientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatClientData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatClientData& from);
  void MergeFrom(const ChatClientData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatClientData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatClientData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .OuterMsg.GUID player = 1;
  bool has_player() const;
  void clear_player();
  const ::OuterMsg::GUID& player() const;
  ::OuterMsg::GUID* release_player();
  ::OuterMsg::GUID* mutable_player();
  void set_allocated_player(::OuterMsg::GUID* player);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatClientData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatMsgRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatMsgRoom) */ {
 public:
  ChatMsgRoom();
  virtual ~ChatMsgRoom();

  ChatMsgRoom(const ChatMsgRoom& from);
  ChatMsgRoom(ChatMsgRoom&& from) noexcept
    : ChatMsgRoom() {
    *this = ::std::move(from);
  }

  inline ChatMsgRoom& operator=(const ChatMsgRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsgRoom& operator=(ChatMsgRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMsgRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMsgRoom* internal_default_instance() {
    return reinterpret_cast<const ChatMsgRoom*>(
               &_ChatMsgRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ChatMsgRoom& a, ChatMsgRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsgRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMsgRoom* New() const final {
    return CreateMaybeMessage<ChatMsgRoom>(nullptr);
  }

  ChatMsgRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMsgRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMsgRoom& from);
  void MergeFrom(const ChatMsgRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsgRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatMsgRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSenderInfoFieldNumber = 3,
    kSenderPlayerFieldNumber = 4,
    kRoomIdFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bytes sender_info = 3;
  void clear_sender_info();
  const std::string& sender_info() const;
  void set_sender_info(const std::string& value);
  void set_sender_info(std::string&& value);
  void set_sender_info(const char* value);
  void set_sender_info(const void* value, size_t size);
  std::string* mutable_sender_info();
  std::string* release_sender_info();
  void set_allocated_sender_info(std::string* sender_info);

  // .OuterMsg.GUID sender_player = 4;
  bool has_sender_player() const;
  void clear_sender_player();
  const ::OuterMsg::GUID& sender_player() const;
  ::OuterMsg::GUID* release_sender_player();
  ::OuterMsg::GUID* mutable_sender_player();
  void set_allocated_sender_player(::OuterMsg::GUID* sender_player);

  // int32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatMsgRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_info_;
  ::OuterMsg::GUID* sender_player_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatMsgPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatMsgPlayer) */ {
 public:
  ChatMsgPlayer();
  virtual ~ChatMsgPlayer();

  ChatMsgPlayer(const ChatMsgPlayer& from);
  ChatMsgPlayer(ChatMsgPlayer&& from) noexcept
    : ChatMsgPlayer() {
    *this = ::std::move(from);
  }

  inline ChatMsgPlayer& operator=(const ChatMsgPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsgPlayer& operator=(ChatMsgPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMsgPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMsgPlayer* internal_default_instance() {
    return reinterpret_cast<const ChatMsgPlayer*>(
               &_ChatMsgPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ChatMsgPlayer& a, ChatMsgPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsgPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMsgPlayer* New() const final {
    return CreateMaybeMessage<ChatMsgPlayer>(nullptr);
  }

  ChatMsgPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMsgPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMsgPlayer& from);
  void MergeFrom(const ChatMsgPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsgPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatMsgPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSenderInfoFieldNumber = 3,
    kTargetPlayerFieldNumber = 1,
    kSenderPlayerFieldNumber = 4,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bytes sender_info = 3;
  void clear_sender_info();
  const std::string& sender_info() const;
  void set_sender_info(const std::string& value);
  void set_sender_info(std::string&& value);
  void set_sender_info(const char* value);
  void set_sender_info(const void* value, size_t size);
  std::string* mutable_sender_info();
  std::string* release_sender_info();
  void set_allocated_sender_info(std::string* sender_info);

  // .OuterMsg.GUID target_player = 1;
  bool has_target_player() const;
  void clear_target_player();
  const ::OuterMsg::GUID& target_player() const;
  ::OuterMsg::GUID* release_target_player();
  ::OuterMsg::GUID* mutable_target_player();
  void set_allocated_target_player(::OuterMsg::GUID* target_player);

  // .OuterMsg.GUID sender_player = 4;
  bool has_sender_player() const;
  void clear_sender_player();
  const ::OuterMsg::GUID& sender_player() const;
  ::OuterMsg::GUID* release_sender_player();
  ::OuterMsg::GUID* mutable_sender_player();
  void set_allocated_sender_player(::OuterMsg::GUID* sender_player);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatMsgPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_info_;
  ::OuterMsg::GUID* target_player_;
  ::OuterMsg::GUID* sender_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatRecording :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ChatRecording) */ {
 public:
  ChatRecording();
  virtual ~ChatRecording();

  ChatRecording(const ChatRecording& from);
  ChatRecording(ChatRecording&& from) noexcept
    : ChatRecording() {
    *this = ::std::move(from);
  }

  inline ChatRecording& operator=(const ChatRecording& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRecording& operator=(ChatRecording&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatRecording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecording* internal_default_instance() {
    return reinterpret_cast<const ChatRecording*>(
               &_ChatRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ChatRecording& a, ChatRecording& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRecording* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRecording* New() const final {
    return CreateMaybeMessage<ChatRecording>(nullptr);
  }

  ChatRecording* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRecording>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRecording& from);
  void MergeFrom(const ChatRecording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRecording* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ChatRecording";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 4,
    kRoomIdFieldNumber = 1,
    kStartFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // repeated bytes msg_list = 4;
  int msg_list_size() const;
  void clear_msg_list();
  const std::string& msg_list(int index) const;
  std::string* mutable_msg_list(int index);
  void set_msg_list(int index, const std::string& value);
  void set_msg_list(int index, std::string&& value);
  void set_msg_list(int index, const char* value);
  void set_msg_list(int index, const void* value, size_t size);
  std::string* add_msg_list();
  void add_msg_list(const std::string& value);
  void add_msg_list(std::string&& value);
  void add_msg_list(const char* value);
  void add_msg_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg_list();

  // int32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ChatRecording)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PlayerRename :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PlayerRename) */ {
 public:
  PlayerRename();
  virtual ~PlayerRename();

  PlayerRename(const PlayerRename& from);
  PlayerRename(PlayerRename&& from) noexcept
    : PlayerRename() {
    *this = ::std::move(from);
  }

  inline PlayerRename& operator=(const PlayerRename& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerRename& operator=(PlayerRename&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerRename& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRename* internal_default_instance() {
    return reinterpret_cast<const PlayerRename*>(
               &_PlayerRename_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PlayerRename& a, PlayerRename& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerRename* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerRename* New() const final {
    return CreateMaybeMessage<PlayerRename>(nullptr);
  }

  PlayerRename* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerRename>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerRename& from);
  void MergeFrom(const PlayerRename& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerRename* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PlayerRename";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerNameNewFieldNumber = 3,
    kPlayerNameOldFieldNumber = 4,
    kPlayerIdFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // bytes player_name_new = 3;
  void clear_player_name_new();
  const std::string& player_name_new() const;
  void set_player_name_new(const std::string& value);
  void set_player_name_new(std::string&& value);
  void set_player_name_new(const char* value);
  void set_player_name_new(const void* value, size_t size);
  std::string* mutable_player_name_new();
  std::string* release_player_name_new();
  void set_allocated_player_name_new(std::string* player_name_new);

  // bytes player_name_old = 4;
  void clear_player_name_old();
  const std::string& player_name_old() const;
  void set_player_name_old(const std::string& value);
  void set_player_name_old(std::string&& value);
  void set_player_name_old(const char* value);
  void set_player_name_old(const void* value, size_t size);
  std::string* mutable_player_name_old();
  std::string* release_player_name_old();
  void set_allocated_player_name_old(std::string* player_name_old);

  // .OuterMsg.GUID player_id = 2;
  bool has_player_id() const;
  void clear_player_id();
  const ::OuterMsg::GUID& player_id() const;
  ::OuterMsg::GUID* release_player_id();
  ::OuterMsg::GUID* mutable_player_id();
  void set_allocated_player_id(::OuterMsg::GUID* player_id);

  // @@protoc_insertion_point(class_scope:OuterMsg.PlayerRename)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_new_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_old_;
  ::OuterMsg::GUID* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ExtraMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ExtraMsg) */ {
 public:
  ExtraMsg();
  virtual ~ExtraMsg();

  ExtraMsg(const ExtraMsg& from);
  ExtraMsg(ExtraMsg&& from) noexcept
    : ExtraMsg() {
    *this = ::std::move(from);
  }

  inline ExtraMsg& operator=(const ExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraMsg& operator=(ExtraMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtraMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtraMsg* internal_default_instance() {
    return reinterpret_cast<const ExtraMsg*>(
               &_ExtraMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ExtraMsg& a, ExtraMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtraMsg* New() const final {
    return CreateMaybeMessage<ExtraMsg>(nullptr);
  }

  ExtraMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtraMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtraMsg& from);
  void MergeFrom(const ExtraMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ExtraMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kObjectIdFieldNumber = 4,
    kServerTypeFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kGameIdFieldNumber = 3,
    kMsgTypeFieldNumber = 7,
    kSocketFieldNumber = 6,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // .OuterMsg.GUID object_id = 4;
  bool has_object_id() const;
  void clear_object_id();
  const ::OuterMsg::GUID& object_id() const;
  ::OuterMsg::GUID* release_object_id();
  ::OuterMsg::GUID* mutable_object_id();
  void set_allocated_object_id(::OuterMsg::GUID* object_id);

  // int32 server_type = 1;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::int32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 game_id = 3;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 msg_type = 7;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 socket = 6;
  void clear_socket();
  ::PROTOBUF_NAMESPACE_ID::int64 socket() const;
  void set_socket(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ExtraMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::OuterMsg::GUID* object_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 socket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AttachData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.AttachData) */ {
 public:
  AttachData();
  virtual ~AttachData();

  AttachData(const AttachData& from);
  AttachData(AttachData&& from) noexcept
    : AttachData() {
    *this = ::std::move(from);
  }

  inline AttachData& operator=(const AttachData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachData& operator=(AttachData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttachData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachData* internal_default_instance() {
    return reinterpret_cast<const AttachData*>(
               &_AttachData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(AttachData& a, AttachData& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttachData* New() const final {
    return CreateMaybeMessage<AttachData>(nullptr);
  }

  AttachData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttachData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttachData& from);
  void MergeFrom(const AttachData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.AttachData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.AttachData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListCreate) */ {
 public:
  RankListCreate();
  virtual ~RankListCreate();

  RankListCreate(const RankListCreate& from);
  RankListCreate(RankListCreate&& from) noexcept
    : RankListCreate() {
    *this = ::std::move(from);
  }

  inline RankListCreate& operator=(const RankListCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListCreate& operator=(RankListCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListCreate* internal_default_instance() {
    return reinterpret_cast<const RankListCreate*>(
               &_RankListCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(RankListCreate& a, RankListCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListCreate* New() const final {
    return CreateMaybeMessage<RankListCreate>(nullptr);
  }

  RankListCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListCreate& from);
  void MergeFrom(const RankListCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 3,
    kDataNameFieldNumber = 4,
    kNameFieldNumber = 1,
    kAttachDataFieldNumber = 5,
    kLimitFieldNumber = 2,
  };
  // repeated .OuterMsg.PropertyInt order = 3;
  int order_size() const;
  void clear_order();
  ::OuterMsg::PropertyInt* mutable_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >*
      mutable_order();
  const ::OuterMsg::PropertyInt& order(int index) const;
  ::OuterMsg::PropertyInt* add_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >&
      order() const;

  // repeated bytes data_name = 4;
  int data_name_size() const;
  void clear_data_name();
  const std::string& data_name(int index) const;
  std::string* mutable_data_name(int index);
  void set_data_name(int index, const std::string& value);
  void set_data_name(int index, std::string&& value);
  void set_data_name(int index, const char* value);
  void set_data_name(int index, const void* value, size_t size);
  std::string* add_data_name();
  void add_data_name(const std::string& value);
  void add_data_name(std::string&& value);
  void add_data_name(const char* value);
  void add_data_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_name();

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 5;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // int32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt > order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListCreateAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListCreateAck) */ {
 public:
  RankListCreateAck();
  virtual ~RankListCreateAck();

  RankListCreateAck(const RankListCreateAck& from);
  RankListCreateAck(RankListCreateAck&& from) noexcept
    : RankListCreateAck() {
    *this = ::std::move(from);
  }

  inline RankListCreateAck& operator=(const RankListCreateAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListCreateAck& operator=(RankListCreateAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListCreateAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListCreateAck* internal_default_instance() {
    return reinterpret_cast<const RankListCreateAck*>(
               &_RankListCreateAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RankListCreateAck& a, RankListCreateAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListCreateAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListCreateAck* New() const final {
    return CreateMaybeMessage<RankListCreateAck>(nullptr);
  }

  RankListCreateAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListCreateAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListCreateAck& from);
  void MergeFrom(const RankListCreateAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListCreateAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListCreateAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttachDataFieldNumber = 3,
    kRetCodeFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 3;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.RankListCode ret_code = 2;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListCreateAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListDelete :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListDelete) */ {
 public:
  RankListDelete();
  virtual ~RankListDelete();

  RankListDelete(const RankListDelete& from);
  RankListDelete(RankListDelete&& from) noexcept
    : RankListDelete() {
    *this = ::std::move(from);
  }

  inline RankListDelete& operator=(const RankListDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListDelete& operator=(RankListDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListDelete* internal_default_instance() {
    return reinterpret_cast<const RankListDelete*>(
               &_RankListDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RankListDelete& a, RankListDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListDelete* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListDelete* New() const final {
    return CreateMaybeMessage<RankListDelete>(nullptr);
  }

  RankListDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListDelete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListDelete& from);
  void MergeFrom(const RankListDelete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListDelete";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttachDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 2;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListDelete)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListDeleteAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListDeleteAck) */ {
 public:
  RankListDeleteAck();
  virtual ~RankListDeleteAck();

  RankListDeleteAck(const RankListDeleteAck& from);
  RankListDeleteAck(RankListDeleteAck&& from) noexcept
    : RankListDeleteAck() {
    *this = ::std::move(from);
  }

  inline RankListDeleteAck& operator=(const RankListDeleteAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListDeleteAck& operator=(RankListDeleteAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListDeleteAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListDeleteAck* internal_default_instance() {
    return reinterpret_cast<const RankListDeleteAck*>(
               &_RankListDeleteAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RankListDeleteAck& a, RankListDeleteAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListDeleteAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListDeleteAck* New() const final {
    return CreateMaybeMessage<RankListDeleteAck>(nullptr);
  }

  RankListDeleteAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListDeleteAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListDeleteAck& from);
  void MergeFrom(const RankListDeleteAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListDeleteAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListDeleteAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttachDataFieldNumber = 3,
    kRetCodeFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 3;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.RankListCode ret_code = 2;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListDeleteAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListScore) */ {
 public:
  RankListScore();
  virtual ~RankListScore();

  RankListScore(const RankListScore& from);
  RankListScore(RankListScore&& from) noexcept
    : RankListScore() {
    *this = ::std::move(from);
  }

  inline RankListScore& operator=(const RankListScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListScore& operator=(RankListScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListScore* internal_default_instance() {
    return reinterpret_cast<const RankListScore*>(
               &_RankListScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RankListScore& a, RankListScore& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListScore* New() const final {
    return CreateMaybeMessage<RankListScore>(nullptr);
  }

  RankListScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListScore& from);
  void MergeFrom(const RankListScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrDataFieldNumber = 3,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kAttachDataFieldNumber = 4,
    kInsertTimeFieldNumber = 5,
  };
  // repeated .OuterMsg.PropertyInt arr_data = 3;
  int arr_data_size() const;
  void clear_arr_data();
  ::OuterMsg::PropertyInt* mutable_arr_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >*
      mutable_arr_data();
  const ::OuterMsg::PropertyInt& arr_data(int index) const;
  ::OuterMsg::PropertyInt* add_arr_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >&
      arr_data() const;

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID id = 2;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.AttachData attach_data = 4;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // int64 insert_time = 5;
  void clear_insert_time();
  ::PROTOBUF_NAMESPACE_ID::int64 insert_time() const;
  void set_insert_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt > arr_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* id_;
  ::OuterMsg::AttachData* attach_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 insert_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListScoreAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListScoreAck) */ {
 public:
  RankListScoreAck();
  virtual ~RankListScoreAck();

  RankListScoreAck(const RankListScoreAck& from);
  RankListScoreAck(RankListScoreAck&& from) noexcept
    : RankListScoreAck() {
    *this = ::std::move(from);
  }

  inline RankListScoreAck& operator=(const RankListScoreAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListScoreAck& operator=(RankListScoreAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListScoreAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListScoreAck* internal_default_instance() {
    return reinterpret_cast<const RankListScoreAck*>(
               &_RankListScoreAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RankListScoreAck& a, RankListScoreAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListScoreAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListScoreAck* New() const final {
    return CreateMaybeMessage<RankListScoreAck>(nullptr);
  }

  RankListScoreAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListScoreAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListScoreAck& from);
  void MergeFrom(const RankListScoreAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListScoreAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListScoreAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kAttachDataFieldNumber = 4,
    kRetCodeFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID id = 2;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.AttachData attach_data = 4;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.RankListCode ret_code = 3;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListScoreAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* id_;
  ::OuterMsg::AttachData* attach_data_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class RankListData_MapDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListData_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListData_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  RankListData_MapDataEntry_DoNotUse();
  RankListData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RankListData_MapDataEntry_DoNotUse& other);
  static const RankListData_MapDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RankListData_MapDataEntry_DoNotUse*>(&_RankListData_MapDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "OuterMsg.RankListData.MapDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[64];
  }

  public:
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListData) */ {
 public:
  RankListData();
  virtual ~RankListData();

  RankListData(const RankListData& from);
  RankListData(RankListData&& from) noexcept
    : RankListData() {
    *this = ::std::move(from);
  }

  inline RankListData& operator=(const RankListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListData& operator=(RankListData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListData* internal_default_instance() {
    return reinterpret_cast<const RankListData*>(
               &_RankListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RankListData& a, RankListData& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListData* New() const final {
    return CreateMaybeMessage<RankListData>(nullptr);
  }

  RankListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListData& from);
  void MergeFrom(const RankListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapDataFieldNumber = 2,
    kIdFieldNumber = 1,
    kAttachDataFieldNumber = 3,
  };
  // map<string, bytes> map_data = 2;
  int map_data_size() const;
  void clear_map_data();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_data();

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.AttachData attach_data = 3;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RankListData_MapDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > map_data_;
  ::OuterMsg::GUID* id_;
  ::OuterMsg::AttachData* attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class RankListDataAck_MapDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListDataAck_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListDataAck_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  RankListDataAck_MapDataEntry_DoNotUse();
  RankListDataAck_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RankListDataAck_MapDataEntry_DoNotUse& other);
  static const RankListDataAck_MapDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RankListDataAck_MapDataEntry_DoNotUse*>(&_RankListDataAck_MapDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "OuterMsg.RankListDataAck.MapDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[66];
  }

  public:
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListDataAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListDataAck) */ {
 public:
  RankListDataAck();
  virtual ~RankListDataAck();

  RankListDataAck(const RankListDataAck& from);
  RankListDataAck(RankListDataAck&& from) noexcept
    : RankListDataAck() {
    *this = ::std::move(from);
  }

  inline RankListDataAck& operator=(const RankListDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListDataAck& operator=(RankListDataAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListDataAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListDataAck* internal_default_instance() {
    return reinterpret_cast<const RankListDataAck*>(
               &_RankListDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(RankListDataAck& a, RankListDataAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListDataAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListDataAck* New() const final {
    return CreateMaybeMessage<RankListDataAck>(nullptr);
  }

  RankListDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListDataAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListDataAck& from);
  void MergeFrom(const RankListDataAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListDataAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListDataAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapDataFieldNumber = 2,
    kIdFieldNumber = 1,
    kAttachDataFieldNumber = 4,
    kRetCodeFieldNumber = 3,
  };
  // map<string, bytes> map_data = 2;
  int map_data_size() const;
  void clear_map_data();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_data();

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.AttachData attach_data = 4;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.RankListCode ret_code = 3;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListDataAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RankListDataAck_MapDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > map_data_;
  ::OuterMsg::GUID* id_;
  ::OuterMsg::AttachData* attach_data_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListDataArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListDataArray) */ {
 public:
  RankListDataArray();
  virtual ~RankListDataArray();

  RankListDataArray(const RankListDataArray& from);
  RankListDataArray(RankListDataArray&& from) noexcept
    : RankListDataArray() {
    *this = ::std::move(from);
  }

  inline RankListDataArray& operator=(const RankListDataArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListDataArray& operator=(RankListDataArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListDataArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListDataArray* internal_default_instance() {
    return reinterpret_cast<const RankListDataArray*>(
               &_RankListDataArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(RankListDataArray& a, RankListDataArray& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListDataArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListDataArray* New() const final {
    return CreateMaybeMessage<RankListDataArray>(nullptr);
  }

  RankListDataArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListDataArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListDataArray& from);
  void MergeFrom(const RankListDataArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListDataArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListDataArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdListFieldNumber = 1,
    kNameListFieldNumber = 2,
    kAttachDataFieldNumber = 3,
  };
  // repeated .OuterMsg.GUID id_list = 1;
  int id_list_size() const;
  void clear_id_list();
  ::OuterMsg::GUID* mutable_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
      mutable_id_list();
  const ::OuterMsg::GUID& id_list(int index) const;
  ::OuterMsg::GUID* add_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
      id_list() const;

  // repeated bytes name_list = 2;
  int name_list_size() const;
  void clear_name_list();
  const std::string& name_list(int index) const;
  std::string* mutable_name_list(int index);
  void set_name_list(int index, const std::string& value);
  void set_name_list(int index, std::string&& value);
  void set_name_list(int index, const char* value);
  void set_name_list(int index, const void* value, size_t size);
  std::string* add_name_list();
  void add_name_list(const std::string& value);
  void add_name_list(std::string&& value);
  void add_name_list(const char* value);
  void add_name_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_list();

  // .OuterMsg.AttachData attach_data = 3;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListDataArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID > id_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_list_;
  ::OuterMsg::AttachData* attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListDataArrayAck_RankData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListDataArrayAck.RankData) */ {
 public:
  RankListDataArrayAck_RankData();
  virtual ~RankListDataArrayAck_RankData();

  RankListDataArrayAck_RankData(const RankListDataArrayAck_RankData& from);
  RankListDataArrayAck_RankData(RankListDataArrayAck_RankData&& from) noexcept
    : RankListDataArrayAck_RankData() {
    *this = ::std::move(from);
  }

  inline RankListDataArrayAck_RankData& operator=(const RankListDataArrayAck_RankData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListDataArrayAck_RankData& operator=(RankListDataArrayAck_RankData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListDataArrayAck_RankData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListDataArrayAck_RankData* internal_default_instance() {
    return reinterpret_cast<const RankListDataArrayAck_RankData*>(
               &_RankListDataArrayAck_RankData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(RankListDataArrayAck_RankData& a, RankListDataArrayAck_RankData& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListDataArrayAck_RankData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListDataArrayAck_RankData* New() const final {
    return CreateMaybeMessage<RankListDataArrayAck_RankData>(nullptr);
  }

  RankListDataArrayAck_RankData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListDataArrayAck_RankData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListDataArrayAck_RankData& from);
  void MergeFrom(const RankListDataArrayAck_RankData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListDataArrayAck_RankData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListDataArrayAck.RankData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataListFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated bytes data_list = 2;
  int data_list_size() const;
  void clear_data_list();
  const std::string& data_list(int index) const;
  std::string* mutable_data_list(int index);
  void set_data_list(int index, const std::string& value);
  void set_data_list(int index, std::string&& value);
  void set_data_list(int index, const char* value);
  void set_data_list(int index, const void* value, size_t size);
  std::string* add_data_list();
  void add_data_list(const std::string& value);
  void add_data_list(std::string&& value);
  void add_data_list(const char* value);
  void add_data_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_list();

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListDataArrayAck.RankData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_list_;
  ::OuterMsg::GUID* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListDataArrayAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListDataArrayAck) */ {
 public:
  RankListDataArrayAck();
  virtual ~RankListDataArrayAck();

  RankListDataArrayAck(const RankListDataArrayAck& from);
  RankListDataArrayAck(RankListDataArrayAck&& from) noexcept
    : RankListDataArrayAck() {
    *this = ::std::move(from);
  }

  inline RankListDataArrayAck& operator=(const RankListDataArrayAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListDataArrayAck& operator=(RankListDataArrayAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListDataArrayAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListDataArrayAck* internal_default_instance() {
    return reinterpret_cast<const RankListDataArrayAck*>(
               &_RankListDataArrayAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(RankListDataArrayAck& a, RankListDataArrayAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListDataArrayAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListDataArrayAck* New() const final {
    return CreateMaybeMessage<RankListDataArrayAck>(nullptr);
  }

  RankListDataArrayAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListDataArrayAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListDataArrayAck& from);
  void MergeFrom(const RankListDataArrayAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListDataArrayAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListDataArrayAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RankListDataArrayAck_RankData RankData;

  // accessors -------------------------------------------------------

  enum : int {
    kNameListFieldNumber = 1,
    kDataListFieldNumber = 2,
    kAttachDataFieldNumber = 4,
    kRetCodeFieldNumber = 3,
  };
  // repeated bytes name_list = 1;
  int name_list_size() const;
  void clear_name_list();
  const std::string& name_list(int index) const;
  std::string* mutable_name_list(int index);
  void set_name_list(int index, const std::string& value);
  void set_name_list(int index, std::string&& value);
  void set_name_list(int index, const char* value);
  void set_name_list(int index, const void* value, size_t size);
  std::string* add_name_list();
  void add_name_list(const std::string& value);
  void add_name_list(std::string&& value);
  void add_name_list(const char* value);
  void add_name_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_list();

  // repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
  int data_list_size() const;
  void clear_data_list();
  ::OuterMsg::RankListDataArrayAck_RankData* mutable_data_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListDataArrayAck_RankData >*
      mutable_data_list();
  const ::OuterMsg::RankListDataArrayAck_RankData& data_list(int index) const;
  ::OuterMsg::RankListDataArrayAck_RankData* add_data_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListDataArrayAck_RankData >&
      data_list() const;

  // .OuterMsg.AttachData attach_data = 4;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.RankListCode ret_code = 3;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListDataArrayAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListDataArrayAck_RankData > data_list_;
  ::OuterMsg::AttachData* attach_data_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRank) */ {
 public:
  RankListRank();
  virtual ~RankListRank();

  RankListRank(const RankListRank& from);
  RankListRank(RankListRank&& from) noexcept
    : RankListRank() {
    *this = ::std::move(from);
  }

  inline RankListRank& operator=(const RankListRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRank& operator=(RankListRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRank* internal_default_instance() {
    return reinterpret_cast<const RankListRank*>(
               &_RankListRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(RankListRank& a, RankListRank& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRank* New() const final {
    return CreateMaybeMessage<RankListRank>(nullptr);
  }

  RankListRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRank& from);
  void MergeFrom(const RankListRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNameFieldNumber = 4,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kAttachDataFieldNumber = 5,
    kNoDataFieldNumber = 3,
  };
  // repeated bytes data_name = 4;
  int data_name_size() const;
  void clear_data_name();
  const std::string& data_name(int index) const;
  std::string* mutable_data_name(int index);
  void set_data_name(int index, const std::string& value);
  void set_data_name(int index, std::string&& value);
  void set_data_name(int index, const char* value);
  void set_data_name(int index, const void* value, size_t size);
  std::string* add_data_name();
  void add_data_name(const std::string& value);
  void add_data_name(std::string&& value);
  void add_data_name(const char* value);
  void add_data_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_name();

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID id = 2;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.AttachData attach_data = 5;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // int32 no_data = 3;
  void clear_no_data();
  ::PROTOBUF_NAMESPACE_ID::int32 no_data() const;
  void set_no_data(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* id_;
  ::OuterMsg::AttachData* attach_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class RankListRankAck_MapDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListRankAck_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListRankAck_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  RankListRankAck_MapDataEntry_DoNotUse();
  RankListRankAck_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RankListRankAck_MapDataEntry_DoNotUse& other);
  static const RankListRankAck_MapDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RankListRankAck_MapDataEntry_DoNotUse*>(&_RankListRankAck_MapDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "OuterMsg.RankListRankAck.MapDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[72];
  }

  public:
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRankAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRankAck) */ {
 public:
  RankListRankAck();
  virtual ~RankListRankAck();

  RankListRankAck(const RankListRankAck& from);
  RankListRankAck(RankListRankAck&& from) noexcept
    : RankListRankAck() {
    *this = ::std::move(from);
  }

  inline RankListRankAck& operator=(const RankListRankAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRankAck& operator=(RankListRankAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRankAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRankAck* internal_default_instance() {
    return reinterpret_cast<const RankListRankAck*>(
               &_RankListRankAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(RankListRankAck& a, RankListRankAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRankAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRankAck* New() const final {
    return CreateMaybeMessage<RankListRankAck>(nullptr);
  }

  RankListRankAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRankAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRankAck& from);
  void MergeFrom(const RankListRankAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRankAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRankAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapDataFieldNumber = 4,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kAttachDataFieldNumber = 6,
    kRankFieldNumber = 3,
    kRetCodeFieldNumber = 5,
  };
  // map<string, bytes> map_data = 4;
  int map_data_size() const;
  void clear_map_data();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_data();

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID id = 2;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // .OuterMsg.AttachData attach_data = 6;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // int32 rank = 3;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.RankListCode ret_code = 5;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRankAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RankListRankAck_MapDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > map_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* id_;
  ::OuterMsg::AttachData* attach_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRankArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRankArray) */ {
 public:
  RankListRankArray();
  virtual ~RankListRankArray();

  RankListRankArray(const RankListRankArray& from);
  RankListRankArray(RankListRankArray&& from) noexcept
    : RankListRankArray() {
    *this = ::std::move(from);
  }

  inline RankListRankArray& operator=(const RankListRankArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRankArray& operator=(RankListRankArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRankArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRankArray* internal_default_instance() {
    return reinterpret_cast<const RankListRankArray*>(
               &_RankListRankArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(RankListRankArray& a, RankListRankArray& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRankArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRankArray* New() const final {
    return CreateMaybeMessage<RankListRankArray>(nullptr);
  }

  RankListRankArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRankArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRankArray& from);
  void MergeFrom(const RankListRankArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRankArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRankArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 4,
    kNameFieldNumber = 3,
    kAttachDataFieldNumber = 1,
  };
  // repeated .OuterMsg.GUID ids = 4;
  int ids_size() const;
  void clear_ids();
  ::OuterMsg::GUID* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
      mutable_ids();
  const ::OuterMsg::GUID& ids(int index) const;
  ::OuterMsg::GUID* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
      ids() const;

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 1;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRankArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID > ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRankArrayAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRankArrayAck) */ {
 public:
  RankListRankArrayAck();
  virtual ~RankListRankArrayAck();

  RankListRankArrayAck(const RankListRankArrayAck& from);
  RankListRankArrayAck(RankListRankArrayAck&& from) noexcept
    : RankListRankArrayAck() {
    *this = ::std::move(from);
  }

  inline RankListRankArrayAck& operator=(const RankListRankArrayAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRankArrayAck& operator=(RankListRankArrayAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRankArrayAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRankArrayAck* internal_default_instance() {
    return reinterpret_cast<const RankListRankArrayAck*>(
               &_RankListRankArrayAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(RankListRankArrayAck& a, RankListRankArrayAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRankArrayAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRankArrayAck* New() const final {
    return CreateMaybeMessage<RankListRankArrayAck>(nullptr);
  }

  RankListRankArrayAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRankArrayAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRankArrayAck& from);
  void MergeFrom(const RankListRankArrayAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRankArrayAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRankArrayAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 4,
    kRanksFieldNumber = 5,
    kNameFieldNumber = 3,
    kAttachDataFieldNumber = 1,
    kRetCodeFieldNumber = 2,
  };
  // repeated .OuterMsg.GUID ids = 4;
  int ids_size() const;
  void clear_ids();
  ::OuterMsg::GUID* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
      mutable_ids();
  const ::OuterMsg::GUID& ids(int index) const;
  ::OuterMsg::GUID* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
      ids() const;

  // repeated int32 ranks = 5;
  int ranks_size() const;
  void clear_ranks();
  ::PROTOBUF_NAMESPACE_ID::int32 ranks(int index) const;
  void set_ranks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ranks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ranks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ranks();

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 1;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.RankListCode ret_code = 2;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRankArrayAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID > ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ranks_;
  mutable std::atomic<int> _ranks_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class RankListRangeData_MapDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListRangeData_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RankListRangeData_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  RankListRangeData_MapDataEntry_DoNotUse();
  RankListRangeData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RankListRangeData_MapDataEntry_DoNotUse& other);
  static const RankListRangeData_MapDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RankListRangeData_MapDataEntry_DoNotUse*>(&_RankListRangeData_MapDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "OuterMsg.RankListRangeData.MapDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[76];
  }

  public:
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRangeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRangeData) */ {
 public:
  RankListRangeData();
  virtual ~RankListRangeData();

  RankListRangeData(const RankListRangeData& from);
  RankListRangeData(RankListRangeData&& from) noexcept
    : RankListRangeData() {
    *this = ::std::move(from);
  }

  inline RankListRangeData& operator=(const RankListRangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRangeData& operator=(RankListRangeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRangeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRangeData* internal_default_instance() {
    return reinterpret_cast<const RankListRangeData*>(
               &_RankListRangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(RankListRangeData& a, RankListRangeData& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRangeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRangeData* New() const final {
    return CreateMaybeMessage<RankListRangeData>(nullptr);
  }

  RankListRangeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRangeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRangeData& from);
  void MergeFrom(const RankListRangeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRangeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRangeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapDataFieldNumber = 3,
    kIdFieldNumber = 1,
    kRankFieldNumber = 2,
  };
  // map<string, bytes> map_data = 3;
  int map_data_size() const;
  void clear_map_data();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_data();

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // int32 rank = 2;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRangeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RankListRangeData_MapDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > map_data_;
  ::OuterMsg::GUID* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRange) */ {
 public:
  RankListRange();
  virtual ~RankListRange();

  RankListRange(const RankListRange& from);
  RankListRange(RankListRange&& from) noexcept
    : RankListRange() {
    *this = ::std::move(from);
  }

  inline RankListRange& operator=(const RankListRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRange& operator=(RankListRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRange* internal_default_instance() {
    return reinterpret_cast<const RankListRange*>(
               &_RankListRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(RankListRange& a, RankListRange& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRange* New() const final {
    return CreateMaybeMessage<RankListRange>(nullptr);
  }

  RankListRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRange& from);
  void MergeFrom(const RankListRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrRankFieldNumber = 4,
    kDataNameFieldNumber = 6,
    kNameFieldNumber = 1,
    kAttachDataFieldNumber = 7,
    kStartFieldNumber = 2,
    kCountFieldNumber = 3,
    kNoDataFieldNumber = 5,
  };
  // repeated int32 arr_rank = 4;
  int arr_rank_size() const;
  void clear_arr_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 arr_rank(int index) const;
  void set_arr_rank(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arr_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arr_rank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arr_rank();

  // repeated bytes data_name = 6;
  int data_name_size() const;
  void clear_data_name();
  const std::string& data_name(int index) const;
  std::string* mutable_data_name(int index);
  void set_data_name(int index, const std::string& value);
  void set_data_name(int index, std::string&& value);
  void set_data_name(int index, const char* value);
  void set_data_name(int index, const void* value, size_t size);
  std::string* add_data_name();
  void add_data_name(const std::string& value);
  void add_data_name(std::string&& value);
  void add_data_name(const char* value);
  void add_data_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_name();

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 7;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 no_data = 5;
  void clear_no_data();
  ::PROTOBUF_NAMESPACE_ID::int32 no_data() const;
  void set_no_data(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arr_rank_;
  mutable std::atomic<int> _arr_rank_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListRangeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListRangeAck) */ {
 public:
  RankListRangeAck();
  virtual ~RankListRangeAck();

  RankListRangeAck(const RankListRangeAck& from);
  RankListRangeAck(RankListRangeAck&& from) noexcept
    : RankListRangeAck() {
    *this = ::std::move(from);
  }

  inline RankListRangeAck& operator=(const RankListRangeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListRangeAck& operator=(RankListRangeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListRangeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRangeAck* internal_default_instance() {
    return reinterpret_cast<const RankListRangeAck*>(
               &_RankListRangeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(RankListRangeAck& a, RankListRangeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListRangeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListRangeAck* New() const final {
    return CreateMaybeMessage<RankListRangeAck>(nullptr);
  }

  RankListRangeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListRangeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListRangeAck& from);
  void MergeFrom(const RankListRangeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRangeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListRangeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kNameFieldNumber = 1,
    kAttachDataFieldNumber = 7,
    kStartFieldNumber = 2,
    kCountFieldNumber = 3,
    kMaxRankFieldNumber = 4,
    kRetCodeFieldNumber = 6,
  };
  // repeated .OuterMsg.RankListRangeData data = 5;
  int data_size() const;
  void clear_data();
  ::OuterMsg::RankListRangeData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListRangeData >*
      mutable_data();
  const ::OuterMsg::RankListRangeData& data(int index) const;
  ::OuterMsg::RankListRangeData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListRangeData >&
      data() const;

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 7;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_rank = 4;
  void clear_max_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 max_rank() const;
  void set_max_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .OuterMsg.RankListCode ret_code = 6;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListRangeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListRangeData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_rank_;
  int ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListInit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListInit) */ {
 public:
  RankListInit();
  virtual ~RankListInit();

  RankListInit(const RankListInit& from);
  RankListInit(RankListInit&& from) noexcept
    : RankListInit() {
    *this = ::std::move(from);
  }

  inline RankListInit& operator=(const RankListInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListInit& operator=(RankListInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListInit* internal_default_instance() {
    return reinterpret_cast<const RankListInit*>(
               &_RankListInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(RankListInit& a, RankListInit& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListInit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListInit* New() const final {
    return CreateMaybeMessage<RankListInit>(nullptr);
  }

  RankListInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListInit& from);
  void MergeFrom(const RankListInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListInit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRankFieldNumber = 2,
    kCreateFieldNumber = 1,
    kFinishFieldNumber = 3,
  };
  // repeated .OuterMsg.RankListScore data_rank = 2;
  int data_rank_size() const;
  void clear_data_rank();
  ::OuterMsg::RankListScore* mutable_data_rank(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListScore >*
      mutable_data_rank();
  const ::OuterMsg::RankListScore& data_rank(int index) const;
  ::OuterMsg::RankListScore* add_data_rank();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListScore >&
      data_rank() const;

  // .OuterMsg.RankListCreate create = 1;
  bool has_create() const;
  void clear_create();
  const ::OuterMsg::RankListCreate& create() const;
  ::OuterMsg::RankListCreate* release_create();
  ::OuterMsg::RankListCreate* mutable_create();
  void set_allocated_create(::OuterMsg::RankListCreate* create);

  // int32 finish = 3;
  void clear_finish();
  ::PROTOBUF_NAMESPACE_ID::int32 finish() const;
  void set_finish(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListInit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListScore > data_rank_;
  ::OuterMsg::RankListCreate* create_;
  ::PROTOBUF_NAMESPACE_ID::int32 finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListUpdate) */ {
 public:
  RankListUpdate();
  virtual ~RankListUpdate();

  RankListUpdate(const RankListUpdate& from);
  RankListUpdate(RankListUpdate&& from) noexcept
    : RankListUpdate() {
    *this = ::std::move(from);
  }

  inline RankListUpdate& operator=(const RankListUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListUpdate& operator=(RankListUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListUpdate* internal_default_instance() {
    return reinterpret_cast<const RankListUpdate*>(
               &_RankListUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(RankListUpdate& a, RankListUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListUpdate* New() const final {
    return CreateMaybeMessage<RankListUpdate>(nullptr);
  }

  RankListUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListUpdate& from);
  void MergeFrom(const RankListUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDelFieldNumber = 2,
    kUpdateFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID del = 2;
  bool has_del() const;
  void clear_del();
  const ::OuterMsg::GUID& del() const;
  ::OuterMsg::GUID* release_del();
  ::OuterMsg::GUID* mutable_del();
  void set_allocated_del(::OuterMsg::GUID* del);

  // .OuterMsg.RankListScore update = 3;
  bool has_update() const;
  void clear_update();
  const ::OuterMsg::RankListScore& update() const;
  ::OuterMsg::RankListScore* release_update();
  ::OuterMsg::RankListScore* mutable_update();
  void set_allocated_update(::OuterMsg::RankListScore* update);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* del_;
  ::OuterMsg::RankListScore* update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListSwapRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListSwapRank) */ {
 public:
  RankListSwapRank();
  virtual ~RankListSwapRank();

  RankListSwapRank(const RankListSwapRank& from);
  RankListSwapRank(RankListSwapRank&& from) noexcept
    : RankListSwapRank() {
    *this = ::std::move(from);
  }

  inline RankListSwapRank& operator=(const RankListSwapRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListSwapRank& operator=(RankListSwapRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListSwapRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListSwapRank* internal_default_instance() {
    return reinterpret_cast<const RankListSwapRank*>(
               &_RankListSwapRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(RankListSwapRank& a, RankListSwapRank& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListSwapRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListSwapRank* New() const final {
    return CreateMaybeMessage<RankListSwapRank>(nullptr);
  }

  RankListSwapRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListSwapRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListSwapRank& from);
  void MergeFrom(const RankListSwapRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListSwapRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListSwapRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAttachDataFieldNumber = 1,
    kKey1FieldNumber = 4,
    kKey2FieldNumber = 5,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 1;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.GUID key1 = 4;
  bool has_key1() const;
  void clear_key1();
  const ::OuterMsg::GUID& key1() const;
  ::OuterMsg::GUID* release_key1();
  ::OuterMsg::GUID* mutable_key1();
  void set_allocated_key1(::OuterMsg::GUID* key1);

  // .OuterMsg.GUID key2 = 5;
  bool has_key2() const;
  void clear_key2();
  const ::OuterMsg::GUID& key2() const;
  ::OuterMsg::GUID* release_key2();
  ::OuterMsg::GUID* mutable_key2();
  void set_allocated_key2(::OuterMsg::GUID* key2);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListSwapRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  ::OuterMsg::GUID* key1_;
  ::OuterMsg::GUID* key2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RankListSwapRankAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RankListSwapRankAck) */ {
 public:
  RankListSwapRankAck();
  virtual ~RankListSwapRankAck();

  RankListSwapRankAck(const RankListSwapRankAck& from);
  RankListSwapRankAck(RankListSwapRankAck&& from) noexcept
    : RankListSwapRankAck() {
    *this = ::std::move(from);
  }

  inline RankListSwapRankAck& operator=(const RankListSwapRankAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListSwapRankAck& operator=(RankListSwapRankAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListSwapRankAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListSwapRankAck* internal_default_instance() {
    return reinterpret_cast<const RankListSwapRankAck*>(
               &_RankListSwapRankAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(RankListSwapRankAck& a, RankListSwapRankAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListSwapRankAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListSwapRankAck* New() const final {
    return CreateMaybeMessage<RankListSwapRankAck>(nullptr);
  }

  RankListSwapRankAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListSwapRankAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListSwapRankAck& from);
  void MergeFrom(const RankListSwapRankAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListSwapRankAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RankListSwapRankAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAttachDataFieldNumber = 1,
    kKey1FieldNumber = 4,
    kKey2FieldNumber = 5,
    kRetCodeFieldNumber = 2,
    kRank1FieldNumber = 6,
    kRank2FieldNumber = 7,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.AttachData attach_data = 1;
  bool has_attach_data() const;
  void clear_attach_data();
  const ::OuterMsg::AttachData& attach_data() const;
  ::OuterMsg::AttachData* release_attach_data();
  ::OuterMsg::AttachData* mutable_attach_data();
  void set_allocated_attach_data(::OuterMsg::AttachData* attach_data);

  // .OuterMsg.GUID key1 = 4;
  bool has_key1() const;
  void clear_key1();
  const ::OuterMsg::GUID& key1() const;
  ::OuterMsg::GUID* release_key1();
  ::OuterMsg::GUID* mutable_key1();
  void set_allocated_key1(::OuterMsg::GUID* key1);

  // .OuterMsg.GUID key2 = 5;
  bool has_key2() const;
  void clear_key2();
  const ::OuterMsg::GUID& key2() const;
  ::OuterMsg::GUID* release_key2();
  ::OuterMsg::GUID* mutable_key2();
  void set_allocated_key2(::OuterMsg::GUID* key2);

  // .OuterMsg.RankListCode ret_code = 2;
  void clear_ret_code();
  ::OuterMsg::RankListCode ret_code() const;
  void set_ret_code(::OuterMsg::RankListCode value);

  // int32 rank1 = 6;
  void clear_rank1();
  ::PROTOBUF_NAMESPACE_ID::int32 rank1() const;
  void set_rank1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 rank2 = 7;
  void clear_rank2();
  ::PROTOBUF_NAMESPACE_ID::int32 rank2() const;
  void set_rank2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RankListSwapRankAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::AttachData* attach_data_;
  ::OuterMsg::GUID* key1_;
  ::OuterMsg::GUID* key2_;
  int ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank1_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerConnectInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ServerConnectInfo) */ {
 public:
  ServerConnectInfo();
  virtual ~ServerConnectInfo();

  ServerConnectInfo(const ServerConnectInfo& from);
  ServerConnectInfo(ServerConnectInfo&& from) noexcept
    : ServerConnectInfo() {
    *this = ::std::move(from);
  }

  inline ServerConnectInfo& operator=(const ServerConnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConnectInfo& operator=(ServerConnectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConnectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConnectInfo* internal_default_instance() {
    return reinterpret_cast<const ServerConnectInfo*>(
               &_ServerConnectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ServerConnectInfo& a, ServerConnectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConnectInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConnectInfo* New() const final {
    return CreateMaybeMessage<ServerConnectInfo>(nullptr);
  }

  ServerConnectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConnectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConnectInfo& from);
  void MergeFrom(const ServerConnectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConnectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ServerConnectInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kWebportFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // bytes ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 webport = 4;
  void clear_webport();
  ::PROTOBUF_NAMESPACE_ID::int32 webport() const;
  void set_webport(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ServerConnectInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 webport_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ClientConnectInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ClientConnectInfo) */ {
 public:
  ClientConnectInfo();
  virtual ~ClientConnectInfo();

  ClientConnectInfo(const ClientConnectInfo& from);
  ClientConnectInfo(ClientConnectInfo&& from) noexcept
    : ClientConnectInfo() {
    *this = ::std::move(from);
  }

  inline ClientConnectInfo& operator=(const ClientConnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConnectInfo& operator=(ClientConnectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientConnectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConnectInfo* internal_default_instance() {
    return reinterpret_cast<const ClientConnectInfo*>(
               &_ClientConnectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ClientConnectInfo& a, ClientConnectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConnectInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientConnectInfo* New() const final {
    return CreateMaybeMessage<ClientConnectInfo>(nullptr);
  }

  ClientConnectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientConnectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientConnectInfo& from);
  void MergeFrom(const ClientConnectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConnectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ClientConnectInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kPlayerFieldNumber = 2,
    kGameIdFieldNumber = 3,
    kGateIdFieldNumber = 4,
  };
  // .OuterMsg.GUID client = 1;
  bool has_client() const;
  void clear_client();
  const ::OuterMsg::GUID& client() const;
  ::OuterMsg::GUID* release_client();
  ::OuterMsg::GUID* mutable_client();
  void set_allocated_client(::OuterMsg::GUID* client);

  // .OuterMsg.GUID player = 2;
  bool has_player() const;
  void clear_player();
  const ::OuterMsg::GUID& player() const;
  ::OuterMsg::GUID* release_player();
  ::OuterMsg::GUID* mutable_player();
  void set_allocated_player(::OuterMsg::GUID* player);

  // int32 game_id = 3;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gate_id = 4;
  void clear_gate_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gate_id() const;
  void set_gate_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ClientConnectInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* client_;
  ::OuterMsg::GUID* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT GuidName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.GuidName) */ {
 public:
  GuidName();
  virtual ~GuidName();

  GuidName(const GuidName& from);
  GuidName(GuidName&& from) noexcept
    : GuidName() {
    *this = ::std::move(from);
  }

  inline GuidName& operator=(const GuidName& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuidName& operator=(GuidName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuidName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidName* internal_default_instance() {
    return reinterpret_cast<const GuidName*>(
               &_GuidName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GuidName& a, GuidName& b) {
    a.Swap(&b);
  }
  inline void Swap(GuidName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuidName* New() const final {
    return CreateMaybeMessage<GuidName>(nullptr);
  }

  GuidName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuidName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuidName& from);
  void MergeFrom(const GuidName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuidName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.GuidName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID id = 1;
  bool has_id() const;
  void clear_id();
  const ::OuterMsg::GUID& id() const;
  ::OuterMsg::GUID* release_id();
  ::OuterMsg::GUID* mutable_id();
  void set_allocated_id(::OuterMsg::GUID* id);

  // @@protoc_insertion_point(class_scope:OuterMsg.GuidName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT GuidNameList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.GuidNameList) */ {
 public:
  GuidNameList();
  virtual ~GuidNameList();

  GuidNameList(const GuidNameList& from);
  GuidNameList(GuidNameList&& from) noexcept
    : GuidNameList() {
    *this = ::std::move(from);
  }

  inline GuidNameList& operator=(const GuidNameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuidNameList& operator=(GuidNameList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuidNameList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidNameList* internal_default_instance() {
    return reinterpret_cast<const GuidNameList*>(
               &_GuidNameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GuidNameList& a, GuidNameList& b) {
    a.Swap(&b);
  }
  inline void Swap(GuidNameList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuidNameList* New() const final {
    return CreateMaybeMessage<GuidNameList>(nullptr);
  }

  GuidNameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuidNameList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuidNameList& from);
  void MergeFrom(const GuidNameList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuidNameList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.GuidNameList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GuidNameList_State State;
  static constexpr State ADD =
    GuidNameList_State_ADD;
  static constexpr State INIT_ADD =
    GuidNameList_State_INIT_ADD;
  static constexpr State INIT_FINISH =
    GuidNameList_State_INIT_FINISH;
  static inline bool State_IsValid(int value) {
    return GuidNameList_State_IsValid(value);
  }
  static constexpr State State_MIN =
    GuidNameList_State_State_MIN;
  static constexpr State State_MAX =
    GuidNameList_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    GuidNameList_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return GuidNameList_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return GuidNameList_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return GuidNameList_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // repeated .OuterMsg.GuidName list = 2;
  int list_size() const;
  void clear_list();
  ::OuterMsg::GuidName* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GuidName >*
      mutable_list();
  const ::OuterMsg::GuidName& list(int index) const;
  ::OuterMsg::GuidName* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GuidName >&
      list() const;

  // .OuterMsg.GuidNameList.State state = 1;
  void clear_state();
  ::OuterMsg::GuidNameList_State state() const;
  void set_state(::OuterMsg::GuidNameList_State value);

  // @@protoc_insertion_point(class_scope:OuterMsg.GuidNameList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GuidName > list_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT OptServerID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.OptServerID) */ {
 public:
  OptServerID();
  virtual ~OptServerID();

  OptServerID(const OptServerID& from);
  OptServerID(OptServerID&& from) noexcept
    : OptServerID() {
    *this = ::std::move(from);
  }

  inline OptServerID& operator=(const OptServerID& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptServerID& operator=(OptServerID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptServerID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptServerID* internal_default_instance() {
    return reinterpret_cast<const OptServerID*>(
               &_OptServerID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(OptServerID& a, OptServerID& b) {
    a.Swap(&b);
  }
  inline void Swap(OptServerID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptServerID* New() const final {
    return CreateMaybeMessage<OptServerID>(nullptr);
  }

  OptServerID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptServerID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptServerID& from);
  void MergeFrom(const OptServerID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptServerID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.OptServerID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.OptServerID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ColdDataStore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ColdDataStore) */ {
 public:
  ColdDataStore();
  virtual ~ColdDataStore();

  ColdDataStore(const ColdDataStore& from);
  ColdDataStore(ColdDataStore&& from) noexcept
    : ColdDataStore() {
    *this = ::std::move(from);
  }

  inline ColdDataStore& operator=(const ColdDataStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColdDataStore& operator=(ColdDataStore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColdDataStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColdDataStore* internal_default_instance() {
    return reinterpret_cast<const ColdDataStore*>(
               &_ColdDataStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ColdDataStore& a, ColdDataStore& b) {
    a.Swap(&b);
  }
  inline void Swap(ColdDataStore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColdDataStore* New() const final {
    return CreateMaybeMessage<ColdDataStore>(nullptr);
  }

  ColdDataStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColdDataStore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColdDataStore& from);
  void MergeFrom(const ColdDataStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColdDataStore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ColdDataStore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .OuterMsg.PropertyString data = 1;
  int data_size() const;
  void clear_data();
  ::OuterMsg::PropertyString* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >*
      mutable_data();
  const ::OuterMsg::PropertyString& data(int index) const;
  ::OuterMsg::PropertyString* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >&
      data() const;

  // @@protoc_insertion_point(class_scope:OuterMsg.ColdDataStore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT LogToDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.LogToDB) */ {
 public:
  LogToDB();
  virtual ~LogToDB();

  LogToDB(const LogToDB& from);
  LogToDB(LogToDB&& from) noexcept
    : LogToDB() {
    *this = ::std::move(from);
  }

  inline LogToDB& operator=(const LogToDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogToDB& operator=(LogToDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogToDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogToDB* internal_default_instance() {
    return reinterpret_cast<const LogToDB*>(
               &_LogToDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(LogToDB& a, LogToDB& b) {
    a.Swap(&b);
  }
  inline void Swap(LogToDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogToDB* New() const final {
    return CreateMaybeMessage<LogToDB>(nullptr);
  }

  LogToDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogToDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogToDB& from);
  void MergeFrom(const LogToDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogToDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.LogToDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecNameFieldNumber = 1,
    kDataListFieldNumber = 2,
  };
  // bytes rec_name = 1;
  void clear_rec_name();
  const std::string& rec_name() const;
  void set_rec_name(const std::string& value);
  void set_rec_name(std::string&& value);
  void set_rec_name(const char* value);
  void set_rec_name(const void* value, size_t size);
  std::string* mutable_rec_name();
  std::string* release_rec_name();
  void set_allocated_rec_name(std::string* rec_name);

  // .OuterMsg.PBDataList data_list = 2;
  bool has_data_list() const;
  void clear_data_list();
  const ::OuterMsg::PBDataList& data_list() const;
  ::OuterMsg::PBDataList* release_data_list();
  ::OuterMsg::PBDataList* mutable_data_list();
  void set_allocated_data_list(::OuterMsg::PBDataList* data_list);

  // @@protoc_insertion_point(class_scope:OuterMsg.LogToDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rec_name_;
  ::OuterMsg::PBDataList* data_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerConnectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ServerConnectList) */ {
 public:
  ServerConnectList();
  virtual ~ServerConnectList();

  ServerConnectList(const ServerConnectList& from);
  ServerConnectList(ServerConnectList&& from) noexcept
    : ServerConnectList() {
    *this = ::std::move(from);
  }

  inline ServerConnectList& operator=(const ServerConnectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConnectList& operator=(ServerConnectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConnectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConnectList* internal_default_instance() {
    return reinterpret_cast<const ServerConnectList*>(
               &_ServerConnectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ServerConnectList& a, ServerConnectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConnectList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConnectList* New() const final {
    return CreateMaybeMessage<ServerConnectList>(nullptr);
  }

  ServerConnectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConnectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConnectList& from);
  void MergeFrom(const ServerConnectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConnectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ServerConnectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterMsg_2eproto);
    return ::descriptor_table_OuterMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerConnectList_EOptType EOptType;
  static constexpr EOptType OPT_ADD =
    ServerConnectList_EOptType_OPT_ADD;
  static constexpr EOptType OPT_REMOVE =
    ServerConnectList_EOptType_OPT_REMOVE;
  static inline bool EOptType_IsValid(int value) {
    return ServerConnectList_EOptType_IsValid(value);
  }
  static constexpr EOptType EOptType_MIN =
    ServerConnectList_EOptType_EOptType_MIN;
  static constexpr EOptType EOptType_MAX =
    ServerConnectList_EOptType_EOptType_MAX;
  static constexpr int EOptType_ARRAYSIZE =
    ServerConnectList_EOptType_EOptType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EOptType_descriptor() {
    return ServerConnectList_EOptType_descriptor();
  }
  template<typename T>
  static inline const std::string& EOptType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EOptType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EOptType_Name.");
    return ServerConnectList_EOptType_Name(enum_t_value);
  }
  static inline bool EOptType_Parse(const std::string& name,
      EOptType* value) {
    return ServerConnectList_EOptType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOptTypeFieldNumber = 1,
  };
  // repeated .OuterMsg.ServerConnectInfo data = 2;
  int data_size() const;
  void clear_data();
  ::OuterMsg::ServerConnectInfo* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerConnectInfo >*
      mutable_data();
  const ::OuterMsg::ServerConnectInfo& data(int index) const;
  ::OuterMsg::ServerConnectInfo* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerConnectInfo >&
      data() const;

  // .OuterMsg.ServerConnectList.EOptType OptType = 1;
  void clear_OptType();
  ::OuterMsg::ServerConnectList_EOptType OptType() const;
  void set_OptType(::OuterMsg::ServerConnectList_EOptType value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ServerConnectList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerConnectInfo > data_;
  int OptType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgEmpty

// -------------------------------------------------------------------

// MsgReply

// int32 ret_code = 1;
inline void MsgReply::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgReply::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.MsgReply.ret_code)
  return ret_code_;
}
inline void MsgReply::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.MsgReply.ret_code)
}

// bytes extra_data = 2;
inline void MsgReply::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgReply::extra_data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.MsgReply.extra_data)
  return extra_data_.GetNoArena();
}
inline void MsgReply::set_extra_data(const std::string& value) {
  
  extra_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.MsgReply.extra_data)
}
inline void MsgReply::set_extra_data(std::string&& value) {
  
  extra_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.MsgReply.extra_data)
}
inline void MsgReply::set_extra_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.MsgReply.extra_data)
}
inline void MsgReply::set_extra_data(const void* value, size_t size) {
  
  extra_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.MsgReply.extra_data)
}
inline std::string* MsgReply::mutable_extra_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.MsgReply.extra_data)
  return extra_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgReply::release_extra_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.MsgReply.extra_data)
  
  return extra_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgReply::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.MsgReply.extra_data)
}

// -------------------------------------------------------------------

// ViewCreate

// int32 view_id = 1;
inline void ViewCreate::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewCreate::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCreate.view_id)
  return view_id_;
}
inline void ViewCreate::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCreate.view_id)
}

// int32 capacity = 2;
inline void ViewCreate::clear_capacity() {
  capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewCreate::capacity() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCreate.capacity)
  return capacity_;
}
inline void ViewCreate::set_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCreate.capacity)
}

// .OuterMsg.PropertyList property_list = 3;
inline bool ViewCreate::has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline const ::OuterMsg::PropertyList& ViewCreate::property_list() const {
  const ::OuterMsg::PropertyList* p = property_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCreate.property_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PropertyList*>(
      &::OuterMsg::_PropertyList_default_instance_);
}
inline ::OuterMsg::PropertyList* ViewCreate::release_property_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ViewCreate.property_list)
  
  ::OuterMsg::PropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PropertyList* ViewCreate::mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PropertyList>(GetArenaNoVirtual());
    property_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ViewCreate.property_list)
  return property_list_;
}
inline void ViewCreate::set_allocated_property_list(::OuterMsg::PropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list_);
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ViewCreate.property_list)
}

// -------------------------------------------------------------------

// ViewAdd

// int32 view_id = 1;
inline void ViewAdd::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewAdd::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewAdd.view_id)
  return view_id_;
}
inline void ViewAdd::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewAdd.view_id)
}

// int32 index = 2;
inline void ViewAdd::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewAdd::index() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewAdd.index)
  return index_;
}
inline void ViewAdd::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewAdd.index)
}

// .OuterMsg.PropertyList property_list = 3;
inline bool ViewAdd::has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline const ::OuterMsg::PropertyList& ViewAdd::property_list() const {
  const ::OuterMsg::PropertyList* p = property_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ViewAdd.property_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PropertyList*>(
      &::OuterMsg::_PropertyList_default_instance_);
}
inline ::OuterMsg::PropertyList* ViewAdd::release_property_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ViewAdd.property_list)
  
  ::OuterMsg::PropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PropertyList* ViewAdd::mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PropertyList>(GetArenaNoVirtual());
    property_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ViewAdd.property_list)
  return property_list_;
}
inline void ViewAdd::set_allocated_property_list(::OuterMsg::PropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list_);
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ViewAdd.property_list)
}

// -------------------------------------------------------------------

// ViewRemove

// int32 view_id = 1;
inline void ViewRemove::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRemove::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewRemove.view_id)
  return view_id_;
}
inline void ViewRemove::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewRemove.view_id)
}

// int32 index = 2;
inline void ViewRemove::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRemove::index() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewRemove.index)
  return index_;
}
inline void ViewRemove::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewRemove.index)
}

// -------------------------------------------------------------------

// ViewChange

// int32 view_id = 1;
inline void ViewChange::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChange::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewChange.view_id)
  return view_id_;
}
inline void ViewChange::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewChange.view_id)
}

// int32 old_index = 2;
inline void ViewChange::clear_old_index() {
  old_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChange::old_index() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewChange.old_index)
  return old_index_;
}
inline void ViewChange::set_old_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  old_index_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewChange.old_index)
}

// int32 new_index = 3;
inline void ViewChange::clear_new_index() {
  new_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChange::new_index() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewChange.new_index)
  return new_index_;
}
inline void ViewChange::set_new_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  new_index_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewChange.new_index)
}

// -------------------------------------------------------------------

// ViewClose

// int32 view_id = 1;
inline void ViewClose::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewClose::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewClose.view_id)
  return view_id_;
}
inline void ViewClose::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewClose.view_id)
}

// -------------------------------------------------------------------

// ViewProperty

// int32 view_id = 1;
inline void ViewProperty::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewProperty::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewProperty.view_id)
  return view_id_;
}
inline void ViewProperty::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewProperty.view_id)
}

// .OuterMsg.PropertyList property_list = 2;
inline bool ViewProperty::has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline const ::OuterMsg::PropertyList& ViewProperty::property_list() const {
  const ::OuterMsg::PropertyList* p = property_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ViewProperty.property_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PropertyList*>(
      &::OuterMsg::_PropertyList_default_instance_);
}
inline ::OuterMsg::PropertyList* ViewProperty::release_property_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ViewProperty.property_list)
  
  ::OuterMsg::PropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PropertyList* ViewProperty::mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PropertyList>(GetArenaNoVirtual());
    property_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ViewProperty.property_list)
  return property_list_;
}
inline void ViewProperty::set_allocated_property_list(::OuterMsg::PropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list_);
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ViewProperty.property_list)
}

// -------------------------------------------------------------------

// ViewRecord

// int32 view_id = 1;
inline void ViewRecord::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRecord::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewRecord.view_id)
  return view_id_;
}
inline void ViewRecord::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewRecord.view_id)
}

// .OuterMsg.RecordOperatorType opera_type = 2;
inline void ViewRecord::clear_opera_type() {
  opera_type_ = 0;
}
inline ::OuterMsg::RecordOperatorType ViewRecord::opera_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewRecord.opera_type)
  return static_cast< ::OuterMsg::RecordOperatorType >(opera_type_);
}
inline void ViewRecord::set_opera_type(::OuterMsg::RecordOperatorType value) {
  
  opera_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewRecord.opera_type)
}

// .OuterMsg.RecordList record_list = 3;
inline bool ViewRecord::has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline const ::OuterMsg::RecordList& ViewRecord::record_list() const {
  const ::OuterMsg::RecordList* p = record_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ViewRecord.record_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RecordList*>(
      &::OuterMsg::_RecordList_default_instance_);
}
inline ::OuterMsg::RecordList* ViewRecord::release_record_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ViewRecord.record_list)
  
  ::OuterMsg::RecordList* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::RecordList* ViewRecord::mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RecordList>(GetArenaNoVirtual());
    record_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ViewRecord.record_list)
  return record_list_;
}
inline void ViewRecord::set_allocated_record_list(::OuterMsg::RecordList* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list_);
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ViewRecord.record_list)
}

// -------------------------------------------------------------------

// ViewCellProperty

// int32 view_id = 1;
inline void ViewCellProperty::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewCellProperty::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellProperty.view_id)
  return view_id_;
}
inline void ViewCellProperty::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCellProperty.view_id)
}

// int32 index = 2;
inline void ViewCellProperty::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewCellProperty::index() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellProperty.index)
  return index_;
}
inline void ViewCellProperty::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCellProperty.index)
}

// .OuterMsg.PropertyList property_list = 3;
inline bool ViewCellProperty::has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline const ::OuterMsg::PropertyList& ViewCellProperty::property_list() const {
  const ::OuterMsg::PropertyList* p = property_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellProperty.property_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PropertyList*>(
      &::OuterMsg::_PropertyList_default_instance_);
}
inline ::OuterMsg::PropertyList* ViewCellProperty::release_property_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ViewCellProperty.property_list)
  
  ::OuterMsg::PropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PropertyList* ViewCellProperty::mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PropertyList>(GetArenaNoVirtual());
    property_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ViewCellProperty.property_list)
  return property_list_;
}
inline void ViewCellProperty::set_allocated_property_list(::OuterMsg::PropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list_);
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ViewCellProperty.property_list)
}

// -------------------------------------------------------------------

// ViewCellRecord

// int32 view_id = 1;
inline void ViewCellRecord::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewCellRecord::view_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellRecord.view_id)
  return view_id_;
}
inline void ViewCellRecord::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCellRecord.view_id)
}

// int32 index = 2;
inline void ViewCellRecord::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewCellRecord::index() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellRecord.index)
  return index_;
}
inline void ViewCellRecord::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCellRecord.index)
}

// .OuterMsg.RecordOperatorType opera_type = 3;
inline void ViewCellRecord::clear_opera_type() {
  opera_type_ = 0;
}
inline ::OuterMsg::RecordOperatorType ViewCellRecord::opera_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellRecord.opera_type)
  return static_cast< ::OuterMsg::RecordOperatorType >(opera_type_);
}
inline void ViewCellRecord::set_opera_type(::OuterMsg::RecordOperatorType value) {
  
  opera_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ViewCellRecord.opera_type)
}

// .OuterMsg.RecordList record_list = 4;
inline bool ViewCellRecord::has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline const ::OuterMsg::RecordList& ViewCellRecord::record_list() const {
  const ::OuterMsg::RecordList* p = record_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ViewCellRecord.record_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RecordList*>(
      &::OuterMsg::_RecordList_default_instance_);
}
inline ::OuterMsg::RecordList* ViewCellRecord::release_record_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ViewCellRecord.record_list)
  
  ::OuterMsg::RecordList* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::RecordList* ViewCellRecord::mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RecordList>(GetArenaNoVirtual());
    record_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ViewCellRecord.record_list)
  return record_list_;
}
inline void ViewCellRecord::set_allocated_record_list(::OuterMsg::RecordList* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list_);
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ViewCellRecord.record_list)
}

// -------------------------------------------------------------------

// ObjectVisRecord

// .OuterMsg.GUID ident = 1;
inline bool ObjectVisRecord::has_ident() const {
  return this != internal_default_instance() && ident_ != nullptr;
}
inline const ::OuterMsg::GUID& ObjectVisRecord::ident() const {
  const ::OuterMsg::GUID* p = ident_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectVisRecord.ident)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ObjectVisRecord::release_ident() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectVisRecord.ident)
  
  ::OuterMsg::GUID* temp = ident_;
  ident_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ObjectVisRecord::mutable_ident() {
  
  if (ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectVisRecord.ident)
  return ident_;
}
inline void ObjectVisRecord::set_allocated_ident(::OuterMsg::GUID* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ident_);
  }
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    
  } else {
    
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectVisRecord.ident)
}

// .OuterMsg.RecordOperatorType opera_type = 2;
inline void ObjectVisRecord::clear_opera_type() {
  opera_type_ = 0;
}
inline ::OuterMsg::RecordOperatorType ObjectVisRecord::opera_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectVisRecord.opera_type)
  return static_cast< ::OuterMsg::RecordOperatorType >(opera_type_);
}
inline void ObjectVisRecord::set_opera_type(::OuterMsg::RecordOperatorType value) {
  
  opera_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ObjectVisRecord.opera_type)
}

// .OuterMsg.RecordList record_list = 3;
inline bool ObjectVisRecord::has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline const ::OuterMsg::RecordList& ObjectVisRecord::record_list() const {
  const ::OuterMsg::RecordList* p = record_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectVisRecord.record_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RecordList*>(
      &::OuterMsg::_RecordList_default_instance_);
}
inline ::OuterMsg::RecordList* ObjectVisRecord::release_record_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectVisRecord.record_list)
  
  ::OuterMsg::RecordList* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::RecordList* ObjectVisRecord::mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RecordList>(GetArenaNoVirtual());
    record_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectVisRecord.record_list)
  return record_list_;
}
inline void ObjectVisRecord::set_allocated_record_list(::OuterMsg::RecordList* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list_);
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectVisRecord.record_list)
}

// -------------------------------------------------------------------

// MsgBase

// .OuterMsg.GUID player_id = 1;
inline bool MsgBase::has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline const ::OuterMsg::GUID& MsgBase::player_id() const {
  const ::OuterMsg::GUID* p = player_id_;
  // @@protoc_insertion_point(field_get:OuterMsg.MsgBase.player_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* MsgBase::release_player_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.MsgBase.player_id)
  
  ::OuterMsg::GUID* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* MsgBase::mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.MsgBase.player_id)
  return player_id_;
}
inline void MsgBase::set_allocated_player_id(::OuterMsg::GUID* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.MsgBase.player_id)
}

// bytes msg_data = 2;
inline void MsgBase::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgBase::msg_data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.MsgBase.msg_data)
  return msg_data_.GetNoArena();
}
inline void MsgBase::set_msg_data(const std::string& value) {
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.MsgBase.msg_data)
}
inline void MsgBase::set_msg_data(std::string&& value) {
  
  msg_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.MsgBase.msg_data)
}
inline void MsgBase::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.MsgBase.msg_data)
}
inline void MsgBase::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.MsgBase.msg_data)
}
inline std::string* MsgBase::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.MsgBase.msg_data)
  return msg_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgBase::release_msg_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.MsgBase.msg_data)
  
  return msg_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgBase::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.MsgBase.msg_data)
}

// repeated .OuterMsg.GUID player_Client_list = 3;
inline int MsgBase::player_Client_list_size() const {
  return player_Client_list_.size();
}
inline ::OuterMsg::GUID* MsgBase::mutable_player_Client_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.MsgBase.player_Client_list)
  return player_Client_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
MsgBase::mutable_player_Client_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.MsgBase.player_Client_list)
  return &player_Client_list_;
}
inline const ::OuterMsg::GUID& MsgBase::player_Client_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.MsgBase.player_Client_list)
  return player_Client_list_.Get(index);
}
inline ::OuterMsg::GUID* MsgBase::add_player_Client_list() {
  // @@protoc_insertion_point(field_add:OuterMsg.MsgBase.player_Client_list)
  return player_Client_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
MsgBase::player_Client_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.MsgBase.player_Client_list)
  return player_Client_list_;
}

// .OuterMsg.GUID hash_ident = 4;
inline bool MsgBase::has_hash_ident() const {
  return this != internal_default_instance() && hash_ident_ != nullptr;
}
inline const ::OuterMsg::GUID& MsgBase::hash_ident() const {
  const ::OuterMsg::GUID* p = hash_ident_;
  // @@protoc_insertion_point(field_get:OuterMsg.MsgBase.hash_ident)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* MsgBase::release_hash_ident() {
  // @@protoc_insertion_point(field_release:OuterMsg.MsgBase.hash_ident)
  
  ::OuterMsg::GUID* temp = hash_ident_;
  hash_ident_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* MsgBase::mutable_hash_ident() {
  
  if (hash_ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    hash_ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.MsgBase.hash_ident)
  return hash_ident_;
}
inline void MsgBase::set_allocated_hash_ident(::OuterMsg::GUID* hash_ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_ident_);
  }
  if (hash_ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hash_ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_ident, submessage_arena);
    }
    
  } else {
    
  }
  hash_ident_ = hash_ident;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.MsgBase.hash_ident)
}

// -------------------------------------------------------------------

// AckEventResult

// .OuterMsg.EGameEventCode event_code = 1;
inline void AckEventResult::clear_event_code() {
  event_code_ = 0;
}
inline ::OuterMsg::EGameEventCode AckEventResult::event_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckEventResult.event_code)
  return static_cast< ::OuterMsg::EGameEventCode >(event_code_);
}
inline void AckEventResult::set_event_code(::OuterMsg::EGameEventCode value) {
  
  event_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckEventResult.event_code)
}

// .OuterMsg.GUID event_object = 2;
inline bool AckEventResult::has_event_object() const {
  return this != internal_default_instance() && event_object_ != nullptr;
}
inline const ::OuterMsg::GUID& AckEventResult::event_object() const {
  const ::OuterMsg::GUID* p = event_object_;
  // @@protoc_insertion_point(field_get:OuterMsg.AckEventResult.event_object)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* AckEventResult::release_event_object() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckEventResult.event_object)
  
  ::OuterMsg::GUID* temp = event_object_;
  event_object_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* AckEventResult::mutable_event_object() {
  
  if (event_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    event_object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckEventResult.event_object)
  return event_object_;
}
inline void AckEventResult::set_allocated_event_object(::OuterMsg::GUID* event_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_object_);
  }
  if (event_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_object, submessage_arena);
    }
    
  } else {
    
  }
  event_object_ = event_object;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckEventResult.event_object)
}

// .OuterMsg.GUID event_client = 3;
inline bool AckEventResult::has_event_client() const {
  return this != internal_default_instance() && event_client_ != nullptr;
}
inline const ::OuterMsg::GUID& AckEventResult::event_client() const {
  const ::OuterMsg::GUID* p = event_client_;
  // @@protoc_insertion_point(field_get:OuterMsg.AckEventResult.event_client)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* AckEventResult::release_event_client() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckEventResult.event_client)
  
  ::OuterMsg::GUID* temp = event_client_;
  event_client_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* AckEventResult::mutable_event_client() {
  
  if (event_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    event_client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckEventResult.event_client)
  return event_client_;
}
inline void AckEventResult::set_allocated_event_client(::OuterMsg::GUID* event_client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_client_);
  }
  if (event_client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event_client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_client, submessage_arena);
    }
    
  } else {
    
  }
  event_client_ = event_client;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckEventResult.event_client)
}

// -------------------------------------------------------------------

// ReqAccountLogin

// bytes account = 1;
inline void ReqAccountLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogin::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.account)
  return account_.GetNoArena();
}
inline void ReqAccountLogin::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.account)
}
inline void ReqAccountLogin::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogin.account)
}
inline void ReqAccountLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogin.account)
}
inline void ReqAccountLogin::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogin.account)
}
inline std::string* ReqAccountLogin::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogin.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogin::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogin.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogin.account)
}

// bytes password = 2;
inline void ReqAccountLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogin::password() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.password)
  return password_.GetNoArena();
}
inline void ReqAccountLogin::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.password)
}
inline void ReqAccountLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogin.password)
}
inline void ReqAccountLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogin.password)
}
inline void ReqAccountLogin::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogin.password)
}
inline std::string* ReqAccountLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogin.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogin::release_password() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogin.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogin.password)
}

// bytes security_code = 3;
inline void ReqAccountLogin::clear_security_code() {
  security_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogin::security_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.security_code)
  return security_code_.GetNoArena();
}
inline void ReqAccountLogin::set_security_code(const std::string& value) {
  
  security_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.security_code)
}
inline void ReqAccountLogin::set_security_code(std::string&& value) {
  
  security_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogin.security_code)
}
inline void ReqAccountLogin::set_security_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogin.security_code)
}
inline void ReqAccountLogin::set_security_code(const void* value, size_t size) {
  
  security_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogin.security_code)
}
inline std::string* ReqAccountLogin::mutable_security_code() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogin.security_code)
  return security_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogin::release_security_code() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogin.security_code)
  
  return security_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_security_code(std::string* security_code) {
  if (security_code != nullptr) {
    
  } else {
    
  }
  security_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_code);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogin.security_code)
}

// int32 clientVersion = 4;
inline void ReqAccountLogin::clear_clientVersion() {
  clientVersion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAccountLogin::clientVersion() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.clientVersion)
  return clientVersion_;
}
inline void ReqAccountLogin::set_clientVersion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientVersion_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.clientVersion)
}

// int64 clientMAC = 5;
inline void ReqAccountLogin::clear_clientMAC() {
  clientMAC_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqAccountLogin::clientMAC() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.clientMAC)
  return clientMAC_;
}
inline void ReqAccountLogin::set_clientMAC(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clientMAC_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.clientMAC)
}

// bytes device_info = 6;
inline void ReqAccountLogin::clear_device_info() {
  device_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogin::device_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.device_info)
  return device_info_.GetNoArena();
}
inline void ReqAccountLogin::set_device_info(const std::string& value) {
  
  device_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.device_info)
}
inline void ReqAccountLogin::set_device_info(std::string&& value) {
  
  device_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogin.device_info)
}
inline void ReqAccountLogin::set_device_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogin.device_info)
}
inline void ReqAccountLogin::set_device_info(const void* value, size_t size) {
  
  device_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogin.device_info)
}
inline std::string* ReqAccountLogin::mutable_device_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogin.device_info)
  return device_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogin::release_device_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogin.device_info)
  
  return device_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_device_info(std::string* device_info) {
  if (device_info != nullptr) {
    
  } else {
    
  }
  device_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogin.device_info)
}

// bytes extra_info = 7;
inline void ReqAccountLogin::clear_extra_info() {
  extra_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogin::extra_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.extra_info)
  return extra_info_.GetNoArena();
}
inline void ReqAccountLogin::set_extra_info(const std::string& value) {
  
  extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.extra_info)
}
inline void ReqAccountLogin::set_extra_info(std::string&& value) {
  
  extra_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogin.extra_info)
}
inline void ReqAccountLogin::set_extra_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogin.extra_info)
}
inline void ReqAccountLogin::set_extra_info(const void* value, size_t size) {
  
  extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogin.extra_info)
}
inline std::string* ReqAccountLogin::mutable_extra_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogin.extra_info)
  return extra_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogin::release_extra_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogin.extra_info)
  
  return extra_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_extra_info(std::string* extra_info) {
  if (extra_info != nullptr) {
    
  } else {
    
  }
  extra_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogin.extra_info)
}

// int32 platform_type = 8;
inline void ReqAccountLogin::clear_platform_type() {
  platform_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAccountLogin::platform_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.platform_type)
  return platform_type_;
}
inline void ReqAccountLogin::set_platform_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.platform_type)
}

// int32 world_id = 9;
inline void ReqAccountLogin::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAccountLogin::world_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.world_id)
  return world_id_;
}
inline void ReqAccountLogin::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.world_id)
}

// int32 login_id = 10;
inline void ReqAccountLogin::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAccountLogin::login_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.login_id)
  return login_id_;
}
inline void ReqAccountLogin::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.login_id)
}

// bytes client_ip = 11;
inline void ReqAccountLogin::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogin::client_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogin.client_ip)
  return client_ip_.GetNoArena();
}
inline void ReqAccountLogin::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogin.client_ip)
}
inline void ReqAccountLogin::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogin.client_ip)
}
inline void ReqAccountLogin::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogin.client_ip)
}
inline void ReqAccountLogin::set_client_ip(const void* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogin.client_ip)
}
inline std::string* ReqAccountLogin::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogin.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogin::release_client_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogin.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogin.client_ip)
}

// -------------------------------------------------------------------

// ReqAccountLogout

// bytes account = 2;
inline void ReqAccountLogout::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogout::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogout.account)
  return account_.GetNoArena();
}
inline void ReqAccountLogout::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogout.account)
}
inline void ReqAccountLogout::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogout.account)
}
inline void ReqAccountLogout::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogout.account)
}
inline void ReqAccountLogout::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogout.account)
}
inline std::string* ReqAccountLogout::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogout.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogout::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogout.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogout::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogout.account)
}

// bytes extra_info = 3;
inline void ReqAccountLogout::clear_extra_info() {
  extra_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAccountLogout::extra_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAccountLogout.extra_info)
  return extra_info_.GetNoArena();
}
inline void ReqAccountLogout::set_extra_info(const std::string& value) {
  
  extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAccountLogout.extra_info)
}
inline void ReqAccountLogout::set_extra_info(std::string&& value) {
  
  extra_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqAccountLogout.extra_info)
}
inline void ReqAccountLogout::set_extra_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqAccountLogout.extra_info)
}
inline void ReqAccountLogout::set_extra_info(const void* value, size_t size) {
  
  extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqAccountLogout.extra_info)
}
inline std::string* ReqAccountLogout::mutable_extra_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqAccountLogout.extra_info)
  return extra_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAccountLogout::release_extra_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqAccountLogout.extra_info)
  
  return extra_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogout::set_allocated_extra_info(std::string* extra_info) {
  if (extra_info != nullptr) {
    
  } else {
    
  }
  extra_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqAccountLogout.extra_info)
}

// -------------------------------------------------------------------

// ServerInfoReport

// int32 server_id = 1;
inline void ServerInfoReport::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_id)
  return server_id_;
}
inline void ServerInfoReport::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_id)
}

// bytes server_name = 2;
inline void ServerInfoReport::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfoReport::server_name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_name)
  return server_name_.GetNoArena();
}
inline void ServerInfoReport::set_server_name(const std::string& value) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(std::string&& value) {
  
  server_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(const void* value, size_t size) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfoReport.server_name)
}
inline std::string* ServerInfoReport::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfoReport.server_name)
  return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfoReport::release_server_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfoReport.server_name)
  
  return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfoReport.server_name)
}

// bytes server_ip = 3;
inline void ServerInfoReport::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfoReport::server_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_ip)
  return server_ip_.GetNoArena();
}
inline void ServerInfoReport::set_server_ip(const std::string& value) {
  
  server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(std::string&& value) {
  
  server_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(const void* value, size_t size) {
  
  server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfoReport.server_ip)
}
inline std::string* ServerInfoReport::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfoReport.server_ip)
  return server_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfoReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfoReport.server_ip)
  
  return server_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfoReport.server_ip)
}

// int32 server_port = 4;
inline void ServerInfoReport::clear_server_port() {
  server_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_port() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_port)
  return server_port_;
}
inline void ServerInfoReport::set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_port)
}

// int32 server_max_online = 5;
inline void ServerInfoReport::clear_server_max_online() {
  server_max_online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_max_online)
  return server_max_online_;
}
inline void ServerInfoReport::set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_max_online_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_max_online)
}

// int32 server_cur_count = 6;
inline void ServerInfoReport::clear_server_cur_count() {
  server_cur_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_cur_count() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_cur_count)
  return server_cur_count_;
}
inline void ServerInfoReport::set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_cur_count_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_cur_count)
}

// .OuterMsg.EServerState server_state = 7;
inline void ServerInfoReport::clear_server_state() {
  server_state_ = 0;
}
inline ::OuterMsg::EServerState ServerInfoReport::server_state() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_state)
  return static_cast< ::OuterMsg::EServerState >(server_state_);
}
inline void ServerInfoReport::set_server_state(::OuterMsg::EServerState value) {
  
  server_state_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_state)
}

// int32 server_type = 8;
inline void ServerInfoReport::clear_server_type() {
  server_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.server_type)
  return server_type_;
}
inline void ServerInfoReport::set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.server_type)
}

// int32 app_id = 9;
inline void ServerInfoReport::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::app_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.app_id)
  return app_id_;
}
inline void ServerInfoReport::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.app_id)
}

// int32 district_id = 10;
inline void ServerInfoReport::clear_district_id() {
  district_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::district_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.district_id)
  return district_id_;
}
inline void ServerInfoReport::set_district_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  district_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.district_id)
}

// bytes maintain_ip = 11;
inline void ServerInfoReport::clear_maintain_ip() {
  maintain_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfoReport::maintain_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.maintain_ip)
  return maintain_ip_.GetNoArena();
}
inline void ServerInfoReport::set_maintain_ip(const std::string& value) {
  
  maintain_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.maintain_ip)
}
inline void ServerInfoReport::set_maintain_ip(std::string&& value) {
  
  maintain_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfoReport.maintain_ip)
}
inline void ServerInfoReport::set_maintain_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maintain_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfoReport.maintain_ip)
}
inline void ServerInfoReport::set_maintain_ip(const void* value, size_t size) {
  
  maintain_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfoReport.maintain_ip)
}
inline std::string* ServerInfoReport::mutable_maintain_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfoReport.maintain_ip)
  return maintain_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfoReport::release_maintain_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfoReport.maintain_ip)
  
  return maintain_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_maintain_ip(std::string* maintain_ip) {
  if (maintain_ip != nullptr) {
    
  } else {
    
  }
  maintain_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maintain_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfoReport.maintain_ip)
}

// int32 maintain_port = 12;
inline void ServerInfoReport::clear_maintain_port() {
  maintain_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::maintain_port() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.maintain_port)
  return maintain_port_;
}
inline void ServerInfoReport::set_maintain_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maintain_port_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.maintain_port)
}

// bytes wlan_ip = 13;
inline void ServerInfoReport::clear_wlan_ip() {
  wlan_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfoReport::wlan_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.wlan_ip)
  return wlan_ip_.GetNoArena();
}
inline void ServerInfoReport::set_wlan_ip(const std::string& value) {
  
  wlan_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.wlan_ip)
}
inline void ServerInfoReport::set_wlan_ip(std::string&& value) {
  
  wlan_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfoReport.wlan_ip)
}
inline void ServerInfoReport::set_wlan_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wlan_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfoReport.wlan_ip)
}
inline void ServerInfoReport::set_wlan_ip(const void* value, size_t size) {
  
  wlan_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfoReport.wlan_ip)
}
inline std::string* ServerInfoReport::mutable_wlan_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfoReport.wlan_ip)
  return wlan_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfoReport::release_wlan_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfoReport.wlan_ip)
  
  return wlan_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_wlan_ip(std::string* wlan_ip) {
  if (wlan_ip != nullptr) {
    
  } else {
    
  }
  wlan_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wlan_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfoReport.wlan_ip)
}

// int32 wlan_port = 14;
inline void ServerInfoReport::clear_wlan_port() {
  wlan_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::wlan_port() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.wlan_port)
  return wlan_port_;
}
inline void ServerInfoReport::set_wlan_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wlan_port_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.wlan_port)
}

// bytes notes = 15;
inline void ServerInfoReport::clear_notes() {
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfoReport::notes() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.notes)
  return notes_.GetNoArena();
}
inline void ServerInfoReport::set_notes(const std::string& value) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.notes)
}
inline void ServerInfoReport::set_notes(std::string&& value) {
  
  notes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfoReport.notes)
}
inline void ServerInfoReport::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfoReport.notes)
}
inline void ServerInfoReport::set_notes(const void* value, size_t size) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfoReport.notes)
}
inline std::string* ServerInfoReport::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfoReport.notes)
  return notes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfoReport::release_notes() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfoReport.notes)
  
  return notes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfoReport.notes)
}

// bytes state_info = 16;
inline void ServerInfoReport::clear_state_info() {
  state_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfoReport::state_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.state_info)
  return state_info_.GetNoArena();
}
inline void ServerInfoReport::set_state_info(const std::string& value) {
  
  state_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.state_info)
}
inline void ServerInfoReport::set_state_info(std::string&& value) {
  
  state_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfoReport.state_info)
}
inline void ServerInfoReport::set_state_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfoReport.state_info)
}
inline void ServerInfoReport::set_state_info(const void* value, size_t size) {
  
  state_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfoReport.state_info)
}
inline std::string* ServerInfoReport::mutable_state_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfoReport.state_info)
  return state_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfoReport::release_state_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfoReport.state_info)
  
  return state_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_state_info(std::string* state_info) {
  if (state_info != nullptr) {
    
  } else {
    
  }
  state_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfoReport.state_info)
}

// uint64 net_callback = 17;
inline void ServerInfoReport::clear_net_callback() {
  net_callback_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerInfoReport::net_callback() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.net_callback)
  return net_callback_;
}
inline void ServerInfoReport::set_net_callback(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  net_callback_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.net_callback)
}

// uint64 net_callback_sock = 18;
inline void ServerInfoReport::clear_net_callback_sock() {
  net_callback_sock_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerInfoReport::net_callback_sock() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfoReport.net_callback_sock)
  return net_callback_sock_;
}
inline void ServerInfoReport::set_net_callback_sock(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  net_callback_sock_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfoReport.net_callback_sock)
}

// -------------------------------------------------------------------

// NetTest

// int64 client_sock = 1;
inline void NetTest::clear_client_sock() {
  client_sock_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetTest::client_sock() const {
  // @@protoc_insertion_point(field_get:OuterMsg.NetTest.client_sock)
  return client_sock_;
}
inline void NetTest::set_client_sock(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_sock_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.NetTest.client_sock)
}

// int64 client_send_time = 2;
inline void NetTest::clear_client_send_time() {
  client_send_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetTest::client_send_time() const {
  // @@protoc_insertion_point(field_get:OuterMsg.NetTest.client_send_time)
  return client_send_time_;
}
inline void NetTest::set_client_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_send_time_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.NetTest.client_send_time)
}

// int64 src_server_sock = 3;
inline void NetTest::clear_src_server_sock() {
  src_server_sock_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetTest::src_server_sock() const {
  // @@protoc_insertion_point(field_get:OuterMsg.NetTest.src_server_sock)
  return src_server_sock_;
}
inline void NetTest::set_src_server_sock(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  src_server_sock_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.NetTest.src_server_sock)
}

// int32 word_server_id = 4;
inline void NetTest::clear_word_server_id() {
  word_server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetTest::word_server_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.NetTest.word_server_id)
  return word_server_id_;
}
inline void NetTest::set_word_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  word_server_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.NetTest.word_server_id)
}

// bytes data = 5;
inline void NetTest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetTest::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.NetTest.data)
  return data_.GetNoArena();
}
inline void NetTest::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.NetTest.data)
}
inline void NetTest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.NetTest.data)
}
inline void NetTest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.NetTest.data)
}
inline void NetTest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.NetTest.data)
}
inline std::string* NetTest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.NetTest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetTest::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.NetTest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetTest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.NetTest.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerInfoReportList

// map<int32, .OuterMsg.ServerInfoReport> server_list = 1;
inline int ServerInfoReportList::server_list_size() const {
  return server_list_.size();
}
inline void ServerInfoReportList::clear_server_list() {
  server_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >&
ServerInfoReportList::server_list() const {
  // @@protoc_insertion_point(field_map:OuterMsg.ServerInfoReportList.server_list)
  return server_list_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::OuterMsg::ServerInfoReport >*
ServerInfoReportList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_map:OuterMsg.ServerInfoReportList.server_list)
  return server_list_.MutableMap();
}

// -------------------------------------------------------------------

// ServerInfo

// int32 server_id = 1;
inline void ServerInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfo.server_id)
  return server_id_;
}
inline void ServerInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfo.server_id)
}

// bytes name = 2;
inline void ServerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfo.name)
  return name_.GetNoArena();
}
inline void ServerInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfo.name)
}
inline void ServerInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerInfo.name)
}
inline void ServerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerInfo.name)
}
inline void ServerInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerInfo.name)
}
inline std::string* ServerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerInfo.name)
}

// int32 wait_count = 3;
inline void ServerInfo::clear_wait_count() {
  wait_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::wait_count() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfo.wait_count)
  return wait_count_;
}
inline void ServerInfo::set_wait_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_count_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfo.wait_count)
}

// .OuterMsg.EServerState status = 4;
inline void ServerInfo::clear_status() {
  status_ = 0;
}
inline ::OuterMsg::EServerState ServerInfo::status() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerInfo.status)
  return static_cast< ::OuterMsg::EServerState >(status_);
}
inline void ServerInfo::set_status(::OuterMsg::EServerState value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerInfo.status)
}

// -------------------------------------------------------------------

// ServerHeartBeat

// int32 count = 1;
inline void ServerHeartBeat::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerHeartBeat::count() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerHeartBeat.count)
  return count_;
}
inline void ServerHeartBeat::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerHeartBeat.count)
}

// -------------------------------------------------------------------

// AckWorldList

// repeated .OuterMsg.ServerInfo info = 1;
inline int AckWorldList::info_size() const {
  return info_.size();
}
inline void AckWorldList::clear_info() {
  info_.Clear();
}
inline ::OuterMsg::ServerInfo* AckWorldList::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckWorldList.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerInfo >*
AckWorldList::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.AckWorldList.info)
  return &info_;
}
inline const ::OuterMsg::ServerInfo& AckWorldList::info(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckWorldList.info)
  return info_.Get(index);
}
inline ::OuterMsg::ServerInfo* AckWorldList::add_info() {
  // @@protoc_insertion_point(field_add:OuterMsg.AckWorldList.info)
  return info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerInfo >&
AckWorldList::info() const {
  // @@protoc_insertion_point(field_list:OuterMsg.AckWorldList.info)
  return info_;
}

// -------------------------------------------------------------------

// ReqConnectWorld

// int32 world_id = 1;
inline void ReqConnectWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::world_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqConnectWorld.world_id)
  return world_id_;
}
inline void ReqConnectWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqConnectWorld.world_id)
}

// bytes account = 2;
inline void ReqConnectWorld::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqConnectWorld::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqConnectWorld.account)
  return account_.GetNoArena();
}
inline void ReqConnectWorld::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqConnectWorld.account)
}
inline void ReqConnectWorld::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqConnectWorld.account)
}
inline void ReqConnectWorld::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqConnectWorld.account)
}
inline void ReqConnectWorld::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqConnectWorld.account)
}
inline std::string* ReqConnectWorld::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqConnectWorld.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqConnectWorld::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqConnectWorld.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqConnectWorld::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqConnectWorld.account)
}

// .OuterMsg.GUID sender = 3;
inline bool ReqConnectWorld::has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline const ::OuterMsg::GUID& ReqConnectWorld::sender() const {
  const ::OuterMsg::GUID* p = sender_;
  // @@protoc_insertion_point(field_get:OuterMsg.ReqConnectWorld.sender)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ReqConnectWorld::release_sender() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqConnectWorld.sender)
  
  ::OuterMsg::GUID* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ReqConnectWorld::mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    sender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqConnectWorld.sender)
  return sender_;
}
inline void ReqConnectWorld::set_allocated_sender(::OuterMsg::GUID* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqConnectWorld.sender)
}

// int32 login_id = 4;
inline void ReqConnectWorld::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::login_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqConnectWorld.login_id)
  return login_id_;
}
inline void ReqConnectWorld::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqConnectWorld.login_id)
}

// int32 clientVersion = 5;
inline void ReqConnectWorld::clear_clientVersion() {
  clientVersion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::clientVersion() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqConnectWorld.clientVersion)
  return clientVersion_;
}
inline void ReqConnectWorld::set_clientVersion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientVersion_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqConnectWorld.clientVersion)
}

// bytes client_ip = 6;
inline void ReqConnectWorld::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqConnectWorld::client_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqConnectWorld.client_ip)
  return client_ip_.GetNoArena();
}
inline void ReqConnectWorld::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqConnectWorld.client_ip)
}
inline void ReqConnectWorld::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqConnectWorld.client_ip)
}
inline void ReqConnectWorld::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqConnectWorld.client_ip)
}
inline void ReqConnectWorld::set_client_ip(const void* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqConnectWorld.client_ip)
}
inline std::string* ReqConnectWorld::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqConnectWorld.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqConnectWorld::release_client_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqConnectWorld.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqConnectWorld::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqConnectWorld.client_ip)
}

// -------------------------------------------------------------------

// AckConnectWorldResult

// int32 world_id = 1;
inline void AckConnectWorldResult::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::world_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.world_id)
  return world_id_;
}
inline void AckConnectWorldResult::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.world_id)
}

// .OuterMsg.GUID sender = 2;
inline bool AckConnectWorldResult::has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline const ::OuterMsg::GUID& AckConnectWorldResult::sender() const {
  const ::OuterMsg::GUID* p = sender_;
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.sender)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* AckConnectWorldResult::release_sender() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckConnectWorldResult.sender)
  
  ::OuterMsg::GUID* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* AckConnectWorldResult::mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    sender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckConnectWorldResult.sender)
  return sender_;
}
inline void AckConnectWorldResult::set_allocated_sender(::OuterMsg::GUID* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckConnectWorldResult.sender)
}

// int32 login_id = 3;
inline void AckConnectWorldResult::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::login_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.login_id)
  return login_id_;
}
inline void AckConnectWorldResult::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.login_id)
}

// bytes account = 4;
inline void AckConnectWorldResult::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckConnectWorldResult::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.account)
  return account_.GetNoArena();
}
inline void AckConnectWorldResult::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.account)
}
inline void AckConnectWorldResult::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AckConnectWorldResult.account)
}
inline void AckConnectWorldResult::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AckConnectWorldResult.account)
}
inline void AckConnectWorldResult::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AckConnectWorldResult.account)
}
inline std::string* AckConnectWorldResult::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckConnectWorldResult.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckConnectWorldResult::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckConnectWorldResult.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckConnectWorldResult.account)
}

// bytes world_ip = 5;
inline void AckConnectWorldResult::clear_world_ip() {
  world_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckConnectWorldResult::world_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.world_ip)
  return world_ip_.GetNoArena();
}
inline void AckConnectWorldResult::set_world_ip(const std::string& value) {
  
  world_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.world_ip)
}
inline void AckConnectWorldResult::set_world_ip(std::string&& value) {
  
  world_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AckConnectWorldResult.world_ip)
}
inline void AckConnectWorldResult::set_world_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  world_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AckConnectWorldResult.world_ip)
}
inline void AckConnectWorldResult::set_world_ip(const void* value, size_t size) {
  
  world_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AckConnectWorldResult.world_ip)
}
inline std::string* AckConnectWorldResult::mutable_world_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckConnectWorldResult.world_ip)
  return world_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckConnectWorldResult::release_world_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckConnectWorldResult.world_ip)
  
  return world_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_world_ip(std::string* world_ip) {
  if (world_ip != nullptr) {
    
  } else {
    
  }
  world_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckConnectWorldResult.world_ip)
}

// int32 world_port = 6;
inline void AckConnectWorldResult::clear_world_port() {
  world_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::world_port() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.world_port)
  return world_port_;
}
inline void AckConnectWorldResult::set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_port_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.world_port)
}

// bytes world_key = 7;
inline void AckConnectWorldResult::clear_world_key() {
  world_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckConnectWorldResult::world_key() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.world_key)
  return world_key_.GetNoArena();
}
inline void AckConnectWorldResult::set_world_key(const std::string& value) {
  
  world_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.world_key)
}
inline void AckConnectWorldResult::set_world_key(std::string&& value) {
  
  world_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AckConnectWorldResult.world_key)
}
inline void AckConnectWorldResult::set_world_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  world_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AckConnectWorldResult.world_key)
}
inline void AckConnectWorldResult::set_world_key(const void* value, size_t size) {
  
  world_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AckConnectWorldResult.world_key)
}
inline std::string* AckConnectWorldResult::mutable_world_key() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckConnectWorldResult.world_key)
  return world_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckConnectWorldResult::release_world_key() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckConnectWorldResult.world_key)
  
  return world_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_world_key(std::string* world_key) {
  if (world_key != nullptr) {
    
  } else {
    
  }
  world_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_key);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckConnectWorldResult.world_key)
}

// .OuterMsg.WorldParam world_param = 8;
inline bool AckConnectWorldResult::has_world_param() const {
  return this != internal_default_instance() && world_param_ != nullptr;
}
inline void AckConnectWorldResult::clear_world_param() {
  if (GetArenaNoVirtual() == nullptr && world_param_ != nullptr) {
    delete world_param_;
  }
  world_param_ = nullptr;
}
inline const ::OuterMsg::WorldParam& AckConnectWorldResult::world_param() const {
  const ::OuterMsg::WorldParam* p = world_param_;
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.world_param)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::WorldParam*>(
      &::OuterMsg::_WorldParam_default_instance_);
}
inline ::OuterMsg::WorldParam* AckConnectWorldResult::release_world_param() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckConnectWorldResult.world_param)
  
  ::OuterMsg::WorldParam* temp = world_param_;
  world_param_ = nullptr;
  return temp;
}
inline ::OuterMsg::WorldParam* AckConnectWorldResult::mutable_world_param() {
  
  if (world_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::WorldParam>(GetArenaNoVirtual());
    world_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckConnectWorldResult.world_param)
  return world_param_;
}
inline void AckConnectWorldResult::set_allocated_world_param(::OuterMsg::WorldParam* world_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete world_param_;
  }
  if (world_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_param, submessage_arena);
    }
    
  } else {
    
  }
  world_param_ = world_param;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckConnectWorldResult.world_param)
}

// bytes client_ip = 9;
inline void AckConnectWorldResult::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckConnectWorldResult::client_ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.client_ip)
  return client_ip_.GetNoArena();
}
inline void AckConnectWorldResult::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.client_ip)
}
inline void AckConnectWorldResult::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AckConnectWorldResult.client_ip)
}
inline void AckConnectWorldResult::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AckConnectWorldResult.client_ip)
}
inline void AckConnectWorldResult::set_client_ip(const void* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AckConnectWorldResult.client_ip)
}
inline std::string* AckConnectWorldResult::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckConnectWorldResult.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckConnectWorldResult::release_client_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckConnectWorldResult.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckConnectWorldResult.client_ip)
}

// .OuterMsg.EGameEventCode event_code = 10;
inline void AckConnectWorldResult::clear_event_code() {
  event_code_ = 0;
}
inline ::OuterMsg::EGameEventCode AckConnectWorldResult::event_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckConnectWorldResult.event_code)
  return static_cast< ::OuterMsg::EGameEventCode >(event_code_);
}
inline void AckConnectWorldResult::set_event_code(::OuterMsg::EGameEventCode value) {
  
  event_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckConnectWorldResult.event_code)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorldParam

// map<string, .OuterMsg.ServerConnectInfo> extra_server = 1;
inline int WorldParam::extra_server_size() const {
  return extra_server_.size();
}
inline void WorldParam::clear_extra_server() {
  extra_server_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >&
WorldParam::extra_server() const {
  // @@protoc_insertion_point(field_map:OuterMsg.WorldParam.extra_server)
  return extra_server_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OuterMsg::ServerConnectInfo >*
WorldParam::mutable_extra_server() {
  // @@protoc_insertion_point(field_mutable_map:OuterMsg.WorldParam.extra_server)
  return extra_server_.MutableMap();
}

// -------------------------------------------------------------------

// ReqRoleList

// bytes account = 1;
inline void ReqRoleList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqRoleList::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqRoleList.account)
  return account_.GetNoArena();
}
inline void ReqRoleList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqRoleList.account)
}
inline void ReqRoleList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqRoleList.account)
}
inline void ReqRoleList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqRoleList.account)
}
inline void ReqRoleList::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqRoleList.account)
}
inline std::string* ReqRoleList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqRoleList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqRoleList::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqRoleList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRoleList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqRoleList.account)
}

// -------------------------------------------------------------------

// RoleLiteInfo

// .OuterMsg.GUID id = 1;
inline bool RoleLiteInfo::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RoleLiteInfo::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RoleLiteInfo.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RoleLiteInfo::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RoleLiteInfo.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RoleLiteInfo::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RoleLiteInfo.id)
  return id_;
}
inline void RoleLiteInfo::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RoleLiteInfo.id)
}

// bytes info = 2;
inline void RoleLiteInfo::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleLiteInfo::info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RoleLiteInfo.info)
  return info_.GetNoArena();
}
inline void RoleLiteInfo::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RoleLiteInfo.info)
}
inline void RoleLiteInfo::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RoleLiteInfo.info)
}
inline void RoleLiteInfo::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RoleLiteInfo.info)
}
inline void RoleLiteInfo::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RoleLiteInfo.info)
}
inline std::string* RoleLiteInfo::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RoleLiteInfo.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleLiteInfo::release_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.RoleLiteInfo.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleLiteInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RoleLiteInfo.info)
}

// int32 open_time = 3;
inline void RoleLiteInfo::clear_open_time() {
  open_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLiteInfo::open_time() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RoleLiteInfo.open_time)
  return open_time_;
}
inline void RoleLiteInfo::set_open_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_time_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RoleLiteInfo.open_time)
}

// -------------------------------------------------------------------

// AckRoleLiteInfoList

// repeated .OuterMsg.RoleLiteInfo char_data = 1;
inline int AckRoleLiteInfoList::char_data_size() const {
  return char_data_.size();
}
inline void AckRoleLiteInfoList::clear_char_data() {
  char_data_.Clear();
}
inline ::OuterMsg::RoleLiteInfo* AckRoleLiteInfoList::mutable_char_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckRoleLiteInfoList.char_data)
  return char_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RoleLiteInfo >*
AckRoleLiteInfoList::mutable_char_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.AckRoleLiteInfoList.char_data)
  return &char_data_;
}
inline const ::OuterMsg::RoleLiteInfo& AckRoleLiteInfoList::char_data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckRoleLiteInfoList.char_data)
  return char_data_.Get(index);
}
inline ::OuterMsg::RoleLiteInfo* AckRoleLiteInfoList::add_char_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.AckRoleLiteInfoList.char_data)
  return char_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RoleLiteInfo >&
AckRoleLiteInfoList::char_data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.AckRoleLiteInfoList.char_data)
  return char_data_;
}

// bytes account = 2;
inline void AckRoleLiteInfoList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckRoleLiteInfoList::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckRoleLiteInfoList.account)
  return account_.GetNoArena();
}
inline void AckRoleLiteInfoList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AckRoleLiteInfoList.account)
}
inline void AckRoleLiteInfoList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AckRoleLiteInfoList.account)
}
inline void AckRoleLiteInfoList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AckRoleLiteInfoList.account)
}
inline void AckRoleLiteInfoList::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AckRoleLiteInfoList.account)
}
inline std::string* AckRoleLiteInfoList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckRoleLiteInfoList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckRoleLiteInfoList::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckRoleLiteInfoList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckRoleLiteInfoList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckRoleLiteInfoList.account)
}

// -------------------------------------------------------------------

// ReqCreateRole

// bytes account = 1;
inline void ReqCreateRole::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqCreateRole::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqCreateRole.account)
  return account_.GetNoArena();
}
inline void ReqCreateRole::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqCreateRole.account)
}
inline void ReqCreateRole::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqCreateRole.account)
}
inline void ReqCreateRole::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqCreateRole.account)
}
inline void ReqCreateRole::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqCreateRole.account)
}
inline std::string* ReqCreateRole::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqCreateRole.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqCreateRole::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqCreateRole.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreateRole::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqCreateRole.account)
}

// bytes noob_name = 2;
inline void ReqCreateRole::clear_noob_name() {
  noob_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqCreateRole::noob_name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqCreateRole.noob_name)
  return noob_name_.GetNoArena();
}
inline void ReqCreateRole::set_noob_name(const std::string& value) {
  
  noob_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqCreateRole.noob_name)
}
inline void ReqCreateRole::set_noob_name(std::string&& value) {
  
  noob_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqCreateRole.noob_name)
}
inline void ReqCreateRole::set_noob_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  noob_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqCreateRole.noob_name)
}
inline void ReqCreateRole::set_noob_name(const void* value, size_t size) {
  
  noob_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqCreateRole.noob_name)
}
inline std::string* ReqCreateRole::mutable_noob_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqCreateRole.noob_name)
  return noob_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqCreateRole::release_noob_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqCreateRole.noob_name)
  
  return noob_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreateRole::set_allocated_noob_name(std::string* noob_name) {
  if (noob_name != nullptr) {
    
  } else {
    
  }
  noob_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), noob_name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqCreateRole.noob_name)
}

// .OuterMsg.GUID client_id = 3;
inline bool ReqCreateRole::has_client_id() const {
  return this != internal_default_instance() && client_id_ != nullptr;
}
inline const ::OuterMsg::GUID& ReqCreateRole::client_id() const {
  const ::OuterMsg::GUID* p = client_id_;
  // @@protoc_insertion_point(field_get:OuterMsg.ReqCreateRole.client_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ReqCreateRole::release_client_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqCreateRole.client_id)
  
  ::OuterMsg::GUID* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ReqCreateRole::mutable_client_id() {
  
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    client_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqCreateRole.client_id)
  return client_id_;
}
inline void ReqCreateRole::set_allocated_client_id(::OuterMsg::GUID* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqCreateRole.client_id)
}

// bytes msg_data = 4;
inline void ReqCreateRole::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqCreateRole::msg_data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqCreateRole.msg_data)
  return msg_data_.GetNoArena();
}
inline void ReqCreateRole::set_msg_data(const std::string& value) {
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqCreateRole.msg_data)
}
inline void ReqCreateRole::set_msg_data(std::string&& value) {
  
  msg_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqCreateRole.msg_data)
}
inline void ReqCreateRole::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqCreateRole.msg_data)
}
inline void ReqCreateRole::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqCreateRole.msg_data)
}
inline std::string* ReqCreateRole::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqCreateRole.msg_data)
  return msg_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqCreateRole::release_msg_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqCreateRole.msg_data)
  
  return msg_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreateRole::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqCreateRole.msg_data)
}

// .OuterMsg.ObjectDataPack roleData = 5;
inline bool ReqCreateRole::has_roleData() const {
  return this != internal_default_instance() && roleData_ != nullptr;
}
inline const ::OuterMsg::ObjectDataPack& ReqCreateRole::roleData() const {
  const ::OuterMsg::ObjectDataPack* p = roleData_;
  // @@protoc_insertion_point(field_get:OuterMsg.ReqCreateRole.roleData)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::ObjectDataPack*>(
      &::OuterMsg::_ObjectDataPack_default_instance_);
}
inline ::OuterMsg::ObjectDataPack* ReqCreateRole::release_roleData() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqCreateRole.roleData)
  
  ::OuterMsg::ObjectDataPack* temp = roleData_;
  roleData_ = nullptr;
  return temp;
}
inline ::OuterMsg::ObjectDataPack* ReqCreateRole::mutable_roleData() {
  
  if (roleData_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::ObjectDataPack>(GetArenaNoVirtual());
    roleData_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqCreateRole.roleData)
  return roleData_;
}
inline void ReqCreateRole::set_allocated_roleData(::OuterMsg::ObjectDataPack* roleData) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roleData_);
  }
  if (roleData) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roleData = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roleData, submessage_arena);
    }
    
  } else {
    
  }
  roleData_ = roleData;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqCreateRole.roleData)
}

// -------------------------------------------------------------------

// ReqDeleteRole

// bytes account = 1;
inline void ReqDeleteRole::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqDeleteRole::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqDeleteRole.account)
  return account_.GetNoArena();
}
inline void ReqDeleteRole::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqDeleteRole.account)
}
inline void ReqDeleteRole::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqDeleteRole.account)
}
inline void ReqDeleteRole::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqDeleteRole.account)
}
inline void ReqDeleteRole::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqDeleteRole.account)
}
inline std::string* ReqDeleteRole::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqDeleteRole.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqDeleteRole::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqDeleteRole.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqDeleteRole::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqDeleteRole.account)
}

// bytes name = 2;
inline void ReqDeleteRole::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqDeleteRole::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqDeleteRole.name)
  return name_.GetNoArena();
}
inline void ReqDeleteRole::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqDeleteRole.name)
}
inline void ReqDeleteRole::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqDeleteRole.name)
}
inline void ReqDeleteRole::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqDeleteRole.name)
}
inline void ReqDeleteRole::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqDeleteRole.name)
}
inline std::string* ReqDeleteRole::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqDeleteRole.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqDeleteRole::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqDeleteRole.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqDeleteRole::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqDeleteRole.name)
}

// -------------------------------------------------------------------

// RoleOnlineNotify

// .OuterMsg.GUID self = 1;
inline bool RoleOnlineNotify::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& RoleOnlineNotify::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOnlineNotify.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RoleOnlineNotify::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.RoleOnlineNotify.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RoleOnlineNotify::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RoleOnlineNotify.self)
  return self_;
}
inline void RoleOnlineNotify::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RoleOnlineNotify.self)
}

// int32 game = 2;
inline void RoleOnlineNotify::clear_game() {
  game_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleOnlineNotify::game() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOnlineNotify.game)
  return game_;
}
inline void RoleOnlineNotify::set_game(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RoleOnlineNotify.game)
}

// int32 proxy = 3;
inline void RoleOnlineNotify::clear_proxy() {
  proxy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleOnlineNotify::proxy() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOnlineNotify.proxy)
  return proxy_;
}
inline void RoleOnlineNotify::set_proxy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proxy_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RoleOnlineNotify.proxy)
}

// .OuterMsg.GUID client = 4;
inline bool RoleOnlineNotify::has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline const ::OuterMsg::GUID& RoleOnlineNotify::client() const {
  const ::OuterMsg::GUID* p = client_;
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOnlineNotify.client)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RoleOnlineNotify::release_client() {
  // @@protoc_insertion_point(field_release:OuterMsg.RoleOnlineNotify.client)
  
  ::OuterMsg::GUID* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RoleOnlineNotify::mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RoleOnlineNotify.client)
  return client_;
}
inline void RoleOnlineNotify::set_allocated_client(::OuterMsg::GUID* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RoleOnlineNotify.client)
}

// -------------------------------------------------------------------

// RoleOfflineNotify

// .OuterMsg.GUID self = 1;
inline bool RoleOfflineNotify::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& RoleOfflineNotify::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOfflineNotify.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RoleOfflineNotify::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.RoleOfflineNotify.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RoleOfflineNotify::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RoleOfflineNotify.self)
  return self_;
}
inline void RoleOfflineNotify::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RoleOfflineNotify.self)
}

// int32 game = 2;
inline void RoleOfflineNotify::clear_game() {
  game_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleOfflineNotify::game() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOfflineNotify.game)
  return game_;
}
inline void RoleOfflineNotify::set_game(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RoleOfflineNotify.game)
}

// int32 proxy = 3;
inline void RoleOfflineNotify::clear_proxy() {
  proxy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleOfflineNotify::proxy() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RoleOfflineNotify.proxy)
  return proxy_;
}
inline void RoleOfflineNotify::set_proxy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proxy_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RoleOfflineNotify.proxy)
}

// -------------------------------------------------------------------

// ReqEnterGameServer

// .OuterMsg.GUID id = 1;
inline bool ReqEnterGameServer::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& ReqEnterGameServer::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.ReqEnterGameServer.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ReqEnterGameServer::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqEnterGameServer.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ReqEnterGameServer::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqEnterGameServer.id)
  return id_;
}
inline void ReqEnterGameServer::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqEnterGameServer.id)
}

// bytes account = 2;
inline void ReqEnterGameServer::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqEnterGameServer.account)
  return account_.GetNoArena();
}
inline void ReqEnterGameServer::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqEnterGameServer.account)
}
inline std::string* ReqEnterGameServer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqEnterGameServer.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqEnterGameServer.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqEnterGameServer.account)
}

// bytes ip = 3;
inline void ReqEnterGameServer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqEnterGameServer::ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqEnterGameServer.ip)
  return ip_.GetNoArena();
}
inline void ReqEnterGameServer::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqEnterGameServer.ip)
}
inline void ReqEnterGameServer::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqEnterGameServer.ip)
}
inline void ReqEnterGameServer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqEnterGameServer.ip)
}
inline void ReqEnterGameServer::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqEnterGameServer.ip)
}
inline std::string* ReqEnterGameServer::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqEnterGameServer.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqEnterGameServer::release_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqEnterGameServer.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqEnterGameServer.ip)
}

// bytes device_id = 4;
inline void ReqEnterGameServer::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqEnterGameServer::device_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqEnterGameServer.device_id)
  return device_id_.GetNoArena();
}
inline void ReqEnterGameServer::set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqEnterGameServer.device_id)
}
inline void ReqEnterGameServer::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqEnterGameServer.device_id)
}
inline void ReqEnterGameServer::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqEnterGameServer.device_id)
}
inline void ReqEnterGameServer::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqEnterGameServer.device_id)
}
inline std::string* ReqEnterGameServer::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqEnterGameServer.device_id)
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqEnterGameServer::release_device_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqEnterGameServer.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqEnterGameServer.device_id)
}

// bytes device_mac = 5;
inline void ReqEnterGameServer::clear_device_mac() {
  device_mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqEnterGameServer::device_mac() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqEnterGameServer.device_mac)
  return device_mac_.GetNoArena();
}
inline void ReqEnterGameServer::set_device_mac(const std::string& value) {
  
  device_mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqEnterGameServer.device_mac)
}
inline void ReqEnterGameServer::set_device_mac(std::string&& value) {
  
  device_mac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqEnterGameServer.device_mac)
}
inline void ReqEnterGameServer::set_device_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqEnterGameServer.device_mac)
}
inline void ReqEnterGameServer::set_device_mac(const void* value, size_t size) {
  
  device_mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqEnterGameServer.device_mac)
}
inline std::string* ReqEnterGameServer::mutable_device_mac() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqEnterGameServer.device_mac)
  return device_mac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqEnterGameServer::release_device_mac() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqEnterGameServer.device_mac)
  
  return device_mac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_device_mac(std::string* device_mac) {
  if (device_mac != nullptr) {
    
  } else {
    
  }
  device_mac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_mac);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqEnterGameServer.device_mac)
}

// .OuterMsg.OsType os_type = 6;
inline void ReqEnterGameServer::clear_os_type() {
  os_type_ = 0;
}
inline ::OuterMsg::OsType ReqEnterGameServer::os_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqEnterGameServer.os_type)
  return static_cast< ::OuterMsg::OsType >(os_type_);
}
inline void ReqEnterGameServer::set_os_type(::OuterMsg::OsType value) {
  
  os_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqEnterGameServer.os_type)
}

// -------------------------------------------------------------------

// ReqAckEnterGameSuccess

// int32 arg = 1;
inline void ReqAckEnterGameSuccess::clear_arg() {
  arg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckEnterGameSuccess::arg() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqAckEnterGameSuccess.arg)
  return arg_;
}
inline void ReqAckEnterGameSuccess::set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqAckEnterGameSuccess.arg)
}

// -------------------------------------------------------------------

// ReqLeaveGameServer

// int32 arg = 1;
inline void ReqLeaveGameServer::clear_arg() {
  arg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLeaveGameServer::arg() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqLeaveGameServer.arg)
  return arg_;
}
inline void ReqLeaveGameServer::set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqLeaveGameServer.arg)
}

// -------------------------------------------------------------------

// CommandMsg

// int32 Id = 1;
inline void CommandMsg::clear_Id() {
  Id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandMsg::Id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.CommandMsg.Id)
  return Id_;
}
inline void CommandMsg::set_Id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  Id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.CommandMsg.Id)
}

// .OuterMsg.GUID self = 2;
inline bool CommandMsg::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& CommandMsg::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.CommandMsg.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* CommandMsg::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.CommandMsg.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* CommandMsg::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.CommandMsg.self)
  return self_;
}
inline void CommandMsg::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.CommandMsg.self)
}

// .OuterMsg.GUID target = 3;
inline bool CommandMsg::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline const ::OuterMsg::GUID& CommandMsg::target() const {
  const ::OuterMsg::GUID* p = target_;
  // @@protoc_insertion_point(field_get:OuterMsg.CommandMsg.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* CommandMsg::release_target() {
  // @@protoc_insertion_point(field_release:OuterMsg.CommandMsg.target)
  
  ::OuterMsg::GUID* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* CommandMsg::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.CommandMsg.target)
  return target_;
}
inline void CommandMsg::set_allocated_target(::OuterMsg::GUID* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.CommandMsg.target)
}

// bytes target_class_Name = 4;
inline void CommandMsg::clear_target_class_Name() {
  target_class_Name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandMsg::target_class_Name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.CommandMsg.target_class_Name)
  return target_class_Name_.GetNoArena();
}
inline void CommandMsg::set_target_class_Name(const std::string& value) {
  
  target_class_Name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.CommandMsg.target_class_Name)
}
inline void CommandMsg::set_target_class_Name(std::string&& value) {
  
  target_class_Name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.CommandMsg.target_class_Name)
}
inline void CommandMsg::set_target_class_Name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_class_Name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.CommandMsg.target_class_Name)
}
inline void CommandMsg::set_target_class_Name(const void* value, size_t size) {
  
  target_class_Name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.CommandMsg.target_class_Name)
}
inline std::string* CommandMsg::mutable_target_class_Name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.CommandMsg.target_class_Name)
  return target_class_Name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandMsg::release_target_class_Name() {
  // @@protoc_insertion_point(field_release:OuterMsg.CommandMsg.target_class_Name)
  
  return target_class_Name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMsg::set_allocated_target_class_Name(std::string* target_class_Name) {
  if (target_class_Name != nullptr) {
    
  } else {
    
  }
  target_class_Name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_class_Name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.CommandMsg.target_class_Name)
}

// .OuterMsg.PBDataList data = 5;
inline bool CommandMsg::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::OuterMsg::PBDataList& CommandMsg::data() const {
  const ::OuterMsg::PBDataList* p = data_;
  // @@protoc_insertion_point(field_get:OuterMsg.CommandMsg.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PBDataList*>(
      &::OuterMsg::_PBDataList_default_instance_);
}
inline ::OuterMsg::PBDataList* CommandMsg::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.CommandMsg.data)
  
  ::OuterMsg::PBDataList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::OuterMsg::PBDataList* CommandMsg::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PBDataList>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.CommandMsg.data)
  return data_;
}
inline void CommandMsg::set_allocated_data(::OuterMsg::PBDataList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.CommandMsg.data)
}

// -------------------------------------------------------------------

// LetterData

// bytes ID = 1;
inline void LetterData::clear_ID() {
  ID_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LetterData::ID() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.ID)
  return ID_.GetNoArena();
}
inline void LetterData::set_ID(const std::string& value) {
  
  ID_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.LetterData.ID)
}
inline void LetterData::set_ID(std::string&& value) {
  
  ID_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.LetterData.ID)
}
inline void LetterData::set_ID(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ID_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.LetterData.ID)
}
inline void LetterData::set_ID(const void* value, size_t size) {
  
  ID_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.LetterData.ID)
}
inline std::string* LetterData::mutable_ID() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.ID)
  return ID_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LetterData::release_ID() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.ID)
  
  return ID_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LetterData::set_allocated_ID(std::string* ID) {
  if (ID != nullptr) {
    
  } else {
    
  }
  ID_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ID);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.ID)
}

// .OuterMsg.GUID sender = 2;
inline bool LetterData::has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline const ::OuterMsg::GUID& LetterData::sender() const {
  const ::OuterMsg::GUID* p = sender_;
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.sender)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* LetterData::release_sender() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.sender)
  
  ::OuterMsg::GUID* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* LetterData::mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    sender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.sender)
  return sender_;
}
inline void LetterData::set_allocated_sender(::OuterMsg::GUID* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.sender)
}

// bytes sendname = 3;
inline void LetterData::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LetterData::sendname() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.sendname)
  return sendname_.GetNoArena();
}
inline void LetterData::set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.LetterData.sendname)
}
inline void LetterData::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.LetterData.sendname)
}
inline void LetterData::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.LetterData.sendname)
}
inline void LetterData::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.LetterData.sendname)
}
inline std::string* LetterData::mutable_sendname() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.sendname)
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LetterData::release_sendname() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LetterData::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.sendname)
}

// int64 time = 4;
inline void LetterData::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LetterData::time() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.time)
  return time_;
}
inline void LetterData::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.LetterData.time)
}

// .OuterMsg.GUID receiver = 5;
inline bool LetterData::has_receiver() const {
  return this != internal_default_instance() && receiver_ != nullptr;
}
inline const ::OuterMsg::GUID& LetterData::receiver() const {
  const ::OuterMsg::GUID* p = receiver_;
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.receiver)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* LetterData::release_receiver() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.receiver)
  
  ::OuterMsg::GUID* temp = receiver_;
  receiver_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* LetterData::mutable_receiver() {
  
  if (receiver_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    receiver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.receiver)
  return receiver_;
}
inline void LetterData::set_allocated_receiver(::OuterMsg::GUID* receiver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_);
  }
  if (receiver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      receiver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver, submessage_arena);
    }
    
  } else {
    
  }
  receiver_ = receiver;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.receiver)
}

// bytes title = 6;
inline void LetterData::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LetterData::title() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.title)
  return title_.GetNoArena();
}
inline void LetterData::set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.LetterData.title)
}
inline void LetterData::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.LetterData.title)
}
inline void LetterData::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.LetterData.title)
}
inline void LetterData::set_title(const void* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.LetterData.title)
}
inline std::string* LetterData::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LetterData::release_title() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LetterData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.title)
}

// bytes content = 7;
inline void LetterData::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LetterData::content() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.content)
  return content_.GetNoArena();
}
inline void LetterData::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.LetterData.content)
}
inline void LetterData::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.LetterData.content)
}
inline void LetterData::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.LetterData.content)
}
inline void LetterData::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.LetterData.content)
}
inline std::string* LetterData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LetterData::release_content() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LetterData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.content)
}

// .OuterMsg.PBDataList args = 8;
inline bool LetterData::has_args() const {
  return this != internal_default_instance() && args_ != nullptr;
}
inline const ::OuterMsg::PBDataList& LetterData::args() const {
  const ::OuterMsg::PBDataList* p = args_;
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.args)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PBDataList*>(
      &::OuterMsg::_PBDataList_default_instance_);
}
inline ::OuterMsg::PBDataList* LetterData::release_args() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.args)
  
  ::OuterMsg::PBDataList* temp = args_;
  args_ = nullptr;
  return temp;
}
inline ::OuterMsg::PBDataList* LetterData::mutable_args() {
  
  if (args_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PBDataList>(GetArenaNoVirtual());
    args_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.args)
  return args_;
}
inline void LetterData::set_allocated_args(::OuterMsg::PBDataList* args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_);
  }
  if (args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    
  } else {
    
  }
  args_ = args;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.args)
}

// bytes append = 9;
inline void LetterData::clear_append() {
  append_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LetterData::append() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterData.append)
  return append_.GetNoArena();
}
inline void LetterData::set_append(const std::string& value) {
  
  append_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.LetterData.append)
}
inline void LetterData::set_append(std::string&& value) {
  
  append_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.LetterData.append)
}
inline void LetterData::set_append(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  append_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.LetterData.append)
}
inline void LetterData::set_append(const void* value, size_t size) {
  
  append_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.LetterData.append)
}
inline std::string* LetterData::mutable_append() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterData.append)
  return append_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LetterData::release_append() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterData.append)
  
  return append_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LetterData::set_allocated_append(std::string* append) {
  if (append != nullptr) {
    
  } else {
    
  }
  append_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), append);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterData.append)
}

// -------------------------------------------------------------------

// LetterDataPack

// .OuterMsg.GUID self = 1;
inline bool LetterDataPack::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& LetterDataPack::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.LetterDataPack.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* LetterDataPack::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.LetterDataPack.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* LetterDataPack::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterDataPack.self)
  return self_;
}
inline void LetterDataPack::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LetterDataPack.self)
}

// repeated .OuterMsg.LetterData letter = 2;
inline int LetterDataPack::letter_size() const {
  return letter_.size();
}
inline void LetterDataPack::clear_letter() {
  letter_.Clear();
}
inline ::OuterMsg::LetterData* LetterDataPack::mutable_letter(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.LetterDataPack.letter)
  return letter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::LetterData >*
LetterDataPack::mutable_letter() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.LetterDataPack.letter)
  return &letter_;
}
inline const ::OuterMsg::LetterData& LetterDataPack::letter(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.LetterDataPack.letter)
  return letter_.Get(index);
}
inline ::OuterMsg::LetterData* LetterDataPack::add_letter() {
  // @@protoc_insertion_point(field_add:OuterMsg.LetterDataPack.letter)
  return letter_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::LetterData >&
LetterDataPack::letter() const {
  // @@protoc_insertion_point(field_list:OuterMsg.LetterDataPack.letter)
  return letter_;
}

// -------------------------------------------------------------------

// ReqLookLetter

// .OuterMsg.GUID self = 1;
inline bool ReqLookLetter::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& ReqLookLetter::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.ReqLookLetter.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ReqLookLetter::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqLookLetter.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ReqLookLetter::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqLookLetter.self)
  return self_;
}
inline void ReqLookLetter::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqLookLetter.self)
}

// int32 num = 2;
inline void ReqLookLetter::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLookLetter::num() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqLookLetter.num)
  return num_;
}
inline void ReqLookLetter::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ReqLookLetter.num)
}

// -------------------------------------------------------------------

// ReqDeleteLetter

// .OuterMsg.GUID self = 1;
inline bool ReqDeleteLetter::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& ReqDeleteLetter::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.ReqDeleteLetter.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ReqDeleteLetter::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqDeleteLetter.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ReqDeleteLetter::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqDeleteLetter.self)
  return self_;
}
inline void ReqDeleteLetter::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqDeleteLetter.self)
}

// bytes letterID = 2;
inline void ReqDeleteLetter::clear_letterID() {
  letterID_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqDeleteLetter::letterID() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ReqDeleteLetter.letterID)
  return letterID_.GetNoArena();
}
inline void ReqDeleteLetter::set_letterID(const std::string& value) {
  
  letterID_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ReqDeleteLetter.letterID)
}
inline void ReqDeleteLetter::set_letterID(std::string&& value) {
  
  letterID_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ReqDeleteLetter.letterID)
}
inline void ReqDeleteLetter::set_letterID(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  letterID_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ReqDeleteLetter.letterID)
}
inline void ReqDeleteLetter::set_letterID(const void* value, size_t size) {
  
  letterID_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ReqDeleteLetter.letterID)
}
inline std::string* ReqDeleteLetter::mutable_letterID() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ReqDeleteLetter.letterID)
  return letterID_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqDeleteLetter::release_letterID() {
  // @@protoc_insertion_point(field_release:OuterMsg.ReqDeleteLetter.letterID)
  
  return letterID_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqDeleteLetter::set_allocated_letterID(std::string* letterID) {
  if (letterID != nullptr) {
    
  } else {
    
  }
  letterID_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), letterID);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ReqDeleteLetter.letterID)
}

// -------------------------------------------------------------------

// AckQueryLetter

// .OuterMsg.GUID self = 1;
inline bool AckQueryLetter::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline const ::OuterMsg::GUID& AckQueryLetter::self() const {
  const ::OuterMsg::GUID* p = self_;
  // @@protoc_insertion_point(field_get:OuterMsg.AckQueryLetter.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* AckQueryLetter::release_self() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckQueryLetter.self)
  
  ::OuterMsg::GUID* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* AckQueryLetter::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckQueryLetter.self)
  return self_;
}
inline void AckQueryLetter::set_allocated_self(::OuterMsg::GUID* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckQueryLetter.self)
}

// int32 num = 2;
inline void AckQueryLetter::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQueryLetter::num() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckQueryLetter.num)
  return num_;
}
inline void AckQueryLetter::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckQueryLetter.num)
}

// -------------------------------------------------------------------

// PubOpData

// bytes PubName = 1;
inline void PubOpData::clear_PubName() {
  PubName_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubOpData::PubName() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PubOpData.PubName)
  return PubName_.GetNoArena();
}
inline void PubOpData::set_PubName(const std::string& value) {
  
  PubName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PubOpData.PubName)
}
inline void PubOpData::set_PubName(std::string&& value) {
  
  PubName_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PubOpData.PubName)
}
inline void PubOpData::set_PubName(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  PubName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PubOpData.PubName)
}
inline void PubOpData::set_PubName(const void* value, size_t size) {
  
  PubName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PubOpData.PubName)
}
inline std::string* PubOpData::mutable_PubName() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PubOpData.PubName)
  return PubName_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubOpData::release_PubName() {
  // @@protoc_insertion_point(field_release:OuterMsg.PubOpData.PubName)
  
  return PubName_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubOpData::set_allocated_PubName(std::string* PubName) {
  if (PubName != nullptr) {
    
  } else {
    
  }
  PubName_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), PubName);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PubOpData.PubName)
}

// .OuterMsg.GUID pub_id = 2;
inline bool PubOpData::has_pub_id() const {
  return this != internal_default_instance() && pub_id_ != nullptr;
}
inline const ::OuterMsg::GUID& PubOpData::pub_id() const {
  const ::OuterMsg::GUID* p = pub_id_;
  // @@protoc_insertion_point(field_get:OuterMsg.PubOpData.pub_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* PubOpData::release_pub_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.PubOpData.pub_id)
  
  ::OuterMsg::GUID* temp = pub_id_;
  pub_id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* PubOpData::mutable_pub_id() {
  
  if (pub_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    pub_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.PubOpData.pub_id)
  return pub_id_;
}
inline void PubOpData::set_allocated_pub_id(::OuterMsg::GUID* pub_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_id_);
  }
  if (pub_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pub_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_id, submessage_arena);
    }
    
  } else {
    
  }
  pub_id_ = pub_id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PubOpData.pub_id)
}

// -------------------------------------------------------------------

// AckResult

// .OuterMsg.EGameEventCode event_code = 1;
inline void AckResult::clear_event_code() {
  event_code_ = 0;
}
inline ::OuterMsg::EGameEventCode AckResult::event_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckResult.event_code)
  return static_cast< ::OuterMsg::EGameEventCode >(event_code_);
}
inline void AckResult::set_event_code(::OuterMsg::EGameEventCode value) {
  
  event_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AckResult.event_code)
}

// bytes name = 2;
inline void AckResult::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckResult::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AckResult.name)
  return name_.GetNoArena();
}
inline void AckResult::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AckResult.name)
}
inline void AckResult::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AckResult.name)
}
inline void AckResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AckResult.name)
}
inline void AckResult::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AckResult.name)
}
inline std::string* AckResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckResult.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckResult::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckResult.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckResult.name)
}

// .OuterMsg.GUID obj_id = 3;
inline bool AckResult::has_obj_id() const {
  return this != internal_default_instance() && obj_id_ != nullptr;
}
inline const ::OuterMsg::GUID& AckResult::obj_id() const {
  const ::OuterMsg::GUID* p = obj_id_;
  // @@protoc_insertion_point(field_get:OuterMsg.AckResult.obj_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* AckResult::release_obj_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.AckResult.obj_id)
  
  ::OuterMsg::GUID* temp = obj_id_;
  obj_id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* AckResult::mutable_obj_id() {
  
  if (obj_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    obj_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.AckResult.obj_id)
  return obj_id_;
}
inline void AckResult::set_allocated_obj_id(::OuterMsg::GUID* obj_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_id_);
  }
  if (obj_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obj_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_id, submessage_arena);
    }
    
  } else {
    
  }
  obj_id_ = obj_id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AckResult.obj_id)
}

// -------------------------------------------------------------------

// PubNameData

// bytes class_name = 1;
inline void PubNameData::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubNameData::class_name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PubNameData.class_name)
  return class_name_.GetNoArena();
}
inline void PubNameData::set_class_name(const std::string& value) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PubNameData.class_name)
}
inline void PubNameData::set_class_name(std::string&& value) {
  
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PubNameData.class_name)
}
inline void PubNameData::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PubNameData.class_name)
}
inline void PubNameData::set_class_name(const void* value, size_t size) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PubNameData.class_name)
}
inline std::string* PubNameData::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PubNameData.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubNameData::release_class_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.PubNameData.class_name)
  
  return class_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubNameData::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PubNameData.class_name)
}

// .OuterMsg.ObjectDataPack object_data = 2;
inline bool PubNameData::has_object_data() const {
  return this != internal_default_instance() && object_data_ != nullptr;
}
inline const ::OuterMsg::ObjectDataPack& PubNameData::object_data() const {
  const ::OuterMsg::ObjectDataPack* p = object_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.PubNameData.object_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::ObjectDataPack*>(
      &::OuterMsg::_ObjectDataPack_default_instance_);
}
inline ::OuterMsg::ObjectDataPack* PubNameData::release_object_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.PubNameData.object_data)
  
  ::OuterMsg::ObjectDataPack* temp = object_data_;
  object_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::ObjectDataPack* PubNameData::mutable_object_data() {
  
  if (object_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::ObjectDataPack>(GetArenaNoVirtual());
    object_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.PubNameData.object_data)
  return object_data_;
}
inline void PubNameData::set_allocated_object_data(::OuterMsg::ObjectDataPack* object_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_data_);
  }
  if (object_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_data, submessage_arena);
    }
    
  } else {
    
  }
  object_data_ = object_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PubNameData.object_data)
}

// -------------------------------------------------------------------

// ChatRemoveRoom

// bytes key = 1;
inline void ChatRemoveRoom::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatRemoveRoom::key() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRemoveRoom.key)
  return key_.GetNoArena();
}
inline void ChatRemoveRoom::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRemoveRoom.key)
}
inline void ChatRemoveRoom::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatRemoveRoom.key)
}
inline void ChatRemoveRoom::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatRemoveRoom.key)
}
inline void ChatRemoveRoom::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatRemoveRoom.key)
}
inline std::string* ChatRemoveRoom::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatRemoveRoom.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatRemoveRoom::release_key() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatRemoveRoom.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRemoveRoom::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatRemoveRoom.key)
}

// -------------------------------------------------------------------

// ChatAddPlayerToRoom

// .OuterMsg.GUID player = 1;
inline bool ChatAddPlayerToRoom::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatAddPlayerToRoom::player() const {
  const ::OuterMsg::GUID* p = player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatAddPlayerToRoom.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatAddPlayerToRoom::release_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatAddPlayerToRoom.player)
  
  ::OuterMsg::GUID* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatAddPlayerToRoom::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatAddPlayerToRoom.player)
  return player_;
}
inline void ChatAddPlayerToRoom::set_allocated_player(::OuterMsg::GUID* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatAddPlayerToRoom.player)
}

// bytes key = 2;
inline void ChatAddPlayerToRoom::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatAddPlayerToRoom::key() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatAddPlayerToRoom.key)
  return key_.GetNoArena();
}
inline void ChatAddPlayerToRoom::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatAddPlayerToRoom.key)
}
inline void ChatAddPlayerToRoom::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatAddPlayerToRoom.key)
}
inline void ChatAddPlayerToRoom::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatAddPlayerToRoom.key)
}
inline void ChatAddPlayerToRoom::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatAddPlayerToRoom.key)
}
inline std::string* ChatAddPlayerToRoom::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatAddPlayerToRoom.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatAddPlayerToRoom::release_key() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatAddPlayerToRoom.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatAddPlayerToRoom::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatAddPlayerToRoom.key)
}

// int32 room_id = 3;
inline void ChatAddPlayerToRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatAddPlayerToRoom::room_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatAddPlayerToRoom.room_id)
  return room_id_;
}
inline void ChatAddPlayerToRoom::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatAddPlayerToRoom.room_id)
}

// int32 chat_recording = 4;
inline void ChatAddPlayerToRoom::clear_chat_recording() {
  chat_recording_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatAddPlayerToRoom::chat_recording() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatAddPlayerToRoom.chat_recording)
  return chat_recording_;
}
inline void ChatAddPlayerToRoom::set_chat_recording(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_recording_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatAddPlayerToRoom.chat_recording)
}

// int32 type = 5;
inline void ChatAddPlayerToRoom::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatAddPlayerToRoom::type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatAddPlayerToRoom.type)
  return type_;
}
inline void ChatAddPlayerToRoom::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatAddPlayerToRoom.type)
}

// -------------------------------------------------------------------

// ChatRemovePlayerToRoom

// .OuterMsg.GUID player = 1;
inline bool ChatRemovePlayerToRoom::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatRemovePlayerToRoom::player() const {
  const ::OuterMsg::GUID* p = player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRemovePlayerToRoom.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatRemovePlayerToRoom::release_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatRemovePlayerToRoom.player)
  
  ::OuterMsg::GUID* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatRemovePlayerToRoom::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatRemovePlayerToRoom.player)
  return player_;
}
inline void ChatRemovePlayerToRoom::set_allocated_player(::OuterMsg::GUID* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatRemovePlayerToRoom.player)
}

// bytes key = 2;
inline void ChatRemovePlayerToRoom::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatRemovePlayerToRoom::key() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRemovePlayerToRoom.key)
  return key_.GetNoArena();
}
inline void ChatRemovePlayerToRoom::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRemovePlayerToRoom.key)
}
inline void ChatRemovePlayerToRoom::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatRemovePlayerToRoom.key)
}
inline void ChatRemovePlayerToRoom::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatRemovePlayerToRoom.key)
}
inline void ChatRemovePlayerToRoom::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatRemovePlayerToRoom.key)
}
inline std::string* ChatRemovePlayerToRoom::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatRemovePlayerToRoom.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatRemovePlayerToRoom::release_key() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatRemovePlayerToRoom.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRemovePlayerToRoom::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatRemovePlayerToRoom.key)
}

// int32 type = 3;
inline void ChatRemovePlayerToRoom::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatRemovePlayerToRoom::type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRemovePlayerToRoom.type)
  return type_;
}
inline void ChatRemovePlayerToRoom::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRemovePlayerToRoom.type)
}

// -------------------------------------------------------------------

// ChatPlayerInfo

// .OuterMsg.GUID player = 1;
inline bool ChatPlayerInfo::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatPlayerInfo::player() const {
  const ::OuterMsg::GUID* p = player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatPlayerInfo.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatPlayerInfo::release_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatPlayerInfo.player)
  
  ::OuterMsg::GUID* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatPlayerInfo::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatPlayerInfo.player)
  return player_;
}
inline void ChatPlayerInfo::set_allocated_player(::OuterMsg::GUID* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatPlayerInfo.player)
}

// bytes custom_info = 2;
inline void ChatPlayerInfo::clear_custom_info() {
  custom_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatPlayerInfo::custom_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatPlayerInfo.custom_info)
  return custom_info_.GetNoArena();
}
inline void ChatPlayerInfo::set_custom_info(const std::string& value) {
  
  custom_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatPlayerInfo.custom_info)
}
inline void ChatPlayerInfo::set_custom_info(std::string&& value) {
  
  custom_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatPlayerInfo.custom_info)
}
inline void ChatPlayerInfo::set_custom_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatPlayerInfo.custom_info)
}
inline void ChatPlayerInfo::set_custom_info(const void* value, size_t size) {
  
  custom_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatPlayerInfo.custom_info)
}
inline std::string* ChatPlayerInfo::mutable_custom_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatPlayerInfo.custom_info)
  return custom_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatPlayerInfo::release_custom_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatPlayerInfo.custom_info)
  
  return custom_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatPlayerInfo::set_allocated_custom_info(std::string* custom_info) {
  if (custom_info != nullptr) {
    
  } else {
    
  }
  custom_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatPlayerInfo.custom_info)
}

// -------------------------------------------------------------------

// ChatPlayerBanned

// .OuterMsg.GUID player = 1;
inline bool ChatPlayerBanned::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatPlayerBanned::player() const {
  const ::OuterMsg::GUID* p = player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatPlayerBanned.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatPlayerBanned::release_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatPlayerBanned.player)
  
  ::OuterMsg::GUID* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatPlayerBanned::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatPlayerBanned.player)
  return player_;
}
inline void ChatPlayerBanned::set_allocated_player(::OuterMsg::GUID* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatPlayerBanned.player)
}

// int32 banned = 2;
inline void ChatPlayerBanned::clear_banned() {
  banned_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatPlayerBanned::banned() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatPlayerBanned.banned)
  return banned_;
}
inline void ChatPlayerBanned::set_banned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  banned_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatPlayerBanned.banned)
}

// -------------------------------------------------------------------

// ChatClientData

// .OuterMsg.GUID player = 1;
inline bool ChatClientData::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatClientData::player() const {
  const ::OuterMsg::GUID* p = player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatClientData.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatClientData::release_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatClientData.player)
  
  ::OuterMsg::GUID* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatClientData::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatClientData.player)
  return player_;
}
inline void ChatClientData::set_allocated_player(::OuterMsg::GUID* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatClientData.player)
}

// -------------------------------------------------------------------

// ChatMsgRoom

// int32 room_id = 1;
inline void ChatMsgRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMsgRoom::room_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgRoom.room_id)
  return room_id_;
}
inline void ChatMsgRoom::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatMsgRoom.room_id)
}

// bytes msg = 2;
inline void ChatMsgRoom::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsgRoom::msg() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgRoom.msg)
  return msg_.GetNoArena();
}
inline void ChatMsgRoom::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatMsgRoom.msg)
}
inline void ChatMsgRoom::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatMsgRoom.msg)
}
inline void ChatMsgRoom::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatMsgRoom.msg)
}
inline void ChatMsgRoom::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatMsgRoom.msg)
}
inline std::string* ChatMsgRoom::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgRoom.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsgRoom::release_msg() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgRoom.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsgRoom::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgRoom.msg)
}

// bytes sender_info = 3;
inline void ChatMsgRoom::clear_sender_info() {
  sender_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsgRoom::sender_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgRoom.sender_info)
  return sender_info_.GetNoArena();
}
inline void ChatMsgRoom::set_sender_info(const std::string& value) {
  
  sender_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatMsgRoom.sender_info)
}
inline void ChatMsgRoom::set_sender_info(std::string&& value) {
  
  sender_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatMsgRoom.sender_info)
}
inline void ChatMsgRoom::set_sender_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatMsgRoom.sender_info)
}
inline void ChatMsgRoom::set_sender_info(const void* value, size_t size) {
  
  sender_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatMsgRoom.sender_info)
}
inline std::string* ChatMsgRoom::mutable_sender_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgRoom.sender_info)
  return sender_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsgRoom::release_sender_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgRoom.sender_info)
  
  return sender_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsgRoom::set_allocated_sender_info(std::string* sender_info) {
  if (sender_info != nullptr) {
    
  } else {
    
  }
  sender_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgRoom.sender_info)
}

// .OuterMsg.GUID sender_player = 4;
inline bool ChatMsgRoom::has_sender_player() const {
  return this != internal_default_instance() && sender_player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatMsgRoom::sender_player() const {
  const ::OuterMsg::GUID* p = sender_player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgRoom.sender_player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatMsgRoom::release_sender_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgRoom.sender_player)
  
  ::OuterMsg::GUID* temp = sender_player_;
  sender_player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatMsgRoom::mutable_sender_player() {
  
  if (sender_player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    sender_player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgRoom.sender_player)
  return sender_player_;
}
inline void ChatMsgRoom::set_allocated_sender_player(::OuterMsg::GUID* sender_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_player_);
  }
  if (sender_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_player, submessage_arena);
    }
    
  } else {
    
  }
  sender_player_ = sender_player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgRoom.sender_player)
}

// -------------------------------------------------------------------

// ChatMsgPlayer

// .OuterMsg.GUID target_player = 1;
inline bool ChatMsgPlayer::has_target_player() const {
  return this != internal_default_instance() && target_player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatMsgPlayer::target_player() const {
  const ::OuterMsg::GUID* p = target_player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgPlayer.target_player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatMsgPlayer::release_target_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgPlayer.target_player)
  
  ::OuterMsg::GUID* temp = target_player_;
  target_player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatMsgPlayer::mutable_target_player() {
  
  if (target_player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    target_player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgPlayer.target_player)
  return target_player_;
}
inline void ChatMsgPlayer::set_allocated_target_player(::OuterMsg::GUID* target_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_player_);
  }
  if (target_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_player, submessage_arena);
    }
    
  } else {
    
  }
  target_player_ = target_player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgPlayer.target_player)
}

// bytes msg = 2;
inline void ChatMsgPlayer::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsgPlayer::msg() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgPlayer.msg)
  return msg_.GetNoArena();
}
inline void ChatMsgPlayer::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatMsgPlayer.msg)
}
inline void ChatMsgPlayer::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatMsgPlayer.msg)
}
inline void ChatMsgPlayer::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatMsgPlayer.msg)
}
inline void ChatMsgPlayer::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatMsgPlayer.msg)
}
inline std::string* ChatMsgPlayer::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgPlayer.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsgPlayer::release_msg() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgPlayer.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsgPlayer::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgPlayer.msg)
}

// bytes sender_info = 3;
inline void ChatMsgPlayer::clear_sender_info() {
  sender_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsgPlayer::sender_info() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgPlayer.sender_info)
  return sender_info_.GetNoArena();
}
inline void ChatMsgPlayer::set_sender_info(const std::string& value) {
  
  sender_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ChatMsgPlayer.sender_info)
}
inline void ChatMsgPlayer::set_sender_info(std::string&& value) {
  
  sender_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ChatMsgPlayer.sender_info)
}
inline void ChatMsgPlayer::set_sender_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatMsgPlayer.sender_info)
}
inline void ChatMsgPlayer::set_sender_info(const void* value, size_t size) {
  
  sender_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatMsgPlayer.sender_info)
}
inline std::string* ChatMsgPlayer::mutable_sender_info() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgPlayer.sender_info)
  return sender_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsgPlayer::release_sender_info() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgPlayer.sender_info)
  
  return sender_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsgPlayer::set_allocated_sender_info(std::string* sender_info) {
  if (sender_info != nullptr) {
    
  } else {
    
  }
  sender_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_info);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgPlayer.sender_info)
}

// .OuterMsg.GUID sender_player = 4;
inline bool ChatMsgPlayer::has_sender_player() const {
  return this != internal_default_instance() && sender_player_ != nullptr;
}
inline const ::OuterMsg::GUID& ChatMsgPlayer::sender_player() const {
  const ::OuterMsg::GUID* p = sender_player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ChatMsgPlayer.sender_player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ChatMsgPlayer::release_sender_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ChatMsgPlayer.sender_player)
  
  ::OuterMsg::GUID* temp = sender_player_;
  sender_player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ChatMsgPlayer::mutable_sender_player() {
  
  if (sender_player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    sender_player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatMsgPlayer.sender_player)
  return sender_player_;
}
inline void ChatMsgPlayer::set_allocated_sender_player(::OuterMsg::GUID* sender_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_player_);
  }
  if (sender_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_player, submessage_arena);
    }
    
  } else {
    
  }
  sender_player_ = sender_player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ChatMsgPlayer.sender_player)
}

// -------------------------------------------------------------------

// ChatRecording

// int32 room_id = 1;
inline void ChatRecording::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatRecording::room_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRecording.room_id)
  return room_id_;
}
inline void ChatRecording::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRecording.room_id)
}

// int32 start = 2;
inline void ChatRecording::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatRecording::start() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRecording.start)
  return start_;
}
inline void ChatRecording::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRecording.start)
}

// int32 count = 3;
inline void ChatRecording::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatRecording::count() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRecording.count)
  return count_;
}
inline void ChatRecording::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRecording.count)
}

// repeated bytes msg_list = 4;
inline int ChatRecording::msg_list_size() const {
  return msg_list_.size();
}
inline void ChatRecording::clear_msg_list() {
  msg_list_.Clear();
}
inline const std::string& ChatRecording::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.ChatRecording.msg_list)
  return msg_list_.Get(index);
}
inline std::string* ChatRecording::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.ChatRecording.msg_list)
  return msg_list_.Mutable(index);
}
inline void ChatRecording::set_msg_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRecording.msg_list)
  msg_list_.Mutable(index)->assign(value);
}
inline void ChatRecording::set_msg_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.ChatRecording.msg_list)
  msg_list_.Mutable(index)->assign(std::move(value));
}
inline void ChatRecording::set_msg_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.ChatRecording.msg_list)
}
inline void ChatRecording::set_msg_list(int index, const void* value, size_t size) {
  msg_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ChatRecording.msg_list)
}
inline std::string* ChatRecording::add_msg_list() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.ChatRecording.msg_list)
  return msg_list_.Add();
}
inline void ChatRecording::add_msg_list(const std::string& value) {
  msg_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.ChatRecording.msg_list)
}
inline void ChatRecording::add_msg_list(std::string&& value) {
  msg_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.ChatRecording.msg_list)
}
inline void ChatRecording::add_msg_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.ChatRecording.msg_list)
}
inline void ChatRecording::add_msg_list(const void* value, size_t size) {
  msg_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.ChatRecording.msg_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatRecording::msg_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.ChatRecording.msg_list)
  return msg_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatRecording::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.ChatRecording.msg_list)
  return &msg_list_;
}

// -------------------------------------------------------------------

// PlayerRename

// bytes account = 1;
inline void PlayerRename::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerRename::account() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PlayerRename.account)
  return account_.GetNoArena();
}
inline void PlayerRename::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PlayerRename.account)
}
inline void PlayerRename::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PlayerRename.account)
}
inline void PlayerRename::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PlayerRename.account)
}
inline void PlayerRename::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PlayerRename.account)
}
inline std::string* PlayerRename::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PlayerRename.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerRename::release_account() {
  // @@protoc_insertion_point(field_release:OuterMsg.PlayerRename.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRename::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PlayerRename.account)
}

// .OuterMsg.GUID player_id = 2;
inline bool PlayerRename::has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline const ::OuterMsg::GUID& PlayerRename::player_id() const {
  const ::OuterMsg::GUID* p = player_id_;
  // @@protoc_insertion_point(field_get:OuterMsg.PlayerRename.player_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* PlayerRename::release_player_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.PlayerRename.player_id)
  
  ::OuterMsg::GUID* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* PlayerRename::mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.PlayerRename.player_id)
  return player_id_;
}
inline void PlayerRename::set_allocated_player_id(::OuterMsg::GUID* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PlayerRename.player_id)
}

// bytes player_name_new = 3;
inline void PlayerRename::clear_player_name_new() {
  player_name_new_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerRename::player_name_new() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PlayerRename.player_name_new)
  return player_name_new_.GetNoArena();
}
inline void PlayerRename::set_player_name_new(const std::string& value) {
  
  player_name_new_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PlayerRename.player_name_new)
}
inline void PlayerRename::set_player_name_new(std::string&& value) {
  
  player_name_new_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PlayerRename.player_name_new)
}
inline void PlayerRename::set_player_name_new(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_new_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PlayerRename.player_name_new)
}
inline void PlayerRename::set_player_name_new(const void* value, size_t size) {
  
  player_name_new_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PlayerRename.player_name_new)
}
inline std::string* PlayerRename::mutable_player_name_new() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PlayerRename.player_name_new)
  return player_name_new_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerRename::release_player_name_new() {
  // @@protoc_insertion_point(field_release:OuterMsg.PlayerRename.player_name_new)
  
  return player_name_new_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRename::set_allocated_player_name_new(std::string* player_name_new) {
  if (player_name_new != nullptr) {
    
  } else {
    
  }
  player_name_new_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name_new);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PlayerRename.player_name_new)
}

// bytes player_name_old = 4;
inline void PlayerRename::clear_player_name_old() {
  player_name_old_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerRename::player_name_old() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PlayerRename.player_name_old)
  return player_name_old_.GetNoArena();
}
inline void PlayerRename::set_player_name_old(const std::string& value) {
  
  player_name_old_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PlayerRename.player_name_old)
}
inline void PlayerRename::set_player_name_old(std::string&& value) {
  
  player_name_old_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PlayerRename.player_name_old)
}
inline void PlayerRename::set_player_name_old(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_old_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PlayerRename.player_name_old)
}
inline void PlayerRename::set_player_name_old(const void* value, size_t size) {
  
  player_name_old_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PlayerRename.player_name_old)
}
inline std::string* PlayerRename::mutable_player_name_old() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PlayerRename.player_name_old)
  return player_name_old_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerRename::release_player_name_old() {
  // @@protoc_insertion_point(field_release:OuterMsg.PlayerRename.player_name_old)
  
  return player_name_old_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRename::set_allocated_player_name_old(std::string* player_name_old) {
  if (player_name_old != nullptr) {
    
  } else {
    
  }
  player_name_old_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name_old);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PlayerRename.player_name_old)
}

// -------------------------------------------------------------------

// ExtraMsg

// int32 server_type = 1;
inline void ExtraMsg::clear_server_type() {
  server_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtraMsg::server_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.server_type)
  return server_type_;
}
inline void ExtraMsg::set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ExtraMsg.server_type)
}

// int32 msg_id = 2;
inline void ExtraMsg::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtraMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.msg_id)
  return msg_id_;
}
inline void ExtraMsg::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ExtraMsg.msg_id)
}

// int32 game_id = 3;
inline void ExtraMsg::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtraMsg::game_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.game_id)
  return game_id_;
}
inline void ExtraMsg::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ExtraMsg.game_id)
}

// .OuterMsg.GUID object_id = 4;
inline bool ExtraMsg::has_object_id() const {
  return this != internal_default_instance() && object_id_ != nullptr;
}
inline const ::OuterMsg::GUID& ExtraMsg::object_id() const {
  const ::OuterMsg::GUID* p = object_id_;
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.object_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ExtraMsg::release_object_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.ExtraMsg.object_id)
  
  ::OuterMsg::GUID* temp = object_id_;
  object_id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ExtraMsg::mutable_object_id() {
  
  if (object_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    object_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ExtraMsg.object_id)
  return object_id_;
}
inline void ExtraMsg::set_allocated_object_id(::OuterMsg::GUID* object_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_id_);
  }
  if (object_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_id, submessage_arena);
    }
    
  } else {
    
  }
  object_id_ = object_id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ExtraMsg.object_id)
}

// bytes data = 5;
inline void ExtraMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExtraMsg::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.data)
  return data_.GetNoArena();
}
inline void ExtraMsg::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ExtraMsg.data)
}
inline void ExtraMsg::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ExtraMsg.data)
}
inline void ExtraMsg::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ExtraMsg.data)
}
inline void ExtraMsg::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ExtraMsg.data)
}
inline std::string* ExtraMsg::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ExtraMsg.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtraMsg::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.ExtraMsg.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtraMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ExtraMsg.data)
}

// int64 socket = 6;
inline void ExtraMsg::clear_socket() {
  socket_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExtraMsg::socket() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.socket)
  return socket_;
}
inline void ExtraMsg::set_socket(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ExtraMsg.socket)
}

// int32 msg_type = 7;
inline void ExtraMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtraMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ExtraMsg.msg_type)
  return msg_type_;
}
inline void ExtraMsg::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ExtraMsg.msg_type)
}

// -------------------------------------------------------------------

// AttachData

// int32 id = 1;
inline void AttachData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttachData::id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AttachData.id)
  return id_;
}
inline void AttachData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.AttachData.id)
}

// bytes data = 2;
inline void AttachData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AttachData::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.AttachData.data)
  return data_.GetNoArena();
}
inline void AttachData::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.AttachData.data)
}
inline void AttachData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.AttachData.data)
}
inline void AttachData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.AttachData.data)
}
inline void AttachData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.AttachData.data)
}
inline std::string* AttachData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.AttachData.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AttachData::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.AttachData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AttachData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.AttachData.data)
}

// -------------------------------------------------------------------

// RankListCreate

// bytes name = 1;
inline void RankListCreate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListCreate::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreate.name)
  return name_.GetNoArena();
}
inline void RankListCreate::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListCreate.name)
}
inline void RankListCreate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListCreate.name)
}
inline void RankListCreate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListCreate.name)
}
inline void RankListCreate::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListCreate.name)
}
inline std::string* RankListCreate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListCreate.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListCreate::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListCreate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListCreate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListCreate.name)
}

// int32 limit = 2;
inline void RankListCreate::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListCreate::limit() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreate.limit)
  return limit_;
}
inline void RankListCreate::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListCreate.limit)
}

// repeated .OuterMsg.PropertyInt order = 3;
inline int RankListCreate::order_size() const {
  return order_.size();
}
inline ::OuterMsg::PropertyInt* RankListCreate::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListCreate.order)
  return order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >*
RankListCreate::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListCreate.order)
  return &order_;
}
inline const ::OuterMsg::PropertyInt& RankListCreate::order(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreate.order)
  return order_.Get(index);
}
inline ::OuterMsg::PropertyInt* RankListCreate::add_order() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListCreate.order)
  return order_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >&
RankListCreate::order() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListCreate.order)
  return order_;
}

// repeated bytes data_name = 4;
inline int RankListCreate::data_name_size() const {
  return data_name_.size();
}
inline void RankListCreate::clear_data_name() {
  data_name_.Clear();
}
inline const std::string& RankListCreate::data_name(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreate.data_name)
  return data_name_.Get(index);
}
inline std::string* RankListCreate::mutable_data_name(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListCreate.data_name)
  return data_name_.Mutable(index);
}
inline void RankListCreate::set_data_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListCreate.data_name)
  data_name_.Mutable(index)->assign(value);
}
inline void RankListCreate::set_data_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListCreate.data_name)
  data_name_.Mutable(index)->assign(std::move(value));
}
inline void RankListCreate::set_data_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListCreate.data_name)
}
inline void RankListCreate::set_data_name(int index, const void* value, size_t size) {
  data_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListCreate.data_name)
}
inline std::string* RankListCreate::add_data_name() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.RankListCreate.data_name)
  return data_name_.Add();
}
inline void RankListCreate::add_data_name(const std::string& value) {
  data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListCreate.data_name)
}
inline void RankListCreate::add_data_name(std::string&& value) {
  data_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.RankListCreate.data_name)
}
inline void RankListCreate::add_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.RankListCreate.data_name)
}
inline void RankListCreate::add_data_name(const void* value, size_t size) {
  data_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.RankListCreate.data_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankListCreate::data_name() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListCreate.data_name)
  return data_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankListCreate::mutable_data_name() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListCreate.data_name)
  return &data_name_;
}

// .OuterMsg.AttachData attach_data = 5;
inline bool RankListCreate::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListCreate::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListCreate::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreate.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListCreate::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListCreate.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListCreate::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListCreate.attach_data)
  return attach_data_;
}
inline void RankListCreate::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListCreate.attach_data)
}

// -------------------------------------------------------------------

// RankListCreateAck

// bytes name = 1;
inline void RankListCreateAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListCreateAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreateAck.name)
  return name_.GetNoArena();
}
inline void RankListCreateAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListCreateAck.name)
}
inline void RankListCreateAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListCreateAck.name)
}
inline void RankListCreateAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListCreateAck.name)
}
inline void RankListCreateAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListCreateAck.name)
}
inline std::string* RankListCreateAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListCreateAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListCreateAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListCreateAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListCreateAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListCreateAck.name)
}

// .OuterMsg.RankListCode ret_code = 2;
inline void RankListCreateAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListCreateAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreateAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListCreateAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListCreateAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 3;
inline bool RankListCreateAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListCreateAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListCreateAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListCreateAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListCreateAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListCreateAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListCreateAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListCreateAck.attach_data)
  return attach_data_;
}
inline void RankListCreateAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListCreateAck.attach_data)
}

// -------------------------------------------------------------------

// RankListDelete

// bytes name = 1;
inline void RankListDelete::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListDelete::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDelete.name)
  return name_.GetNoArena();
}
inline void RankListDelete::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDelete.name)
}
inline void RankListDelete::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListDelete.name)
}
inline void RankListDelete::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListDelete.name)
}
inline void RankListDelete::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListDelete.name)
}
inline std::string* RankListDelete::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDelete.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListDelete::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDelete.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListDelete::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDelete.name)
}

// .OuterMsg.AttachData attach_data = 2;
inline bool RankListDelete::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListDelete::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListDelete::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDelete.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListDelete::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDelete.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListDelete::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDelete.attach_data)
  return attach_data_;
}
inline void RankListDelete::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDelete.attach_data)
}

// -------------------------------------------------------------------

// RankListDeleteAck

// bytes name = 1;
inline void RankListDeleteAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListDeleteAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDeleteAck.name)
  return name_.GetNoArena();
}
inline void RankListDeleteAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDeleteAck.name)
}
inline void RankListDeleteAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListDeleteAck.name)
}
inline void RankListDeleteAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListDeleteAck.name)
}
inline void RankListDeleteAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListDeleteAck.name)
}
inline std::string* RankListDeleteAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDeleteAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListDeleteAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDeleteAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListDeleteAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDeleteAck.name)
}

// .OuterMsg.RankListCode ret_code = 2;
inline void RankListDeleteAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListDeleteAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDeleteAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListDeleteAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDeleteAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 3;
inline bool RankListDeleteAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListDeleteAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListDeleteAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDeleteAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListDeleteAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDeleteAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListDeleteAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDeleteAck.attach_data)
  return attach_data_;
}
inline void RankListDeleteAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDeleteAck.attach_data)
}

// -------------------------------------------------------------------

// RankListScore

// bytes name = 1;
inline void RankListScore::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListScore::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScore.name)
  return name_.GetNoArena();
}
inline void RankListScore::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListScore.name)
}
inline void RankListScore::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListScore.name)
}
inline void RankListScore::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListScore.name)
}
inline void RankListScore::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListScore.name)
}
inline std::string* RankListScore::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScore.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListScore::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListScore.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListScore::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListScore.name)
}

// .OuterMsg.GUID id = 2;
inline bool RankListScore::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListScore::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScore.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListScore::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListScore.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListScore::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScore.id)
  return id_;
}
inline void RankListScore::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListScore.id)
}

// repeated .OuterMsg.PropertyInt arr_data = 3;
inline int RankListScore::arr_data_size() const {
  return arr_data_.size();
}
inline ::OuterMsg::PropertyInt* RankListScore::mutable_arr_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScore.arr_data)
  return arr_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >*
RankListScore::mutable_arr_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListScore.arr_data)
  return &arr_data_;
}
inline const ::OuterMsg::PropertyInt& RankListScore::arr_data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScore.arr_data)
  return arr_data_.Get(index);
}
inline ::OuterMsg::PropertyInt* RankListScore::add_arr_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListScore.arr_data)
  return arr_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >&
RankListScore::arr_data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListScore.arr_data)
  return arr_data_;
}

// .OuterMsg.AttachData attach_data = 4;
inline bool RankListScore::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListScore::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListScore::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScore.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListScore::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListScore.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListScore::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScore.attach_data)
  return attach_data_;
}
inline void RankListScore::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListScore.attach_data)
}

// int64 insert_time = 5;
inline void RankListScore::clear_insert_time() {
  insert_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankListScore::insert_time() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScore.insert_time)
  return insert_time_;
}
inline void RankListScore::set_insert_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  insert_time_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListScore.insert_time)
}

// -------------------------------------------------------------------

// RankListScoreAck

// bytes name = 1;
inline void RankListScoreAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListScoreAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScoreAck.name)
  return name_.GetNoArena();
}
inline void RankListScoreAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListScoreAck.name)
}
inline void RankListScoreAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListScoreAck.name)
}
inline void RankListScoreAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListScoreAck.name)
}
inline void RankListScoreAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListScoreAck.name)
}
inline std::string* RankListScoreAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScoreAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListScoreAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListScoreAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListScoreAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListScoreAck.name)
}

// .OuterMsg.GUID id = 2;
inline bool RankListScoreAck::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListScoreAck::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScoreAck.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListScoreAck::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListScoreAck.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListScoreAck::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScoreAck.id)
  return id_;
}
inline void RankListScoreAck::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListScoreAck.id)
}

// .OuterMsg.RankListCode ret_code = 3;
inline void RankListScoreAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListScoreAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScoreAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListScoreAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListScoreAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 4;
inline bool RankListScoreAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListScoreAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListScoreAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListScoreAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListScoreAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListScoreAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListScoreAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListScoreAck.attach_data)
  return attach_data_;
}
inline void RankListScoreAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListScoreAck.attach_data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankListData

// .OuterMsg.GUID id = 1;
inline bool RankListData::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListData::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListData.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListData::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListData.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListData::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListData.id)
  return id_;
}
inline void RankListData::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListData.id)
}

// map<string, bytes> map_data = 2;
inline int RankListData::map_data_size() const {
  return map_data_.size();
}
inline void RankListData::clear_map_data() {
  map_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RankListData::map_data() const {
  // @@protoc_insertion_point(field_map:OuterMsg.RankListData.map_data)
  return map_data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RankListData::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_map:OuterMsg.RankListData.map_data)
  return map_data_.MutableMap();
}

// .OuterMsg.AttachData attach_data = 3;
inline bool RankListData::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListData::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListData::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListData.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListData::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListData.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListData::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListData.attach_data)
  return attach_data_;
}
inline void RankListData::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListData.attach_data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankListDataAck

// .OuterMsg.GUID id = 1;
inline bool RankListDataAck::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListDataAck::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataAck.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListDataAck::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDataAck.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListDataAck::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataAck.id)
  return id_;
}
inline void RankListDataAck::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDataAck.id)
}

// map<string, bytes> map_data = 2;
inline int RankListDataAck::map_data_size() const {
  return map_data_.size();
}
inline void RankListDataAck::clear_map_data() {
  map_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RankListDataAck::map_data() const {
  // @@protoc_insertion_point(field_map:OuterMsg.RankListDataAck.map_data)
  return map_data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RankListDataAck::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_map:OuterMsg.RankListDataAck.map_data)
  return map_data_.MutableMap();
}

// .OuterMsg.RankListCode ret_code = 3;
inline void RankListDataAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListDataAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListDataAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 4;
inline bool RankListDataAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListDataAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListDataAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListDataAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDataAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListDataAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataAck.attach_data)
  return attach_data_;
}
inline void RankListDataAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDataAck.attach_data)
}

// -------------------------------------------------------------------

// RankListDataArray

// repeated .OuterMsg.GUID id_list = 1;
inline int RankListDataArray::id_list_size() const {
  return id_list_.size();
}
inline ::OuterMsg::GUID* RankListDataArray::mutable_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArray.id_list)
  return id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
RankListDataArray::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListDataArray.id_list)
  return &id_list_;
}
inline const ::OuterMsg::GUID& RankListDataArray::id_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArray.id_list)
  return id_list_.Get(index);
}
inline ::OuterMsg::GUID* RankListDataArray::add_id_list() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArray.id_list)
  return id_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
RankListDataArray::id_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListDataArray.id_list)
  return id_list_;
}

// repeated bytes name_list = 2;
inline int RankListDataArray::name_list_size() const {
  return name_list_.size();
}
inline void RankListDataArray::clear_name_list() {
  name_list_.Clear();
}
inline const std::string& RankListDataArray::name_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArray.name_list)
  return name_list_.Get(index);
}
inline std::string* RankListDataArray::mutable_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArray.name_list)
  return name_list_.Mutable(index);
}
inline void RankListDataArray::set_name_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArray.name_list)
  name_list_.Mutable(index)->assign(value);
}
inline void RankListDataArray::set_name_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArray.name_list)
  name_list_.Mutable(index)->assign(std::move(value));
}
inline void RankListDataArray::set_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListDataArray.name_list)
}
inline void RankListDataArray::set_name_list(int index, const void* value, size_t size) {
  name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListDataArray.name_list)
}
inline std::string* RankListDataArray::add_name_list() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.RankListDataArray.name_list)
  return name_list_.Add();
}
inline void RankListDataArray::add_name_list(const std::string& value) {
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArray.name_list)
}
inline void RankListDataArray::add_name_list(std::string&& value) {
  name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArray.name_list)
}
inline void RankListDataArray::add_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.RankListDataArray.name_list)
}
inline void RankListDataArray::add_name_list(const void* value, size_t size) {
  name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.RankListDataArray.name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankListDataArray::name_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListDataArray.name_list)
  return name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankListDataArray::mutable_name_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListDataArray.name_list)
  return &name_list_;
}

// .OuterMsg.AttachData attach_data = 3;
inline bool RankListDataArray::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListDataArray::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListDataArray::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArray.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListDataArray::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDataArray.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListDataArray::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArray.attach_data)
  return attach_data_;
}
inline void RankListDataArray::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDataArray.attach_data)
}

// -------------------------------------------------------------------

// RankListDataArrayAck_RankData

// .OuterMsg.GUID id = 1;
inline bool RankListDataArrayAck_RankData::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListDataArrayAck_RankData::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArrayAck.RankData.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListDataArrayAck_RankData::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDataArrayAck.RankData.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListDataArrayAck_RankData::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArrayAck.RankData.id)
  return id_;
}
inline void RankListDataArrayAck_RankData::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDataArrayAck.RankData.id)
}

// repeated bytes data_list = 2;
inline int RankListDataArrayAck_RankData::data_list_size() const {
  return data_list_.size();
}
inline void RankListDataArrayAck_RankData::clear_data_list() {
  data_list_.Clear();
}
inline const std::string& RankListDataArrayAck_RankData::data_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArrayAck.RankData.data_list)
  return data_list_.Get(index);
}
inline std::string* RankListDataArrayAck_RankData::mutable_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArrayAck.RankData.data_list)
  return data_list_.Mutable(index);
}
inline void RankListDataArrayAck_RankData::set_data_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArrayAck.RankData.data_list)
  data_list_.Mutable(index)->assign(value);
}
inline void RankListDataArrayAck_RankData::set_data_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArrayAck.RankData.data_list)
  data_list_.Mutable(index)->assign(std::move(value));
}
inline void RankListDataArrayAck_RankData::set_data_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListDataArrayAck.RankData.data_list)
}
inline void RankListDataArrayAck_RankData::set_data_list(int index, const void* value, size_t size) {
  data_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListDataArrayAck.RankData.data_list)
}
inline std::string* RankListDataArrayAck_RankData::add_data_list() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.RankListDataArrayAck.RankData.data_list)
  return data_list_.Add();
}
inline void RankListDataArrayAck_RankData::add_data_list(const std::string& value) {
  data_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArrayAck.RankData.data_list)
}
inline void RankListDataArrayAck_RankData::add_data_list(std::string&& value) {
  data_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArrayAck.RankData.data_list)
}
inline void RankListDataArrayAck_RankData::add_data_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.RankListDataArrayAck.RankData.data_list)
}
inline void RankListDataArrayAck_RankData::add_data_list(const void* value, size_t size) {
  data_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.RankListDataArrayAck.RankData.data_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankListDataArrayAck_RankData::data_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListDataArrayAck.RankData.data_list)
  return data_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankListDataArrayAck_RankData::mutable_data_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListDataArrayAck.RankData.data_list)
  return &data_list_;
}

// -------------------------------------------------------------------

// RankListDataArrayAck

// repeated bytes name_list = 1;
inline int RankListDataArrayAck::name_list_size() const {
  return name_list_.size();
}
inline void RankListDataArrayAck::clear_name_list() {
  name_list_.Clear();
}
inline const std::string& RankListDataArrayAck::name_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArrayAck.name_list)
  return name_list_.Get(index);
}
inline std::string* RankListDataArrayAck::mutable_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArrayAck.name_list)
  return name_list_.Mutable(index);
}
inline void RankListDataArrayAck::set_name_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArrayAck.name_list)
  name_list_.Mutable(index)->assign(value);
}
inline void RankListDataArrayAck::set_name_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArrayAck.name_list)
  name_list_.Mutable(index)->assign(std::move(value));
}
inline void RankListDataArrayAck::set_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListDataArrayAck.name_list)
}
inline void RankListDataArrayAck::set_name_list(int index, const void* value, size_t size) {
  name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListDataArrayAck.name_list)
}
inline std::string* RankListDataArrayAck::add_name_list() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.RankListDataArrayAck.name_list)
  return name_list_.Add();
}
inline void RankListDataArrayAck::add_name_list(const std::string& value) {
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArrayAck.name_list)
}
inline void RankListDataArrayAck::add_name_list(std::string&& value) {
  name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArrayAck.name_list)
}
inline void RankListDataArrayAck::add_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.RankListDataArrayAck.name_list)
}
inline void RankListDataArrayAck::add_name_list(const void* value, size_t size) {
  name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.RankListDataArrayAck.name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankListDataArrayAck::name_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListDataArrayAck.name_list)
  return name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankListDataArrayAck::mutable_name_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListDataArrayAck.name_list)
  return &name_list_;
}

// repeated .OuterMsg.RankListDataArrayAck.RankData data_list = 2;
inline int RankListDataArrayAck::data_list_size() const {
  return data_list_.size();
}
inline void RankListDataArrayAck::clear_data_list() {
  data_list_.Clear();
}
inline ::OuterMsg::RankListDataArrayAck_RankData* RankListDataArrayAck::mutable_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArrayAck.data_list)
  return data_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListDataArrayAck_RankData >*
RankListDataArrayAck::mutable_data_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListDataArrayAck.data_list)
  return &data_list_;
}
inline const ::OuterMsg::RankListDataArrayAck_RankData& RankListDataArrayAck::data_list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArrayAck.data_list)
  return data_list_.Get(index);
}
inline ::OuterMsg::RankListDataArrayAck_RankData* RankListDataArrayAck::add_data_list() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListDataArrayAck.data_list)
  return data_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListDataArrayAck_RankData >&
RankListDataArrayAck::data_list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListDataArrayAck.data_list)
  return data_list_;
}

// .OuterMsg.RankListCode ret_code = 3;
inline void RankListDataArrayAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListDataArrayAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArrayAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListDataArrayAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListDataArrayAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 4;
inline bool RankListDataArrayAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListDataArrayAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListDataArrayAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListDataArrayAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListDataArrayAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListDataArrayAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListDataArrayAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListDataArrayAck.attach_data)
  return attach_data_;
}
inline void RankListDataArrayAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListDataArrayAck.attach_data)
}

// -------------------------------------------------------------------

// RankListRank

// bytes name = 1;
inline void RankListRank::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListRank::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRank.name)
  return name_.GetNoArena();
}
inline void RankListRank::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRank.name)
}
inline void RankListRank::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListRank.name)
}
inline void RankListRank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRank.name)
}
inline void RankListRank::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRank.name)
}
inline std::string* RankListRank::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRank.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListRank::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRank.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListRank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRank.name)
}

// .OuterMsg.GUID id = 2;
inline bool RankListRank::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListRank::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRank.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListRank::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRank.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListRank::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRank.id)
  return id_;
}
inline void RankListRank::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRank.id)
}

// int32 no_data = 3;
inline void RankListRank::clear_no_data() {
  no_data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRank::no_data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRank.no_data)
  return no_data_;
}
inline void RankListRank::set_no_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  no_data_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRank.no_data)
}

// repeated bytes data_name = 4;
inline int RankListRank::data_name_size() const {
  return data_name_.size();
}
inline void RankListRank::clear_data_name() {
  data_name_.Clear();
}
inline const std::string& RankListRank::data_name(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRank.data_name)
  return data_name_.Get(index);
}
inline std::string* RankListRank::mutable_data_name(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRank.data_name)
  return data_name_.Mutable(index);
}
inline void RankListRank::set_data_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRank.data_name)
  data_name_.Mutable(index)->assign(value);
}
inline void RankListRank::set_data_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRank.data_name)
  data_name_.Mutable(index)->assign(std::move(value));
}
inline void RankListRank::set_data_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRank.data_name)
}
inline void RankListRank::set_data_name(int index, const void* value, size_t size) {
  data_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRank.data_name)
}
inline std::string* RankListRank::add_data_name() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.RankListRank.data_name)
  return data_name_.Add();
}
inline void RankListRank::add_data_name(const std::string& value) {
  data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRank.data_name)
}
inline void RankListRank::add_data_name(std::string&& value) {
  data_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRank.data_name)
}
inline void RankListRank::add_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.RankListRank.data_name)
}
inline void RankListRank::add_data_name(const void* value, size_t size) {
  data_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.RankListRank.data_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankListRank::data_name() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRank.data_name)
  return data_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankListRank::mutable_data_name() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRank.data_name)
  return &data_name_;
}

// .OuterMsg.AttachData attach_data = 5;
inline bool RankListRank::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListRank::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListRank::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRank.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListRank::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRank.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListRank::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRank.attach_data)
  return attach_data_;
}
inline void RankListRank::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRank.attach_data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankListRankAck

// bytes name = 1;
inline void RankListRankAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListRankAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankAck.name)
  return name_.GetNoArena();
}
inline void RankListRankAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankAck.name)
}
inline void RankListRankAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListRankAck.name)
}
inline void RankListRankAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRankAck.name)
}
inline void RankListRankAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRankAck.name)
}
inline std::string* RankListRankAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListRankAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListRankAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankAck.name)
}

// .OuterMsg.GUID id = 2;
inline bool RankListRankAck::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListRankAck::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankAck.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListRankAck::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankAck.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListRankAck::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankAck.id)
  return id_;
}
inline void RankListRankAck::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankAck.id)
}

// int32 rank = 3;
inline void RankListRankAck::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRankAck::rank() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankAck.rank)
  return rank_;
}
inline void RankListRankAck::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankAck.rank)
}

// map<string, bytes> map_data = 4;
inline int RankListRankAck::map_data_size() const {
  return map_data_.size();
}
inline void RankListRankAck::clear_map_data() {
  map_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RankListRankAck::map_data() const {
  // @@protoc_insertion_point(field_map:OuterMsg.RankListRankAck.map_data)
  return map_data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RankListRankAck::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_map:OuterMsg.RankListRankAck.map_data)
  return map_data_.MutableMap();
}

// .OuterMsg.RankListCode ret_code = 5;
inline void RankListRankAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListRankAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListRankAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 6;
inline bool RankListRankAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListRankAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListRankAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListRankAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListRankAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankAck.attach_data)
  return attach_data_;
}
inline void RankListRankAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankAck.attach_data)
}

// -------------------------------------------------------------------

// RankListRankArray

// .OuterMsg.AttachData attach_data = 1;
inline bool RankListRankArray::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListRankArray::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListRankArray::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArray.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListRankArray::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankArray.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListRankArray::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankArray.attach_data)
  return attach_data_;
}
inline void RankListRankArray::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankArray.attach_data)
}

// bytes name = 3;
inline void RankListRankArray::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListRankArray::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArray.name)
  return name_.GetNoArena();
}
inline void RankListRankArray::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankArray.name)
}
inline void RankListRankArray::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListRankArray.name)
}
inline void RankListRankArray::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRankArray.name)
}
inline void RankListRankArray::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRankArray.name)
}
inline std::string* RankListRankArray::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankArray.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListRankArray::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankArray.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListRankArray::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankArray.name)
}

// repeated .OuterMsg.GUID ids = 4;
inline int RankListRankArray::ids_size() const {
  return ids_.size();
}
inline ::OuterMsg::GUID* RankListRankArray::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankArray.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
RankListRankArray::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRankArray.ids)
  return &ids_;
}
inline const ::OuterMsg::GUID& RankListRankArray::ids(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArray.ids)
  return ids_.Get(index);
}
inline ::OuterMsg::GUID* RankListRankArray::add_ids() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRankArray.ids)
  return ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
RankListRankArray::ids() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRankArray.ids)
  return ids_;
}

// -------------------------------------------------------------------

// RankListRankArrayAck

// .OuterMsg.AttachData attach_data = 1;
inline bool RankListRankArrayAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListRankArrayAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListRankArrayAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArrayAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListRankArrayAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankArrayAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListRankArrayAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankArrayAck.attach_data)
  return attach_data_;
}
inline void RankListRankArrayAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankArrayAck.attach_data)
}

// .OuterMsg.RankListCode ret_code = 2;
inline void RankListRankArrayAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListRankArrayAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArrayAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListRankArrayAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankArrayAck.ret_code)
}

// bytes name = 3;
inline void RankListRankArrayAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListRankArrayAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArrayAck.name)
  return name_.GetNoArena();
}
inline void RankListRankArrayAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankArrayAck.name)
}
inline void RankListRankArrayAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListRankArrayAck.name)
}
inline void RankListRankArrayAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRankArrayAck.name)
}
inline void RankListRankArrayAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRankArrayAck.name)
}
inline std::string* RankListRankArrayAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankArrayAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListRankArrayAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRankArrayAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListRankArrayAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRankArrayAck.name)
}

// repeated .OuterMsg.GUID ids = 4;
inline int RankListRankArrayAck::ids_size() const {
  return ids_.size();
}
inline ::OuterMsg::GUID* RankListRankArrayAck::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRankArrayAck.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >*
RankListRankArrayAck::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRankArrayAck.ids)
  return &ids_;
}
inline const ::OuterMsg::GUID& RankListRankArrayAck::ids(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArrayAck.ids)
  return ids_.Get(index);
}
inline ::OuterMsg::GUID* RankListRankArrayAck::add_ids() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRankArrayAck.ids)
  return ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GUID >&
RankListRankArrayAck::ids() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRankArrayAck.ids)
  return ids_;
}

// repeated int32 ranks = 5;
inline int RankListRankArrayAck::ranks_size() const {
  return ranks_.size();
}
inline void RankListRankArrayAck::clear_ranks() {
  ranks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRankArrayAck::ranks(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRankArrayAck.ranks)
  return ranks_.Get(index);
}
inline void RankListRankArrayAck::set_ranks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ranks_.Set(index, value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRankArrayAck.ranks)
}
inline void RankListRankArrayAck::add_ranks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ranks_.Add(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRankArrayAck.ranks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankListRankArrayAck::ranks() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRankArrayAck.ranks)
  return ranks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankListRankArrayAck::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRankArrayAck.ranks)
  return &ranks_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankListRangeData

// .OuterMsg.GUID id = 1;
inline bool RankListRangeData::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListRangeData::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeData.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListRangeData::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRangeData.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListRangeData::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRangeData.id)
  return id_;
}
inline void RankListRangeData::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRangeData.id)
}

// int32 rank = 2;
inline void RankListRangeData::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRangeData::rank() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeData.rank)
  return rank_;
}
inline void RankListRangeData::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRangeData.rank)
}

// map<string, bytes> map_data = 3;
inline int RankListRangeData::map_data_size() const {
  return map_data_.size();
}
inline void RankListRangeData::clear_map_data() {
  map_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RankListRangeData::map_data() const {
  // @@protoc_insertion_point(field_map:OuterMsg.RankListRangeData.map_data)
  return map_data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RankListRangeData::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_map:OuterMsg.RankListRangeData.map_data)
  return map_data_.MutableMap();
}

// -------------------------------------------------------------------

// RankListRange

// bytes name = 1;
inline void RankListRange::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListRange::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.name)
  return name_.GetNoArena();
}
inline void RankListRange::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.name)
}
inline void RankListRange::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListRange.name)
}
inline void RankListRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRange.name)
}
inline void RankListRange::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRange.name)
}
inline std::string* RankListRange::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRange.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListRange::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRange.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListRange::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRange.name)
}

// int32 start = 2;
inline void RankListRange::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRange::start() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.start)
  return start_;
}
inline void RankListRange::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.start)
}

// int32 count = 3;
inline void RankListRange::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRange::count() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.count)
  return count_;
}
inline void RankListRange::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.count)
}

// repeated int32 arr_rank = 4;
inline int RankListRange::arr_rank_size() const {
  return arr_rank_.size();
}
inline void RankListRange::clear_arr_rank() {
  arr_rank_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRange::arr_rank(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.arr_rank)
  return arr_rank_.Get(index);
}
inline void RankListRange::set_arr_rank(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.arr_rank)
}
inline void RankListRange::add_arr_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_rank_.Add(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRange.arr_rank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankListRange::arr_rank() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRange.arr_rank)
  return arr_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankListRange::mutable_arr_rank() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRange.arr_rank)
  return &arr_rank_;
}

// int32 no_data = 5;
inline void RankListRange::clear_no_data() {
  no_data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRange::no_data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.no_data)
  return no_data_;
}
inline void RankListRange::set_no_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  no_data_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.no_data)
}

// repeated bytes data_name = 6;
inline int RankListRange::data_name_size() const {
  return data_name_.size();
}
inline void RankListRange::clear_data_name() {
  data_name_.Clear();
}
inline const std::string& RankListRange::data_name(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.data_name)
  return data_name_.Get(index);
}
inline std::string* RankListRange::mutable_data_name(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRange.data_name)
  return data_name_.Mutable(index);
}
inline void RankListRange::set_data_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.data_name)
  data_name_.Mutable(index)->assign(value);
}
inline void RankListRange::set_data_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRange.data_name)
  data_name_.Mutable(index)->assign(std::move(value));
}
inline void RankListRange::set_data_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRange.data_name)
}
inline void RankListRange::set_data_name(int index, const void* value, size_t size) {
  data_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRange.data_name)
}
inline std::string* RankListRange::add_data_name() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.RankListRange.data_name)
  return data_name_.Add();
}
inline void RankListRange::add_data_name(const std::string& value) {
  data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRange.data_name)
}
inline void RankListRange::add_data_name(std::string&& value) {
  data_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRange.data_name)
}
inline void RankListRange::add_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.RankListRange.data_name)
}
inline void RankListRange::add_data_name(const void* value, size_t size) {
  data_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.RankListRange.data_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankListRange::data_name() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRange.data_name)
  return data_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankListRange::mutable_data_name() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRange.data_name)
  return &data_name_;
}

// .OuterMsg.AttachData attach_data = 7;
inline bool RankListRange::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListRange::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListRange::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRange.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListRange::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRange.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListRange::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRange.attach_data)
  return attach_data_;
}
inline void RankListRange::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRange.attach_data)
}

// -------------------------------------------------------------------

// RankListRangeAck

// bytes name = 1;
inline void RankListRangeAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListRangeAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.name)
  return name_.GetNoArena();
}
inline void RankListRangeAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRangeAck.name)
}
inline void RankListRangeAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListRangeAck.name)
}
inline void RankListRangeAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListRangeAck.name)
}
inline void RankListRangeAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListRangeAck.name)
}
inline std::string* RankListRangeAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRangeAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListRangeAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRangeAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListRangeAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRangeAck.name)
}

// int32 start = 2;
inline void RankListRangeAck::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRangeAck::start() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.start)
  return start_;
}
inline void RankListRangeAck::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRangeAck.start)
}

// int32 count = 3;
inline void RankListRangeAck::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRangeAck::count() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.count)
  return count_;
}
inline void RankListRangeAck::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRangeAck.count)
}

// int32 max_rank = 4;
inline void RankListRangeAck::clear_max_rank() {
  max_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListRangeAck::max_rank() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.max_rank)
  return max_rank_;
}
inline void RankListRangeAck::set_max_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_rank_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRangeAck.max_rank)
}

// repeated .OuterMsg.RankListRangeData data = 5;
inline int RankListRangeAck::data_size() const {
  return data_.size();
}
inline void RankListRangeAck::clear_data() {
  data_.Clear();
}
inline ::OuterMsg::RankListRangeData* RankListRangeAck::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRangeAck.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListRangeData >*
RankListRangeAck::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListRangeAck.data)
  return &data_;
}
inline const ::OuterMsg::RankListRangeData& RankListRangeAck::data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.data)
  return data_.Get(index);
}
inline ::OuterMsg::RankListRangeData* RankListRangeAck::add_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListRangeAck.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListRangeData >&
RankListRangeAck::data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListRangeAck.data)
  return data_;
}

// .OuterMsg.RankListCode ret_code = 6;
inline void RankListRangeAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListRangeAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListRangeAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListRangeAck.ret_code)
}

// .OuterMsg.AttachData attach_data = 7;
inline bool RankListRangeAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListRangeAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListRangeAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListRangeAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListRangeAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListRangeAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListRangeAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListRangeAck.attach_data)
  return attach_data_;
}
inline void RankListRangeAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListRangeAck.attach_data)
}

// -------------------------------------------------------------------

// RankListInit

// .OuterMsg.RankListCreate create = 1;
inline bool RankListInit::has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline void RankListInit::clear_create() {
  if (GetArenaNoVirtual() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
inline const ::OuterMsg::RankListCreate& RankListInit::create() const {
  const ::OuterMsg::RankListCreate* p = create_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListInit.create)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RankListCreate*>(
      &::OuterMsg::_RankListCreate_default_instance_);
}
inline ::OuterMsg::RankListCreate* RankListInit::release_create() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListInit.create)
  
  ::OuterMsg::RankListCreate* temp = create_;
  create_ = nullptr;
  return temp;
}
inline ::OuterMsg::RankListCreate* RankListInit::mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RankListCreate>(GetArenaNoVirtual());
    create_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListInit.create)
  return create_;
}
inline void RankListInit::set_allocated_create(::OuterMsg::RankListCreate* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete create_;
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListInit.create)
}

// repeated .OuterMsg.RankListScore data_rank = 2;
inline int RankListInit::data_rank_size() const {
  return data_rank_.size();
}
inline void RankListInit::clear_data_rank() {
  data_rank_.Clear();
}
inline ::OuterMsg::RankListScore* RankListInit::mutable_data_rank(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListInit.data_rank)
  return data_rank_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListScore >*
RankListInit::mutable_data_rank() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RankListInit.data_rank)
  return &data_rank_;
}
inline const ::OuterMsg::RankListScore& RankListInit::data_rank(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListInit.data_rank)
  return data_rank_.Get(index);
}
inline ::OuterMsg::RankListScore* RankListInit::add_data_rank() {
  // @@protoc_insertion_point(field_add:OuterMsg.RankListInit.data_rank)
  return data_rank_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RankListScore >&
RankListInit::data_rank() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RankListInit.data_rank)
  return data_rank_;
}

// int32 finish = 3;
inline void RankListInit::clear_finish() {
  finish_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListInit::finish() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListInit.finish)
  return finish_;
}
inline void RankListInit::set_finish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  finish_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListInit.finish)
}

// -------------------------------------------------------------------

// RankListUpdate

// bytes name = 1;
inline void RankListUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListUpdate::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListUpdate.name)
  return name_.GetNoArena();
}
inline void RankListUpdate::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListUpdate.name)
}
inline void RankListUpdate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListUpdate.name)
}
inline void RankListUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListUpdate.name)
}
inline void RankListUpdate::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListUpdate.name)
}
inline std::string* RankListUpdate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListUpdate.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListUpdate::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListUpdate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListUpdate.name)
}

// .OuterMsg.GUID del = 2;
inline bool RankListUpdate::has_del() const {
  return this != internal_default_instance() && del_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListUpdate::del() const {
  const ::OuterMsg::GUID* p = del_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListUpdate.del)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListUpdate::release_del() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListUpdate.del)
  
  ::OuterMsg::GUID* temp = del_;
  del_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListUpdate::mutable_del() {
  
  if (del_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    del_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListUpdate.del)
  return del_;
}
inline void RankListUpdate::set_allocated_del(::OuterMsg::GUID* del) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(del_);
  }
  if (del) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      del = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del, submessage_arena);
    }
    
  } else {
    
  }
  del_ = del;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListUpdate.del)
}

// .OuterMsg.RankListScore update = 3;
inline bool RankListUpdate::has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline void RankListUpdate::clear_update() {
  if (GetArenaNoVirtual() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
inline const ::OuterMsg::RankListScore& RankListUpdate::update() const {
  const ::OuterMsg::RankListScore* p = update_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListUpdate.update)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RankListScore*>(
      &::OuterMsg::_RankListScore_default_instance_);
}
inline ::OuterMsg::RankListScore* RankListUpdate::release_update() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListUpdate.update)
  
  ::OuterMsg::RankListScore* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::OuterMsg::RankListScore* RankListUpdate::mutable_update() {
  
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RankListScore>(GetArenaNoVirtual());
    update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListUpdate.update)
  return update_;
}
inline void RankListUpdate::set_allocated_update(::OuterMsg::RankListScore* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListUpdate.update)
}

// -------------------------------------------------------------------

// RankListSwapRank

// .OuterMsg.AttachData attach_data = 1;
inline bool RankListSwapRank::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListSwapRank::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListSwapRank::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRank.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListSwapRank::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRank.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListSwapRank::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRank.attach_data)
  return attach_data_;
}
inline void RankListSwapRank::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRank.attach_data)
}

// bytes name = 3;
inline void RankListSwapRank::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListSwapRank::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRank.name)
  return name_.GetNoArena();
}
inline void RankListSwapRank::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListSwapRank.name)
}
inline void RankListSwapRank::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListSwapRank.name)
}
inline void RankListSwapRank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListSwapRank.name)
}
inline void RankListSwapRank::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListSwapRank.name)
}
inline std::string* RankListSwapRank::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRank.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListSwapRank::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRank.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListSwapRank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRank.name)
}

// .OuterMsg.GUID key1 = 4;
inline bool RankListSwapRank::has_key1() const {
  return this != internal_default_instance() && key1_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListSwapRank::key1() const {
  const ::OuterMsg::GUID* p = key1_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRank.key1)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListSwapRank::release_key1() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRank.key1)
  
  ::OuterMsg::GUID* temp = key1_;
  key1_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListSwapRank::mutable_key1() {
  
  if (key1_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    key1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRank.key1)
  return key1_;
}
inline void RankListSwapRank::set_allocated_key1(::OuterMsg::GUID* key1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key1_);
  }
  if (key1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key1, submessage_arena);
    }
    
  } else {
    
  }
  key1_ = key1;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRank.key1)
}

// .OuterMsg.GUID key2 = 5;
inline bool RankListSwapRank::has_key2() const {
  return this != internal_default_instance() && key2_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListSwapRank::key2() const {
  const ::OuterMsg::GUID* p = key2_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRank.key2)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListSwapRank::release_key2() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRank.key2)
  
  ::OuterMsg::GUID* temp = key2_;
  key2_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListSwapRank::mutable_key2() {
  
  if (key2_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    key2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRank.key2)
  return key2_;
}
inline void RankListSwapRank::set_allocated_key2(::OuterMsg::GUID* key2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key2_);
  }
  if (key2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key2, submessage_arena);
    }
    
  } else {
    
  }
  key2_ = key2;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRank.key2)
}

// -------------------------------------------------------------------

// RankListSwapRankAck

// .OuterMsg.AttachData attach_data = 1;
inline bool RankListSwapRankAck::has_attach_data() const {
  return this != internal_default_instance() && attach_data_ != nullptr;
}
inline void RankListSwapRankAck::clear_attach_data() {
  if (GetArenaNoVirtual() == nullptr && attach_data_ != nullptr) {
    delete attach_data_;
  }
  attach_data_ = nullptr;
}
inline const ::OuterMsg::AttachData& RankListSwapRankAck::attach_data() const {
  const ::OuterMsg::AttachData* p = attach_data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.attach_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::AttachData*>(
      &::OuterMsg::_AttachData_default_instance_);
}
inline ::OuterMsg::AttachData* RankListSwapRankAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRankAck.attach_data)
  
  ::OuterMsg::AttachData* temp = attach_data_;
  attach_data_ = nullptr;
  return temp;
}
inline ::OuterMsg::AttachData* RankListSwapRankAck::mutable_attach_data() {
  
  if (attach_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::AttachData>(GetArenaNoVirtual());
    attach_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRankAck.attach_data)
  return attach_data_;
}
inline void RankListSwapRankAck::set_allocated_attach_data(::OuterMsg::AttachData* attach_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attach_data_;
  }
  if (attach_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach_data, submessage_arena);
    }
    
  } else {
    
  }
  attach_data_ = attach_data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRankAck.attach_data)
}

// .OuterMsg.RankListCode ret_code = 2;
inline void RankListSwapRankAck::clear_ret_code() {
  ret_code_ = 0;
}
inline ::OuterMsg::RankListCode RankListSwapRankAck::ret_code() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.ret_code)
  return static_cast< ::OuterMsg::RankListCode >(ret_code_);
}
inline void RankListSwapRankAck::set_ret_code(::OuterMsg::RankListCode value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListSwapRankAck.ret_code)
}

// bytes name = 3;
inline void RankListSwapRankAck::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankListSwapRankAck::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.name)
  return name_.GetNoArena();
}
inline void RankListSwapRankAck::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RankListSwapRankAck.name)
}
inline void RankListSwapRankAck::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RankListSwapRankAck.name)
}
inline void RankListSwapRankAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RankListSwapRankAck.name)
}
inline void RankListSwapRankAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RankListSwapRankAck.name)
}
inline std::string* RankListSwapRankAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRankAck.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankListSwapRankAck::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRankAck.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankListSwapRankAck::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRankAck.name)
}

// .OuterMsg.GUID key1 = 4;
inline bool RankListSwapRankAck::has_key1() const {
  return this != internal_default_instance() && key1_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListSwapRankAck::key1() const {
  const ::OuterMsg::GUID* p = key1_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.key1)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListSwapRankAck::release_key1() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRankAck.key1)
  
  ::OuterMsg::GUID* temp = key1_;
  key1_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListSwapRankAck::mutable_key1() {
  
  if (key1_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    key1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRankAck.key1)
  return key1_;
}
inline void RankListSwapRankAck::set_allocated_key1(::OuterMsg::GUID* key1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key1_);
  }
  if (key1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key1, submessage_arena);
    }
    
  } else {
    
  }
  key1_ = key1;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRankAck.key1)
}

// .OuterMsg.GUID key2 = 5;
inline bool RankListSwapRankAck::has_key2() const {
  return this != internal_default_instance() && key2_ != nullptr;
}
inline const ::OuterMsg::GUID& RankListSwapRankAck::key2() const {
  const ::OuterMsg::GUID* p = key2_;
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.key2)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RankListSwapRankAck::release_key2() {
  // @@protoc_insertion_point(field_release:OuterMsg.RankListSwapRankAck.key2)
  
  ::OuterMsg::GUID* temp = key2_;
  key2_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RankListSwapRankAck::mutable_key2() {
  
  if (key2_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    key2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RankListSwapRankAck.key2)
  return key2_;
}
inline void RankListSwapRankAck::set_allocated_key2(::OuterMsg::GUID* key2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key2_);
  }
  if (key2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key2, submessage_arena);
    }
    
  } else {
    
  }
  key2_ = key2;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RankListSwapRankAck.key2)
}

// int32 rank1 = 6;
inline void RankListSwapRankAck::clear_rank1() {
  rank1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListSwapRankAck::rank1() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.rank1)
  return rank1_;
}
inline void RankListSwapRankAck::set_rank1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank1_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListSwapRankAck.rank1)
}

// int32 rank2 = 7;
inline void RankListSwapRankAck::clear_rank2() {
  rank2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankListSwapRankAck::rank2() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RankListSwapRankAck.rank2)
  return rank2_;
}
inline void RankListSwapRankAck::set_rank2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank2_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RankListSwapRankAck.rank2)
}

// -------------------------------------------------------------------

// ServerConnectInfo

// bytes id = 1;
inline void ServerConnectInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerConnectInfo::id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectInfo.id)
  return id_.GetNoArena();
}
inline void ServerConnectInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerConnectInfo.id)
}
inline void ServerConnectInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerConnectInfo.id)
}
inline void ServerConnectInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerConnectInfo.id)
}
inline void ServerConnectInfo::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerConnectInfo.id)
}
inline std::string* ServerConnectInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerConnectInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerConnectInfo::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerConnectInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnectInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerConnectInfo.id)
}

// bytes ip = 2;
inline void ServerConnectInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerConnectInfo::ip() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectInfo.ip)
  return ip_.GetNoArena();
}
inline void ServerConnectInfo::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.ServerConnectInfo.ip)
}
inline void ServerConnectInfo::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.ServerConnectInfo.ip)
}
inline void ServerConnectInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.ServerConnectInfo.ip)
}
inline void ServerConnectInfo::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.ServerConnectInfo.ip)
}
inline std::string* ServerConnectInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerConnectInfo.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerConnectInfo::release_ip() {
  // @@protoc_insertion_point(field_release:OuterMsg.ServerConnectInfo.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnectInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ServerConnectInfo.ip)
}

// int32 port = 3;
inline void ServerConnectInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConnectInfo::port() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectInfo.port)
  return port_;
}
inline void ServerConnectInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerConnectInfo.port)
}

// int32 webport = 4;
inline void ServerConnectInfo::clear_webport() {
  webport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConnectInfo::webport() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectInfo.webport)
  return webport_;
}
inline void ServerConnectInfo::set_webport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  webport_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerConnectInfo.webport)
}

// int32 type = 5;
inline void ServerConnectInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConnectInfo::type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectInfo.type)
  return type_;
}
inline void ServerConnectInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerConnectInfo.type)
}

// -------------------------------------------------------------------

// ClientConnectInfo

// .OuterMsg.GUID client = 1;
inline bool ClientConnectInfo::has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline const ::OuterMsg::GUID& ClientConnectInfo::client() const {
  const ::OuterMsg::GUID* p = client_;
  // @@protoc_insertion_point(field_get:OuterMsg.ClientConnectInfo.client)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ClientConnectInfo::release_client() {
  // @@protoc_insertion_point(field_release:OuterMsg.ClientConnectInfo.client)
  
  ::OuterMsg::GUID* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ClientConnectInfo::mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ClientConnectInfo.client)
  return client_;
}
inline void ClientConnectInfo::set_allocated_client(::OuterMsg::GUID* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ClientConnectInfo.client)
}

// .OuterMsg.GUID player = 2;
inline bool ClientConnectInfo::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::OuterMsg::GUID& ClientConnectInfo::player() const {
  const ::OuterMsg::GUID* p = player_;
  // @@protoc_insertion_point(field_get:OuterMsg.ClientConnectInfo.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ClientConnectInfo::release_player() {
  // @@protoc_insertion_point(field_release:OuterMsg.ClientConnectInfo.player)
  
  ::OuterMsg::GUID* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ClientConnectInfo::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ClientConnectInfo.player)
  return player_;
}
inline void ClientConnectInfo::set_allocated_player(::OuterMsg::GUID* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ClientConnectInfo.player)
}

// int32 game_id = 3;
inline void ClientConnectInfo::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientConnectInfo::game_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ClientConnectInfo.game_id)
  return game_id_;
}
inline void ClientConnectInfo::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ClientConnectInfo.game_id)
}

// int32 gate_id = 4;
inline void ClientConnectInfo::clear_gate_id() {
  gate_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientConnectInfo::gate_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ClientConnectInfo.gate_id)
  return gate_id_;
}
inline void ClientConnectInfo::set_gate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gate_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ClientConnectInfo.gate_id)
}

// -------------------------------------------------------------------

// GuidName

// .OuterMsg.GUID id = 1;
inline bool GuidName::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::OuterMsg::GUID& GuidName::id() const {
  const ::OuterMsg::GUID* p = id_;
  // @@protoc_insertion_point(field_get:OuterMsg.GuidName.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* GuidName::release_id() {
  // @@protoc_insertion_point(field_release:OuterMsg.GuidName.id)
  
  ::OuterMsg::GUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* GuidName::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.GuidName.id)
  return id_;
}
inline void GuidName::set_allocated_id(::OuterMsg::GUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.GuidName.id)
}

// bytes name = 2;
inline void GuidName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GuidName::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.GuidName.name)
  return name_.GetNoArena();
}
inline void GuidName::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.GuidName.name)
}
inline void GuidName::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.GuidName.name)
}
inline void GuidName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.GuidName.name)
}
inline void GuidName::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.GuidName.name)
}
inline std::string* GuidName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.GuidName.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuidName::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.GuidName.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuidName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.GuidName.name)
}

// -------------------------------------------------------------------

// GuidNameList

// .OuterMsg.GuidNameList.State state = 1;
inline void GuidNameList::clear_state() {
  state_ = 0;
}
inline ::OuterMsg::GuidNameList_State GuidNameList::state() const {
  // @@protoc_insertion_point(field_get:OuterMsg.GuidNameList.state)
  return static_cast< ::OuterMsg::GuidNameList_State >(state_);
}
inline void GuidNameList::set_state(::OuterMsg::GuidNameList_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.GuidNameList.state)
}

// repeated .OuterMsg.GuidName list = 2;
inline int GuidNameList::list_size() const {
  return list_.size();
}
inline void GuidNameList::clear_list() {
  list_.Clear();
}
inline ::OuterMsg::GuidName* GuidNameList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.GuidNameList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GuidName >*
GuidNameList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.GuidNameList.list)
  return &list_;
}
inline const ::OuterMsg::GuidName& GuidNameList::list(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.GuidNameList.list)
  return list_.Get(index);
}
inline ::OuterMsg::GuidName* GuidNameList::add_list() {
  // @@protoc_insertion_point(field_add:OuterMsg.GuidNameList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::GuidName >&
GuidNameList::list() const {
  // @@protoc_insertion_point(field_list:OuterMsg.GuidNameList.list)
  return list_;
}

// -------------------------------------------------------------------

// OptServerID

// int32 server_id = 1;
inline void OptServerID::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptServerID::server_id() const {
  // @@protoc_insertion_point(field_get:OuterMsg.OptServerID.server_id)
  return server_id_;
}
inline void OptServerID::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.OptServerID.server_id)
}

// -------------------------------------------------------------------

// ColdDataStore

// repeated .OuterMsg.PropertyString data = 1;
inline int ColdDataStore::data_size() const {
  return data_.size();
}
inline ::OuterMsg::PropertyString* ColdDataStore::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.ColdDataStore.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >*
ColdDataStore::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.ColdDataStore.data)
  return &data_;
}
inline const ::OuterMsg::PropertyString& ColdDataStore::data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.ColdDataStore.data)
  return data_.Get(index);
}
inline ::OuterMsg::PropertyString* ColdDataStore::add_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.ColdDataStore.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >&
ColdDataStore::data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.ColdDataStore.data)
  return data_;
}

// -------------------------------------------------------------------

// LogToDB

// bytes rec_name = 1;
inline void LogToDB::clear_rec_name() {
  rec_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogToDB::rec_name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.LogToDB.rec_name)
  return rec_name_.GetNoArena();
}
inline void LogToDB::set_rec_name(const std::string& value) {
  
  rec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.LogToDB.rec_name)
}
inline void LogToDB::set_rec_name(std::string&& value) {
  
  rec_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.LogToDB.rec_name)
}
inline void LogToDB::set_rec_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.LogToDB.rec_name)
}
inline void LogToDB::set_rec_name(const void* value, size_t size) {
  
  rec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.LogToDB.rec_name)
}
inline std::string* LogToDB::mutable_rec_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.LogToDB.rec_name)
  return rec_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogToDB::release_rec_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.LogToDB.rec_name)
  
  return rec_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogToDB::set_allocated_rec_name(std::string* rec_name) {
  if (rec_name != nullptr) {
    
  } else {
    
  }
  rec_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rec_name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LogToDB.rec_name)
}

// .OuterMsg.PBDataList data_list = 2;
inline bool LogToDB::has_data_list() const {
  return this != internal_default_instance() && data_list_ != nullptr;
}
inline const ::OuterMsg::PBDataList& LogToDB::data_list() const {
  const ::OuterMsg::PBDataList* p = data_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.LogToDB.data_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PBDataList*>(
      &::OuterMsg::_PBDataList_default_instance_);
}
inline ::OuterMsg::PBDataList* LogToDB::release_data_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.LogToDB.data_list)
  
  ::OuterMsg::PBDataList* temp = data_list_;
  data_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PBDataList* LogToDB::mutable_data_list() {
  
  if (data_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PBDataList>(GetArenaNoVirtual());
    data_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.LogToDB.data_list)
  return data_list_;
}
inline void LogToDB::set_allocated_data_list(::OuterMsg::PBDataList* data_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_list_);
  }
  if (data_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_list, submessage_arena);
    }
    
  } else {
    
  }
  data_list_ = data_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.LogToDB.data_list)
}

// -------------------------------------------------------------------

// ServerConnectList

// .OuterMsg.ServerConnectList.EOptType OptType = 1;
inline void ServerConnectList::clear_OptType() {
  OptType_ = 0;
}
inline ::OuterMsg::ServerConnectList_EOptType ServerConnectList::OptType() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectList.OptType)
  return static_cast< ::OuterMsg::ServerConnectList_EOptType >(OptType_);
}
inline void ServerConnectList::set_OptType(::OuterMsg::ServerConnectList_EOptType value) {
  
  OptType_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ServerConnectList.OptType)
}

// repeated .OuterMsg.ServerConnectInfo data = 2;
inline int ServerConnectList::data_size() const {
  return data_.size();
}
inline void ServerConnectList::clear_data() {
  data_.Clear();
}
inline ::OuterMsg::ServerConnectInfo* ServerConnectList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.ServerConnectList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerConnectInfo >*
ServerConnectList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.ServerConnectList.data)
  return &data_;
}
inline const ::OuterMsg::ServerConnectInfo& ServerConnectList::data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.ServerConnectList.data)
  return data_.Get(index);
}
inline ::OuterMsg::ServerConnectInfo* ServerConnectList::add_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.ServerConnectList.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ServerConnectInfo >&
ServerConnectList::data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.ServerConnectList.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OuterMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OuterMsg::GuidNameList_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OuterMsg::GuidNameList_State>() {
  return ::OuterMsg::GuidNameList_State_descriptor();
}
template <> struct is_proto_enum< ::OuterMsg::ServerConnectList_EOptType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OuterMsg::ServerConnectList_EOptType>() {
  return ::OuterMsg::ServerConnectList_EOptType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OuterMsg_2eproto
