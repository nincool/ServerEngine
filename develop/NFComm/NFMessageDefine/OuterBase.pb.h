// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OuterBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OuterBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NFDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OuterBase_2eproto LIBPROTOC_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct_OuterBase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBPROTOC_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OuterBase_2eproto;
namespace OuterMsg {
class GUID;
class GUIDDefaultTypeInternal;
LIBPROTOC_EXPORT extern GUIDDefaultTypeInternal _GUID_default_instance_;
class ObjectDataPack;
class ObjectDataPackDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectDataPackDefaultTypeInternal _ObjectDataPack_default_instance_;
class ObjectPropertyList;
class ObjectPropertyListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyListDefaultTypeInternal _ObjectPropertyList_default_instance_;
class ObjectRecordList;
class ObjectRecordListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordListDefaultTypeInternal _ObjectRecordList_default_instance_;
class PBData;
class PBDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBDataDefaultTypeInternal _PBData_default_instance_;
class PBDataList;
class PBDataListDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBDataListDefaultTypeInternal _PBDataList_default_instance_;
class PackMysqlParam;
class PackMysqlParamDefaultTypeInternal;
LIBPROTOC_EXPORT extern PackMysqlParamDefaultTypeInternal _PackMysqlParam_default_instance_;
class PackMysqlServerInfo;
class PackMysqlServerInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern PackMysqlServerInfoDefaultTypeInternal _PackMysqlServerInfo_default_instance_;
class PropertyBytes;
class PropertyBytesDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyBytesDefaultTypeInternal _PropertyBytes_default_instance_;
class PropertyFloat;
class PropertyFloatDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyFloatDefaultTypeInternal _PropertyFloat_default_instance_;
class PropertyInt;
class PropertyIntDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyIntDefaultTypeInternal _PropertyInt_default_instance_;
class PropertyList;
class PropertyListDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyListDefaultTypeInternal _PropertyList_default_instance_;
class PropertyObject;
class PropertyObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyObjectDefaultTypeInternal _PropertyObject_default_instance_;
class PropertyString;
class PropertyStringDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyStringDefaultTypeInternal _PropertyString_default_instance_;
class Record;
class RecordDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordDefaultTypeInternal _Record_default_instance_;
class RecordFloat;
class RecordFloatDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordFloatDefaultTypeInternal _RecordFloat_default_instance_;
class RecordInt;
class RecordIntDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordIntDefaultTypeInternal _RecordInt_default_instance_;
class RecordList;
class RecordListDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordListDefaultTypeInternal _RecordList_default_instance_;
class RecordObject;
class RecordObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordObjectDefaultTypeInternal _RecordObject_default_instance_;
class RecordRow;
class RecordRowDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordRowDefaultTypeInternal _RecordRow_default_instance_;
class RecordString;
class RecordStringDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordStringDefaultTypeInternal _RecordString_default_instance_;
class SqlExecute;
class SqlExecuteDefaultTypeInternal;
LIBPROTOC_EXPORT extern SqlExecuteDefaultTypeInternal _SqlExecute_default_instance_;
}  // namespace OuterMsg
PROTOBUF_NAMESPACE_OPEN
template<> LIBPROTOC_EXPORT ::OuterMsg::GUID* Arena::CreateMaybeMessage<::OuterMsg::GUID>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ObjectDataPack* Arena::CreateMaybeMessage<::OuterMsg::ObjectDataPack>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ObjectPropertyList* Arena::CreateMaybeMessage<::OuterMsg::ObjectPropertyList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::ObjectRecordList* Arena::CreateMaybeMessage<::OuterMsg::ObjectRecordList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PBData* Arena::CreateMaybeMessage<::OuterMsg::PBData>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PBDataList* Arena::CreateMaybeMessage<::OuterMsg::PBDataList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PackMysqlParam* Arena::CreateMaybeMessage<::OuterMsg::PackMysqlParam>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PackMysqlServerInfo* Arena::CreateMaybeMessage<::OuterMsg::PackMysqlServerInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PropertyBytes* Arena::CreateMaybeMessage<::OuterMsg::PropertyBytes>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PropertyFloat* Arena::CreateMaybeMessage<::OuterMsg::PropertyFloat>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PropertyInt* Arena::CreateMaybeMessage<::OuterMsg::PropertyInt>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PropertyList* Arena::CreateMaybeMessage<::OuterMsg::PropertyList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PropertyObject* Arena::CreateMaybeMessage<::OuterMsg::PropertyObject>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::PropertyString* Arena::CreateMaybeMessage<::OuterMsg::PropertyString>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::Record* Arena::CreateMaybeMessage<::OuterMsg::Record>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RecordFloat* Arena::CreateMaybeMessage<::OuterMsg::RecordFloat>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RecordInt* Arena::CreateMaybeMessage<::OuterMsg::RecordInt>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RecordList* Arena::CreateMaybeMessage<::OuterMsg::RecordList>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RecordObject* Arena::CreateMaybeMessage<::OuterMsg::RecordObject>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RecordRow* Arena::CreateMaybeMessage<::OuterMsg::RecordRow>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::RecordString* Arena::CreateMaybeMessage<::OuterMsg::RecordString>(Arena*);
template<> LIBPROTOC_EXPORT ::OuterMsg::SqlExecute* Arena::CreateMaybeMessage<::OuterMsg::SqlExecute>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OuterMsg {

// ===================================================================

class LIBPROTOC_EXPORT GUID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.GUID) */ {
 public:
  GUID();
  virtual ~GUID();

  GUID(const GUID& from);
  GUID(GUID&& from) noexcept
    : GUID() {
    *this = ::std::move(from);
  }

  inline GUID& operator=(const GUID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GUID& operator=(GUID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GUID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GUID* internal_default_instance() {
    return reinterpret_cast<const GUID*>(
               &_GUID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GUID& a, GUID& b) {
    a.Swap(&b);
  }
  inline void Swap(GUID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GUID* New() const final {
    return CreateMaybeMessage<GUID>(nullptr);
  }

  GUID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GUID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GUID& from);
  void MergeFrom(const GUID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GUID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.GUID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kData1FieldNumber = 1,
    kData2FieldNumber = 2,
  };
  // int64 data1 = 1;
  void clear_data1();
  ::PROTOBUF_NAMESPACE_ID::int64 data1() const;
  void set_data1(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 data2 = 2;
  void clear_data2();
  ::PROTOBUF_NAMESPACE_ID::int64 data2() const;
  void set_data2(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.GUID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 data1_;
  ::PROTOBUF_NAMESPACE_ID::int64 data2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PropertyInt) */ {
 public:
  PropertyInt();
  virtual ~PropertyInt();

  PropertyInt(const PropertyInt& from);
  PropertyInt(PropertyInt&& from) noexcept
    : PropertyInt() {
    *this = ::std::move(from);
  }

  inline PropertyInt& operator=(const PropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyInt& operator=(PropertyInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyInt* internal_default_instance() {
    return reinterpret_cast<const PropertyInt*>(
               &_PropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PropertyInt& a, PropertyInt& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyInt* New() const final {
    return CreateMaybeMessage<PropertyInt>(nullptr);
  }

  PropertyInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyInt& from);
  void MergeFrom(const PropertyInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PropertyInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 data = 2;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.PropertyInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PropertyFloat) */ {
 public:
  PropertyFloat();
  virtual ~PropertyFloat();

  PropertyFloat(const PropertyFloat& from);
  PropertyFloat(PropertyFloat&& from) noexcept
    : PropertyFloat() {
    *this = ::std::move(from);
  }

  inline PropertyFloat& operator=(const PropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyFloat& operator=(PropertyFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyFloat* internal_default_instance() {
    return reinterpret_cast<const PropertyFloat*>(
               &_PropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PropertyFloat& a, PropertyFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyFloat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyFloat* New() const final {
    return CreateMaybeMessage<PropertyFloat>(nullptr);
  }

  PropertyFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyFloat& from);
  void MergeFrom(const PropertyFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PropertyFloat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // double data = 2;
  void clear_data();
  double data() const;
  void set_data(double value);

  // @@protoc_insertion_point(class_scope:OuterMsg.PropertyFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PropertyString) */ {
 public:
  PropertyString();
  virtual ~PropertyString();

  PropertyString(const PropertyString& from);
  PropertyString(PropertyString&& from) noexcept
    : PropertyString() {
    *this = ::std::move(from);
  }

  inline PropertyString& operator=(const PropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyString& operator=(PropertyString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyString* internal_default_instance() {
    return reinterpret_cast<const PropertyString*>(
               &_PropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropertyString& a, PropertyString& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyString* New() const final {
    return CreateMaybeMessage<PropertyString>(nullptr);
  }

  PropertyString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyString& from);
  void MergeFrom(const PropertyString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PropertyString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:OuterMsg.PropertyString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyBytes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PropertyBytes) */ {
 public:
  PropertyBytes();
  virtual ~PropertyBytes();

  PropertyBytes(const PropertyBytes& from);
  PropertyBytes(PropertyBytes&& from) noexcept
    : PropertyBytes() {
    *this = ::std::move(from);
  }

  inline PropertyBytes& operator=(const PropertyBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyBytes& operator=(PropertyBytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyBytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyBytes* internal_default_instance() {
    return reinterpret_cast<const PropertyBytes*>(
               &_PropertyBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PropertyBytes& a, PropertyBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyBytes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyBytes* New() const final {
    return CreateMaybeMessage<PropertyBytes>(nullptr);
  }

  PropertyBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyBytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyBytes& from);
  void MergeFrom(const PropertyBytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyBytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PropertyBytes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:OuterMsg.PropertyBytes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PropertyObject) */ {
 public:
  PropertyObject();
  virtual ~PropertyObject();

  PropertyObject(const PropertyObject& from);
  PropertyObject(PropertyObject&& from) noexcept
    : PropertyObject() {
    *this = ::std::move(from);
  }

  inline PropertyObject& operator=(const PropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyObject& operator=(PropertyObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyObject* internal_default_instance() {
    return reinterpret_cast<const PropertyObject*>(
               &_PropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PropertyObject& a, PropertyObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyObject* New() const final {
    return CreateMaybeMessage<PropertyObject>(nullptr);
  }

  PropertyObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyObject& from);
  void MergeFrom(const PropertyObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PropertyObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .OuterMsg.GUID data = 2;
  bool has_data() const;
  void clear_data();
  const ::OuterMsg::GUID& data() const;
  ::OuterMsg::GUID* release_data();
  ::OuterMsg::GUID* mutable_data();
  void set_allocated_data(::OuterMsg::GUID* data);

  // @@protoc_insertion_point(class_scope:OuterMsg.PropertyObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::OuterMsg::GUID* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PropertyList) */ {
 public:
  PropertyList();
  virtual ~PropertyList();

  PropertyList(const PropertyList& from);
  PropertyList(PropertyList&& from) noexcept
    : PropertyList() {
    *this = ::std::move(from);
  }

  inline PropertyList& operator=(const PropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyList& operator=(PropertyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyList* internal_default_instance() {
    return reinterpret_cast<const PropertyList*>(
               &_PropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PropertyList& a, PropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyList* New() const final {
    return CreateMaybeMessage<PropertyList>(nullptr);
  }

  PropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyList& from);
  void MergeFrom(const PropertyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PropertyList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyIntFieldNumber = 1,
    kPropertyFloatFieldNumber = 2,
    kPropertyStringFieldNumber = 3,
    kPropertyObjectFieldNumber = 4,
    kPropertyBytesFieldNumber = 5,
  };
  // repeated .OuterMsg.PropertyInt property_int = 1;
  int property_int_size() const;
  void clear_property_int();
  ::OuterMsg::PropertyInt* mutable_property_int(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >*
      mutable_property_int();
  const ::OuterMsg::PropertyInt& property_int(int index) const;
  ::OuterMsg::PropertyInt* add_property_int();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >&
      property_int() const;

  // repeated .OuterMsg.PropertyFloat property_float = 2;
  int property_float_size() const;
  void clear_property_float();
  ::OuterMsg::PropertyFloat* mutable_property_float(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyFloat >*
      mutable_property_float();
  const ::OuterMsg::PropertyFloat& property_float(int index) const;
  ::OuterMsg::PropertyFloat* add_property_float();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyFloat >&
      property_float() const;

  // repeated .OuterMsg.PropertyString property_string = 3;
  int property_string_size() const;
  void clear_property_string();
  ::OuterMsg::PropertyString* mutable_property_string(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >*
      mutable_property_string();
  const ::OuterMsg::PropertyString& property_string(int index) const;
  ::OuterMsg::PropertyString* add_property_string();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >&
      property_string() const;

  // repeated .OuterMsg.PropertyObject property_object = 4;
  int property_object_size() const;
  void clear_property_object();
  ::OuterMsg::PropertyObject* mutable_property_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyObject >*
      mutable_property_object();
  const ::OuterMsg::PropertyObject& property_object(int index) const;
  ::OuterMsg::PropertyObject* add_property_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyObject >&
      property_object() const;

  // repeated .OuterMsg.PropertyBytes property_bytes = 5;
  int property_bytes_size() const;
  void clear_property_bytes();
  ::OuterMsg::PropertyBytes* mutable_property_bytes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyBytes >*
      mutable_property_bytes();
  const ::OuterMsg::PropertyBytes& property_bytes(int index) const;
  ::OuterMsg::PropertyBytes* add_property_bytes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyBytes >&
      property_bytes() const;

  // @@protoc_insertion_point(class_scope:OuterMsg.PropertyList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt > property_int_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyFloat > property_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString > property_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyObject > property_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyBytes > property_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ObjectPropertyList) */ {
 public:
  ObjectPropertyList();
  virtual ~ObjectPropertyList();

  ObjectPropertyList(const ObjectPropertyList& from);
  ObjectPropertyList(ObjectPropertyList&& from) noexcept
    : ObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyList& operator=(const ObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyList& operator=(ObjectPropertyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectPropertyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyList*>(
               &_ObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObjectPropertyList& a, ObjectPropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyList* New() const final {
    return CreateMaybeMessage<ObjectPropertyList>(nullptr);
  }

  ObjectPropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyList& from);
  void MergeFrom(const ObjectPropertyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ObjectPropertyList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentFieldNumber = 1,
    kPropertyListFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .OuterMsg.GUID ident = 1;
  bool has_ident() const;
  void clear_ident();
  const ::OuterMsg::GUID& ident() const;
  ::OuterMsg::GUID* release_ident();
  ::OuterMsg::GUID* mutable_ident();
  void set_allocated_ident(::OuterMsg::GUID* ident);

  // .OuterMsg.PropertyList property_list = 3;
  bool has_property_list() const;
  void clear_property_list();
  const ::OuterMsg::PropertyList& property_list() const;
  ::OuterMsg::PropertyList* release_property_list();
  ::OuterMsg::PropertyList* mutable_property_list();
  void set_allocated_property_list(::OuterMsg::PropertyList* property_list);

  // .OuterMsg.ObjectType type = 2;
  void clear_type();
  ::OuterMsg::ObjectType type() const;
  void set_type(::OuterMsg::ObjectType value);

  // @@protoc_insertion_point(class_scope:OuterMsg.ObjectPropertyList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* ident_;
  ::OuterMsg::PropertyList* property_list_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RecordInt) */ {
 public:
  RecordInt();
  virtual ~RecordInt();

  RecordInt(const RecordInt& from);
  RecordInt(RecordInt&& from) noexcept
    : RecordInt() {
    *this = ::std::move(from);
  }

  inline RecordInt& operator=(const RecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordInt& operator=(RecordInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordInt* internal_default_instance() {
    return reinterpret_cast<const RecordInt*>(
               &_RecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RecordInt& a, RecordInt& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordInt* New() const final {
    return CreateMaybeMessage<RecordInt>(nullptr);
  }

  RecordInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordInt& from);
  void MergeFrom(const RecordInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RecordInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kColFieldNumber = 1,
  };
  // int64 data = 2;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 col = 1;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RecordInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RecordFloat) */ {
 public:
  RecordFloat();
  virtual ~RecordFloat();

  RecordFloat(const RecordFloat& from);
  RecordFloat(RecordFloat&& from) noexcept
    : RecordFloat() {
    *this = ::std::move(from);
  }

  inline RecordFloat& operator=(const RecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFloat& operator=(RecordFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordFloat* internal_default_instance() {
    return reinterpret_cast<const RecordFloat*>(
               &_RecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecordFloat& a, RecordFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFloat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordFloat* New() const final {
    return CreateMaybeMessage<RecordFloat>(nullptr);
  }

  RecordFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordFloat& from);
  void MergeFrom(const RecordFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RecordFloat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kColFieldNumber = 1,
  };
  // double data = 2;
  void clear_data();
  double data() const;
  void set_data(double value);

  // int32 col = 1;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RecordFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double data_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RecordString) */ {
 public:
  RecordString();
  virtual ~RecordString();

  RecordString(const RecordString& from);
  RecordString(RecordString&& from) noexcept
    : RecordString() {
    *this = ::std::move(from);
  }

  inline RecordString& operator=(const RecordString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordString& operator=(RecordString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordString* internal_default_instance() {
    return reinterpret_cast<const RecordString*>(
               &_RecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecordString& a, RecordString& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordString* New() const final {
    return CreateMaybeMessage<RecordString>(nullptr);
  }

  RecordString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordString& from);
  void MergeFrom(const RecordString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RecordString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kColFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // int32 col = 1;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RecordString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RecordObject) */ {
 public:
  RecordObject();
  virtual ~RecordObject();

  RecordObject(const RecordObject& from);
  RecordObject(RecordObject&& from) noexcept
    : RecordObject() {
    *this = ::std::move(from);
  }

  inline RecordObject& operator=(const RecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordObject& operator=(RecordObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordObject* internal_default_instance() {
    return reinterpret_cast<const RecordObject*>(
               &_RecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecordObject& a, RecordObject& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordObject* New() const final {
    return CreateMaybeMessage<RecordObject>(nullptr);
  }

  RecordObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordObject& from);
  void MergeFrom(const RecordObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RecordObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kColFieldNumber = 1,
  };
  // .OuterMsg.GUID data = 2;
  bool has_data() const;
  void clear_data();
  const ::OuterMsg::GUID& data() const;
  ::OuterMsg::GUID* release_data();
  ::OuterMsg::GUID* mutable_data();
  void set_allocated_data(::OuterMsg::GUID* data);

  // int32 col = 1;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RecordObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordRow :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RecordRow) */ {
 public:
  RecordRow();
  virtual ~RecordRow();

  RecordRow(const RecordRow& from);
  RecordRow(RecordRow&& from) noexcept
    : RecordRow() {
    *this = ::std::move(from);
  }

  inline RecordRow& operator=(const RecordRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRow& operator=(RecordRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordRow* internal_default_instance() {
    return reinterpret_cast<const RecordRow*>(
               &_RecordRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecordRow& a, RecordRow& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordRow* New() const final {
    return CreateMaybeMessage<RecordRow>(nullptr);
  }

  RecordRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordRow& from);
  void MergeFrom(const RecordRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RecordRow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIntFieldNumber = 2,
    kRecordFloatFieldNumber = 3,
    kRecordStringFieldNumber = 4,
    kRecordObjectFieldNumber = 5,
    kRowFieldNumber = 1,
  };
  // repeated .OuterMsg.RecordInt record_int = 2;
  int record_int_size() const;
  void clear_record_int();
  ::OuterMsg::RecordInt* mutable_record_int(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordInt >*
      mutable_record_int();
  const ::OuterMsg::RecordInt& record_int(int index) const;
  ::OuterMsg::RecordInt* add_record_int();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordInt >&
      record_int() const;

  // repeated .OuterMsg.RecordFloat record_float = 3;
  int record_float_size() const;
  void clear_record_float();
  ::OuterMsg::RecordFloat* mutable_record_float(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordFloat >*
      mutable_record_float();
  const ::OuterMsg::RecordFloat& record_float(int index) const;
  ::OuterMsg::RecordFloat* add_record_float();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordFloat >&
      record_float() const;

  // repeated .OuterMsg.RecordString record_string = 4;
  int record_string_size() const;
  void clear_record_string();
  ::OuterMsg::RecordString* mutable_record_string(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordString >*
      mutable_record_string();
  const ::OuterMsg::RecordString& record_string(int index) const;
  ::OuterMsg::RecordString* add_record_string();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordString >&
      record_string() const;

  // repeated .OuterMsg.RecordObject record_object = 5;
  int record_object_size() const;
  void clear_record_object();
  ::OuterMsg::RecordObject* mutable_record_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordObject >*
      mutable_record_object();
  const ::OuterMsg::RecordObject& record_object(int index) const;
  ::OuterMsg::RecordObject* add_record_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordObject >&
      record_object() const;

  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.RecordRow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordInt > record_int_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordFloat > record_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordString > record_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordObject > record_object_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT Record :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.Record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowDataFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .OuterMsg.RecordRow row_data = 2;
  int row_data_size() const;
  void clear_row_data();
  ::OuterMsg::RecordRow* mutable_row_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordRow >*
      mutable_row_data();
  const ::OuterMsg::RecordRow& row_data(int index) const;
  ::OuterMsg::RecordRow* add_row_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordRow >&
      row_data() const;

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:OuterMsg.Record)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordRow > row_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.RecordList) */ {
 public:
  RecordList();
  virtual ~RecordList();

  RecordList(const RecordList& from);
  RecordList(RecordList&& from) noexcept
    : RecordList() {
    *this = ::std::move(from);
  }

  inline RecordList& operator=(const RecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordList& operator=(RecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordList* internal_default_instance() {
    return reinterpret_cast<const RecordList*>(
               &_RecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RecordList& a, RecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordList* New() const final {
    return CreateMaybeMessage<RecordList>(nullptr);
  }

  RecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordList& from);
  void MergeFrom(const RecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.RecordList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // repeated .OuterMsg.Record record = 1;
  int record_size() const;
  void clear_record();
  ::OuterMsg::Record* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::Record >*
      mutable_record();
  const ::OuterMsg::Record& record(int index) const;
  ::OuterMsg::Record* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::Record >&
      record() const;

  // @@protoc_insertion_point(class_scope:OuterMsg.RecordList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::Record > record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ObjectRecordList) */ {
 public:
  ObjectRecordList();
  virtual ~ObjectRecordList();

  ObjectRecordList(const ObjectRecordList& from);
  ObjectRecordList(ObjectRecordList&& from) noexcept
    : ObjectRecordList() {
    *this = ::std::move(from);
  }

  inline ObjectRecordList& operator=(const ObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordList& operator=(ObjectRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordList*>(
               &_ObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ObjectRecordList& a, ObjectRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordList* New() const final {
    return CreateMaybeMessage<ObjectRecordList>(nullptr);
  }

  ObjectRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordList& from);
  void MergeFrom(const ObjectRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ObjectRecordList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentFieldNumber = 1,
    kRecordListFieldNumber = 2,
  };
  // .OuterMsg.GUID ident = 1;
  bool has_ident() const;
  void clear_ident();
  const ::OuterMsg::GUID& ident() const;
  ::OuterMsg::GUID* release_ident();
  ::OuterMsg::GUID* mutable_ident();
  void set_allocated_ident(::OuterMsg::GUID* ident);

  // .OuterMsg.RecordList record_list = 2;
  bool has_record_list() const;
  void clear_record_list();
  const ::OuterMsg::RecordList& record_list() const;
  ::OuterMsg::RecordList* release_record_list();
  ::OuterMsg::RecordList* mutable_record_list();
  void set_allocated_record_list(::OuterMsg::RecordList* record_list);

  // @@protoc_insertion_point(class_scope:OuterMsg.ObjectRecordList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OuterMsg::GUID* ident_;
  ::OuterMsg::RecordList* record_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectDataPack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.ObjectDataPack) */ {
 public:
  ObjectDataPack();
  virtual ~ObjectDataPack();

  ObjectDataPack(const ObjectDataPack& from);
  ObjectDataPack(ObjectDataPack&& from) noexcept
    : ObjectDataPack() {
    *this = ::std::move(from);
  }

  inline ObjectDataPack& operator=(const ObjectDataPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDataPack& operator=(ObjectDataPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectDataPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectDataPack* internal_default_instance() {
    return reinterpret_cast<const ObjectDataPack*>(
               &_ObjectDataPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ObjectDataPack& a, ObjectDataPack& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDataPack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectDataPack* New() const final {
    return CreateMaybeMessage<ObjectDataPack>(nullptr);
  }

  ObjectDataPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDataPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectDataPack& from);
  void MergeFrom(const ObjectDataPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDataPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.ObjectDataPack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 4,
    kIdentFieldNumber = 1,
    kPropertyListFieldNumber = 2,
    kRecordListFieldNumber = 3,
  };
  // repeated .OuterMsg.ObjectDataPack child = 4;
  int child_size() const;
  void clear_child();
  ::OuterMsg::ObjectDataPack* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ObjectDataPack >*
      mutable_child();
  const ::OuterMsg::ObjectDataPack& child(int index) const;
  ::OuterMsg::ObjectDataPack* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ObjectDataPack >&
      child() const;

  // .OuterMsg.GUID ident = 1;
  bool has_ident() const;
  void clear_ident();
  const ::OuterMsg::GUID& ident() const;
  ::OuterMsg::GUID* release_ident();
  ::OuterMsg::GUID* mutable_ident();
  void set_allocated_ident(::OuterMsg::GUID* ident);

  // .OuterMsg.PropertyList property_list = 2;
  bool has_property_list() const;
  void clear_property_list();
  const ::OuterMsg::PropertyList& property_list() const;
  ::OuterMsg::PropertyList* release_property_list();
  ::OuterMsg::PropertyList* mutable_property_list();
  void set_allocated_property_list(::OuterMsg::PropertyList* property_list);

  // .OuterMsg.RecordList record_list = 3;
  bool has_record_list() const;
  void clear_record_list();
  const ::OuterMsg::RecordList& record_list() const;
  ::OuterMsg::RecordList* release_record_list();
  ::OuterMsg::RecordList* mutable_record_list();
  void set_allocated_record_list(::OuterMsg::RecordList* record_list);

  // @@protoc_insertion_point(class_scope:OuterMsg.ObjectDataPack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ObjectDataPack > child_;
  ::OuterMsg::GUID* ident_;
  ::OuterMsg::PropertyList* property_list_;
  ::OuterMsg::RecordList* record_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PBData) */ {
 public:
  PBData();
  virtual ~PBData();

  PBData(const PBData& from);
  PBData(PBData&& from) noexcept
    : PBData() {
    *this = ::std::move(from);
  }

  inline PBData& operator=(const PBData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBData& operator=(PBData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBData* internal_default_instance() {
    return reinterpret_cast<const PBData*>(
               &_PBData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PBData& a, PBData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBData* New() const final {
    return CreateMaybeMessage<PBData>(nullptr);
  }

  PBData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBData& from);
  void MergeFrom(const PBData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PBData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVStringFieldNumber = 4,
    kVGuidFieldNumber = 5,
    kVIntFieldNumber = 2,
    kVFloatFieldNumber = 3,
    kVTypeFieldNumber = 1,
  };
  // bytes v_string = 4;
  void clear_v_string();
  const std::string& v_string() const;
  void set_v_string(const std::string& value);
  void set_v_string(std::string&& value);
  void set_v_string(const char* value);
  void set_v_string(const void* value, size_t size);
  std::string* mutable_v_string();
  std::string* release_v_string();
  void set_allocated_v_string(std::string* v_string);

  // .OuterMsg.GUID v_guid = 5;
  bool has_v_guid() const;
  void clear_v_guid();
  const ::OuterMsg::GUID& v_guid() const;
  ::OuterMsg::GUID* release_v_guid();
  ::OuterMsg::GUID* mutable_v_guid();
  void set_allocated_v_guid(::OuterMsg::GUID* v_guid);

  // int64 v_int = 2;
  void clear_v_int();
  ::PROTOBUF_NAMESPACE_ID::int64 v_int() const;
  void set_v_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double v_float = 3;
  void clear_v_float();
  double v_float() const;
  void set_v_float(double value);

  // int32 v_type = 1;
  void clear_v_type();
  ::PROTOBUF_NAMESPACE_ID::int32 v_type() const;
  void set_v_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.PBData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_string_;
  ::OuterMsg::GUID* v_guid_;
  ::PROTOBUF_NAMESPACE_ID::int64 v_int_;
  double v_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 v_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBDataList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PBDataList) */ {
 public:
  PBDataList();
  virtual ~PBDataList();

  PBDataList(const PBDataList& from);
  PBDataList(PBDataList&& from) noexcept
    : PBDataList() {
    *this = ::std::move(from);
  }

  inline PBDataList& operator=(const PBDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBDataList& operator=(PBDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBDataList* internal_default_instance() {
    return reinterpret_cast<const PBDataList*>(
               &_PBDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PBDataList& a, PBDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(PBDataList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBDataList* New() const final {
    return CreateMaybeMessage<PBDataList>(nullptr);
  }

  PBDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBDataList& from);
  void MergeFrom(const PBDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PBDataList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVDataFieldNumber = 1,
  };
  // repeated .OuterMsg.PBData v_data = 1;
  int v_data_size() const;
  void clear_v_data();
  ::OuterMsg::PBData* mutable_v_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PBData >*
      mutable_v_data();
  const ::OuterMsg::PBData& v_data(int index) const;
  ::OuterMsg::PBData* add_v_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PBData >&
      v_data() const;

  // @@protoc_insertion_point(class_scope:OuterMsg.PBDataList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PBData > v_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PackMysqlParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PackMysqlParam) */ {
 public:
  PackMysqlParam();
  virtual ~PackMysqlParam();

  PackMysqlParam(const PackMysqlParam& from);
  PackMysqlParam(PackMysqlParam&& from) noexcept
    : PackMysqlParam() {
    *this = ::std::move(from);
  }

  inline PackMysqlParam& operator=(const PackMysqlParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackMysqlParam& operator=(PackMysqlParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackMysqlParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackMysqlParam* internal_default_instance() {
    return reinterpret_cast<const PackMysqlParam*>(
               &_PackMysqlParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PackMysqlParam& a, PackMysqlParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PackMysqlParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackMysqlParam* New() const final {
    return CreateMaybeMessage<PackMysqlParam>(nullptr);
  }

  PackMysqlParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackMysqlParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackMysqlParam& from);
  void MergeFrom(const PackMysqlParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackMysqlParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PackMysqlParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldVecListFieldNumber = 3,
    kValueVecListFieldNumber = 4,
    kStrRecordNameFieldNumber = 1,
    kStrKeyFieldNumber = 2,
    kBExitFieldNumber = 5,
    kNreqidFieldNumber = 6,
    kNRetFieldNumber = 7,
    kETypeFieldNumber = 8,
  };
  // repeated bytes fieldVecList = 3;
  int fieldVecList_size() const;
  void clear_fieldVecList();
  const std::string& fieldVecList(int index) const;
  std::string* mutable_fieldVecList(int index);
  void set_fieldVecList(int index, const std::string& value);
  void set_fieldVecList(int index, std::string&& value);
  void set_fieldVecList(int index, const char* value);
  void set_fieldVecList(int index, const void* value, size_t size);
  std::string* add_fieldVecList();
  void add_fieldVecList(const std::string& value);
  void add_fieldVecList(std::string&& value);
  void add_fieldVecList(const char* value);
  void add_fieldVecList(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fieldVecList() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fieldVecList();

  // repeated bytes valueVecList = 4;
  int valueVecList_size() const;
  void clear_valueVecList();
  const std::string& valueVecList(int index) const;
  std::string* mutable_valueVecList(int index);
  void set_valueVecList(int index, const std::string& value);
  void set_valueVecList(int index, std::string&& value);
  void set_valueVecList(int index, const char* value);
  void set_valueVecList(int index, const void* value, size_t size);
  std::string* add_valueVecList();
  void add_valueVecList(const std::string& value);
  void add_valueVecList(std::string&& value);
  void add_valueVecList(const char* value);
  void add_valueVecList(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& valueVecList() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_valueVecList();

  // bytes strRecordName = 1;
  void clear_strRecordName();
  const std::string& strRecordName() const;
  void set_strRecordName(const std::string& value);
  void set_strRecordName(std::string&& value);
  void set_strRecordName(const char* value);
  void set_strRecordName(const void* value, size_t size);
  std::string* mutable_strRecordName();
  std::string* release_strRecordName();
  void set_allocated_strRecordName(std::string* strRecordName);

  // bytes strKey = 2;
  void clear_strKey();
  const std::string& strKey() const;
  void set_strKey(const std::string& value);
  void set_strKey(std::string&& value);
  void set_strKey(const char* value);
  void set_strKey(const void* value, size_t size);
  std::string* mutable_strKey();
  std::string* release_strKey();
  void set_allocated_strKey(std::string* strKey);

  // int64 bExit = 5;
  void clear_bExit();
  ::PROTOBUF_NAMESPACE_ID::int64 bExit() const;
  void set_bExit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 nreqid = 6;
  void clear_nreqid();
  ::PROTOBUF_NAMESPACE_ID::int64 nreqid() const;
  void set_nreqid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 nRet = 7;
  void clear_nRet();
  ::PROTOBUF_NAMESPACE_ID::int64 nRet() const;
  void set_nRet(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 eType = 8;
  void clear_eType();
  ::PROTOBUF_NAMESPACE_ID::int64 eType() const;
  void set_eType(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.PackMysqlParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fieldVecList_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> valueVecList_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strRecordName_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strKey_;
  ::PROTOBUF_NAMESPACE_ID::int64 bExit_;
  ::PROTOBUF_NAMESPACE_ID::int64 nreqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 nRet_;
  ::PROTOBUF_NAMESPACE_ID::int64 eType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PackMysqlServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.PackMysqlServerInfo) */ {
 public:
  PackMysqlServerInfo();
  virtual ~PackMysqlServerInfo();

  PackMysqlServerInfo(const PackMysqlServerInfo& from);
  PackMysqlServerInfo(PackMysqlServerInfo&& from) noexcept
    : PackMysqlServerInfo() {
    *this = ::std::move(from);
  }

  inline PackMysqlServerInfo& operator=(const PackMysqlServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackMysqlServerInfo& operator=(PackMysqlServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackMysqlServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackMysqlServerInfo* internal_default_instance() {
    return reinterpret_cast<const PackMysqlServerInfo*>(
               &_PackMysqlServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PackMysqlServerInfo& a, PackMysqlServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PackMysqlServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackMysqlServerInfo* New() const final {
    return CreateMaybeMessage<PackMysqlServerInfo>(nullptr);
  }

  PackMysqlServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackMysqlServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackMysqlServerInfo& from);
  void MergeFrom(const PackMysqlServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackMysqlServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.PackMysqlServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrDBNameFieldNumber = 4,
    kStrDnsIpFieldNumber = 5,
    kStrDBUserFieldNumber = 6,
    kStrDBPwdFieldNumber = 7,
    kNRconnectTimeFieldNumber = 1,
    kNRconneCountFieldNumber = 2,
    kNPortFieldNumber = 3,
    kNServerIDFieldNumber = 8,
  };
  // bytes strDBName = 4;
  void clear_strDBName();
  const std::string& strDBName() const;
  void set_strDBName(const std::string& value);
  void set_strDBName(std::string&& value);
  void set_strDBName(const char* value);
  void set_strDBName(const void* value, size_t size);
  std::string* mutable_strDBName();
  std::string* release_strDBName();
  void set_allocated_strDBName(std::string* strDBName);

  // bytes strDnsIp = 5;
  void clear_strDnsIp();
  const std::string& strDnsIp() const;
  void set_strDnsIp(const std::string& value);
  void set_strDnsIp(std::string&& value);
  void set_strDnsIp(const char* value);
  void set_strDnsIp(const void* value, size_t size);
  std::string* mutable_strDnsIp();
  std::string* release_strDnsIp();
  void set_allocated_strDnsIp(std::string* strDnsIp);

  // bytes strDBUser = 6;
  void clear_strDBUser();
  const std::string& strDBUser() const;
  void set_strDBUser(const std::string& value);
  void set_strDBUser(std::string&& value);
  void set_strDBUser(const char* value);
  void set_strDBUser(const void* value, size_t size);
  std::string* mutable_strDBUser();
  std::string* release_strDBUser();
  void set_allocated_strDBUser(std::string* strDBUser);

  // bytes strDBPwd = 7;
  void clear_strDBPwd();
  const std::string& strDBPwd() const;
  void set_strDBPwd(const std::string& value);
  void set_strDBPwd(std::string&& value);
  void set_strDBPwd(const char* value);
  void set_strDBPwd(const void* value, size_t size);
  std::string* mutable_strDBPwd();
  std::string* release_strDBPwd();
  void set_allocated_strDBPwd(std::string* strDBPwd);

  // int64 nRconnectTime = 1;
  void clear_nRconnectTime();
  ::PROTOBUF_NAMESPACE_ID::int64 nRconnectTime() const;
  void set_nRconnectTime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 nRconneCount = 2;
  void clear_nRconneCount();
  ::PROTOBUF_NAMESPACE_ID::int64 nRconneCount() const;
  void set_nRconneCount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 nPort = 3;
  void clear_nPort();
  ::PROTOBUF_NAMESPACE_ID::int64 nPort() const;
  void set_nPort(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 nServerID = 8;
  void clear_nServerID();
  ::PROTOBUF_NAMESPACE_ID::int64 nServerID() const;
  void set_nServerID(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:OuterMsg.PackMysqlServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strDBName_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strDnsIp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strDBUser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strDBPwd_;
  ::PROTOBUF_NAMESPACE_ID::int64 nRconnectTime_;
  ::PROTOBUF_NAMESPACE_ID::int64 nRconneCount_;
  ::PROTOBUF_NAMESPACE_ID::int64 nPort_;
  ::PROTOBUF_NAMESPACE_ID::int64 nServerID_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT SqlExecute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterMsg.SqlExecute) */ {
 public:
  SqlExecute();
  virtual ~SqlExecute();

  SqlExecute(const SqlExecute& from);
  SqlExecute(SqlExecute&& from) noexcept
    : SqlExecute() {
    *this = ::std::move(from);
  }

  inline SqlExecute& operator=(const SqlExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline SqlExecute& operator=(SqlExecute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SqlExecute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlExecute* internal_default_instance() {
    return reinterpret_cast<const SqlExecute*>(
               &_SqlExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SqlExecute& a, SqlExecute& b) {
    a.Swap(&b);
  }
  inline void Swap(SqlExecute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SqlExecute* New() const final {
    return CreateMaybeMessage<SqlExecute>(nullptr);
  }

  SqlExecute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SqlExecute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SqlExecute& from);
  void MergeFrom(const SqlExecute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlExecute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterMsg.SqlExecute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OuterBase_2eproto);
    return ::descriptor_table_OuterBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlScriptFieldNumber = 1,
  };
  // bytes SqlScript = 1;
  void clear_SqlScript();
  const std::string& SqlScript() const;
  void set_SqlScript(const std::string& value);
  void set_SqlScript(std::string&& value);
  void set_SqlScript(const char* value);
  void set_SqlScript(const void* value, size_t size);
  std::string* mutable_SqlScript();
  std::string* release_SqlScript();
  void set_allocated_SqlScript(std::string* SqlScript);

  // @@protoc_insertion_point(class_scope:OuterMsg.SqlExecute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr SqlScript_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OuterBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GUID

// int64 data1 = 1;
inline void GUID::clear_data1() {
  data1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GUID::data1() const {
  // @@protoc_insertion_point(field_get:OuterMsg.GUID.data1)
  return data1_;
}
inline void GUID::set_data1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data1_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.GUID.data1)
}

// int64 data2 = 2;
inline void GUID::clear_data2() {
  data2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GUID::data2() const {
  // @@protoc_insertion_point(field_get:OuterMsg.GUID.data2)
  return data2_;
}
inline void GUID::set_data2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data2_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.GUID.data2)
}

// -------------------------------------------------------------------

// PropertyInt

// bytes name = 1;
inline void PropertyInt::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyInt::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyInt.name)
  return name_.GetNoArena();
}
inline void PropertyInt::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyInt.name)
}
inline void PropertyInt::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyInt.name)
}
inline void PropertyInt::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyInt.name)
}
inline void PropertyInt::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyInt.name)
}
inline std::string* PropertyInt::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyInt.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyInt::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyInt.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyInt::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyInt.name)
}

// int64 data = 2;
inline void PropertyInt::clear_data() {
  data_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PropertyInt::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyInt.data)
  return data_;
}
inline void PropertyInt::set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyInt.data)
}

// -------------------------------------------------------------------

// PropertyFloat

// bytes name = 1;
inline void PropertyFloat::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyFloat::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyFloat.name)
  return name_.GetNoArena();
}
inline void PropertyFloat::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyFloat.name)
}
inline void PropertyFloat::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyFloat.name)
}
inline void PropertyFloat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyFloat.name)
}
inline void PropertyFloat::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyFloat.name)
}
inline std::string* PropertyFloat::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyFloat.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyFloat::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyFloat.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyFloat::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyFloat.name)
}

// double data = 2;
inline void PropertyFloat::clear_data() {
  data_ = 0;
}
inline double PropertyFloat::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyFloat.data)
  return data_;
}
inline void PropertyFloat::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyFloat.data)
}

// -------------------------------------------------------------------

// PropertyString

// bytes name = 1;
inline void PropertyString::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyString::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyString.name)
  return name_.GetNoArena();
}
inline void PropertyString::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyString.name)
}
inline void PropertyString::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyString.name)
}
inline void PropertyString::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyString.name)
}
inline void PropertyString::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyString.name)
}
inline std::string* PropertyString::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyString.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyString::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyString.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyString::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyString.name)
}

// bytes data = 2;
inline void PropertyString::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyString::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyString.data)
  return data_.GetNoArena();
}
inline void PropertyString::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyString.data)
}
inline void PropertyString::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyString.data)
}
inline void PropertyString::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyString.data)
}
inline void PropertyString::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyString.data)
}
inline std::string* PropertyString::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyString.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyString::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyString.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyString.data)
}

// -------------------------------------------------------------------

// PropertyBytes

// bytes name = 1;
inline void PropertyBytes::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyBytes::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyBytes.name)
  return name_.GetNoArena();
}
inline void PropertyBytes::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyBytes.name)
}
inline void PropertyBytes::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyBytes.name)
}
inline void PropertyBytes::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyBytes.name)
}
inline void PropertyBytes::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyBytes.name)
}
inline std::string* PropertyBytes::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyBytes.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyBytes::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyBytes.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyBytes::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyBytes.name)
}

// bytes data = 2;
inline void PropertyBytes::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyBytes::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyBytes.data)
  return data_.GetNoArena();
}
inline void PropertyBytes::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyBytes.data)
}
inline void PropertyBytes::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyBytes.data)
}
inline void PropertyBytes::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyBytes.data)
}
inline void PropertyBytes::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyBytes.data)
}
inline std::string* PropertyBytes::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyBytes.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyBytes::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyBytes.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyBytes::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyBytes.data)
}

// -------------------------------------------------------------------

// PropertyObject

// bytes name = 1;
inline void PropertyObject::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PropertyObject::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyObject.name)
  return name_.GetNoArena();
}
inline void PropertyObject::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PropertyObject.name)
}
inline void PropertyObject::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PropertyObject.name)
}
inline void PropertyObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PropertyObject.name)
}
inline void PropertyObject::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PropertyObject.name)
}
inline std::string* PropertyObject::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyObject.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyObject::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyObject.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyObject.name)
}

// .OuterMsg.GUID data = 2;
inline bool PropertyObject::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void PropertyObject::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::OuterMsg::GUID& PropertyObject::data() const {
  const ::OuterMsg::GUID* p = data_;
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyObject.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* PropertyObject::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.PropertyObject.data)
  
  ::OuterMsg::GUID* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* PropertyObject::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyObject.data)
  return data_;
}
inline void PropertyObject::set_allocated_data(::OuterMsg::GUID* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PropertyObject.data)
}

// -------------------------------------------------------------------

// PropertyList

// repeated .OuterMsg.PropertyInt property_int = 1;
inline int PropertyList::property_int_size() const {
  return property_int_.size();
}
inline void PropertyList::clear_property_int() {
  property_int_.Clear();
}
inline ::OuterMsg::PropertyInt* PropertyList::mutable_property_int(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyList.property_int)
  return property_int_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >*
PropertyList::mutable_property_int() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PropertyList.property_int)
  return &property_int_;
}
inline const ::OuterMsg::PropertyInt& PropertyList::property_int(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyList.property_int)
  return property_int_.Get(index);
}
inline ::OuterMsg::PropertyInt* PropertyList::add_property_int() {
  // @@protoc_insertion_point(field_add:OuterMsg.PropertyList.property_int)
  return property_int_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyInt >&
PropertyList::property_int() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PropertyList.property_int)
  return property_int_;
}

// repeated .OuterMsg.PropertyFloat property_float = 2;
inline int PropertyList::property_float_size() const {
  return property_float_.size();
}
inline void PropertyList::clear_property_float() {
  property_float_.Clear();
}
inline ::OuterMsg::PropertyFloat* PropertyList::mutable_property_float(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyList.property_float)
  return property_float_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyFloat >*
PropertyList::mutable_property_float() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PropertyList.property_float)
  return &property_float_;
}
inline const ::OuterMsg::PropertyFloat& PropertyList::property_float(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyList.property_float)
  return property_float_.Get(index);
}
inline ::OuterMsg::PropertyFloat* PropertyList::add_property_float() {
  // @@protoc_insertion_point(field_add:OuterMsg.PropertyList.property_float)
  return property_float_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyFloat >&
PropertyList::property_float() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PropertyList.property_float)
  return property_float_;
}

// repeated .OuterMsg.PropertyString property_string = 3;
inline int PropertyList::property_string_size() const {
  return property_string_.size();
}
inline void PropertyList::clear_property_string() {
  property_string_.Clear();
}
inline ::OuterMsg::PropertyString* PropertyList::mutable_property_string(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyList.property_string)
  return property_string_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >*
PropertyList::mutable_property_string() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PropertyList.property_string)
  return &property_string_;
}
inline const ::OuterMsg::PropertyString& PropertyList::property_string(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyList.property_string)
  return property_string_.Get(index);
}
inline ::OuterMsg::PropertyString* PropertyList::add_property_string() {
  // @@protoc_insertion_point(field_add:OuterMsg.PropertyList.property_string)
  return property_string_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyString >&
PropertyList::property_string() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PropertyList.property_string)
  return property_string_;
}

// repeated .OuterMsg.PropertyObject property_object = 4;
inline int PropertyList::property_object_size() const {
  return property_object_.size();
}
inline void PropertyList::clear_property_object() {
  property_object_.Clear();
}
inline ::OuterMsg::PropertyObject* PropertyList::mutable_property_object(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyList.property_object)
  return property_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyObject >*
PropertyList::mutable_property_object() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PropertyList.property_object)
  return &property_object_;
}
inline const ::OuterMsg::PropertyObject& PropertyList::property_object(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyList.property_object)
  return property_object_.Get(index);
}
inline ::OuterMsg::PropertyObject* PropertyList::add_property_object() {
  // @@protoc_insertion_point(field_add:OuterMsg.PropertyList.property_object)
  return property_object_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyObject >&
PropertyList::property_object() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PropertyList.property_object)
  return property_object_;
}

// repeated .OuterMsg.PropertyBytes property_bytes = 5;
inline int PropertyList::property_bytes_size() const {
  return property_bytes_.size();
}
inline void PropertyList::clear_property_bytes() {
  property_bytes_.Clear();
}
inline ::OuterMsg::PropertyBytes* PropertyList::mutable_property_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PropertyList.property_bytes)
  return property_bytes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyBytes >*
PropertyList::mutable_property_bytes() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PropertyList.property_bytes)
  return &property_bytes_;
}
inline const ::OuterMsg::PropertyBytes& PropertyList::property_bytes(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PropertyList.property_bytes)
  return property_bytes_.Get(index);
}
inline ::OuterMsg::PropertyBytes* PropertyList::add_property_bytes() {
  // @@protoc_insertion_point(field_add:OuterMsg.PropertyList.property_bytes)
  return property_bytes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PropertyBytes >&
PropertyList::property_bytes() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PropertyList.property_bytes)
  return property_bytes_;
}

// -------------------------------------------------------------------

// ObjectPropertyList

// .OuterMsg.GUID ident = 1;
inline bool ObjectPropertyList::has_ident() const {
  return this != internal_default_instance() && ident_ != nullptr;
}
inline void ObjectPropertyList::clear_ident() {
  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
}
inline const ::OuterMsg::GUID& ObjectPropertyList::ident() const {
  const ::OuterMsg::GUID* p = ident_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectPropertyList.ident)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ObjectPropertyList::release_ident() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectPropertyList.ident)
  
  ::OuterMsg::GUID* temp = ident_;
  ident_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ObjectPropertyList::mutable_ident() {
  
  if (ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectPropertyList.ident)
  return ident_;
}
inline void ObjectPropertyList::set_allocated_ident(::OuterMsg::GUID* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ident_;
  }
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    
  } else {
    
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectPropertyList.ident)
}

// .OuterMsg.ObjectType type = 2;
inline void ObjectPropertyList::clear_type() {
  type_ = 0;
}
inline ::OuterMsg::ObjectType ObjectPropertyList::type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectPropertyList.type)
  return static_cast< ::OuterMsg::ObjectType >(type_);
}
inline void ObjectPropertyList::set_type(::OuterMsg::ObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.ObjectPropertyList.type)
}

// .OuterMsg.PropertyList property_list = 3;
inline bool ObjectPropertyList::has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline void ObjectPropertyList::clear_property_list() {
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
inline const ::OuterMsg::PropertyList& ObjectPropertyList::property_list() const {
  const ::OuterMsg::PropertyList* p = property_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectPropertyList.property_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PropertyList*>(
      &::OuterMsg::_PropertyList_default_instance_);
}
inline ::OuterMsg::PropertyList* ObjectPropertyList::release_property_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectPropertyList.property_list)
  
  ::OuterMsg::PropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PropertyList* ObjectPropertyList::mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PropertyList>(GetArenaNoVirtual());
    property_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectPropertyList.property_list)
  return property_list_;
}
inline void ObjectPropertyList::set_allocated_property_list(::OuterMsg::PropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete property_list_;
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectPropertyList.property_list)
}

// -------------------------------------------------------------------

// RecordInt

// int32 col = 1;
inline void RecordInt::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordInt::col() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordInt.col)
  return col_;
}
inline void RecordInt::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordInt.col)
}

// int64 data = 2;
inline void RecordInt::clear_data() {
  data_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecordInt::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordInt.data)
  return data_;
}
inline void RecordInt::set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordInt.data)
}

// -------------------------------------------------------------------

// RecordFloat

// int32 col = 1;
inline void RecordFloat::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordFloat::col() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordFloat.col)
  return col_;
}
inline void RecordFloat::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordFloat.col)
}

// double data = 2;
inline void RecordFloat::clear_data() {
  data_ = 0;
}
inline double RecordFloat::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordFloat.data)
  return data_;
}
inline void RecordFloat::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordFloat.data)
}

// -------------------------------------------------------------------

// RecordString

// int32 col = 1;
inline void RecordString::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordString::col() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordString.col)
  return col_;
}
inline void RecordString::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordString.col)
}

// bytes data = 2;
inline void RecordString::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecordString::data() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordString.data)
  return data_.GetNoArena();
}
inline void RecordString::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.RecordString.data)
}
inline void RecordString::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.RecordString.data)
}
inline void RecordString::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.RecordString.data)
}
inline void RecordString::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.RecordString.data)
}
inline std::string* RecordString::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordString.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecordString::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RecordString.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecordString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RecordString.data)
}

// -------------------------------------------------------------------

// RecordObject

// int32 col = 1;
inline void RecordObject::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordObject::col() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordObject.col)
  return col_;
}
inline void RecordObject::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordObject.col)
}

// .OuterMsg.GUID data = 2;
inline bool RecordObject::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void RecordObject::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::OuterMsg::GUID& RecordObject::data() const {
  const ::OuterMsg::GUID* p = data_;
  // @@protoc_insertion_point(field_get:OuterMsg.RecordObject.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* RecordObject::release_data() {
  // @@protoc_insertion_point(field_release:OuterMsg.RecordObject.data)
  
  ::OuterMsg::GUID* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* RecordObject::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordObject.data)
  return data_;
}
inline void RecordObject::set_allocated_data(::OuterMsg::GUID* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.RecordObject.data)
}

// -------------------------------------------------------------------

// RecordRow

// int32 row = 1;
inline void RecordRow::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordRow::row() const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordRow.row)
  return row_;
}
inline void RecordRow::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.RecordRow.row)
}

// repeated .OuterMsg.RecordInt record_int = 2;
inline int RecordRow::record_int_size() const {
  return record_int_.size();
}
inline void RecordRow::clear_record_int() {
  record_int_.Clear();
}
inline ::OuterMsg::RecordInt* RecordRow::mutable_record_int(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordRow.record_int)
  return record_int_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordInt >*
RecordRow::mutable_record_int() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RecordRow.record_int)
  return &record_int_;
}
inline const ::OuterMsg::RecordInt& RecordRow::record_int(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordRow.record_int)
  return record_int_.Get(index);
}
inline ::OuterMsg::RecordInt* RecordRow::add_record_int() {
  // @@protoc_insertion_point(field_add:OuterMsg.RecordRow.record_int)
  return record_int_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordInt >&
RecordRow::record_int() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RecordRow.record_int)
  return record_int_;
}

// repeated .OuterMsg.RecordFloat record_float = 3;
inline int RecordRow::record_float_size() const {
  return record_float_.size();
}
inline void RecordRow::clear_record_float() {
  record_float_.Clear();
}
inline ::OuterMsg::RecordFloat* RecordRow::mutable_record_float(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordRow.record_float)
  return record_float_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordFloat >*
RecordRow::mutable_record_float() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RecordRow.record_float)
  return &record_float_;
}
inline const ::OuterMsg::RecordFloat& RecordRow::record_float(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordRow.record_float)
  return record_float_.Get(index);
}
inline ::OuterMsg::RecordFloat* RecordRow::add_record_float() {
  // @@protoc_insertion_point(field_add:OuterMsg.RecordRow.record_float)
  return record_float_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordFloat >&
RecordRow::record_float() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RecordRow.record_float)
  return record_float_;
}

// repeated .OuterMsg.RecordString record_string = 4;
inline int RecordRow::record_string_size() const {
  return record_string_.size();
}
inline void RecordRow::clear_record_string() {
  record_string_.Clear();
}
inline ::OuterMsg::RecordString* RecordRow::mutable_record_string(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordRow.record_string)
  return record_string_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordString >*
RecordRow::mutable_record_string() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RecordRow.record_string)
  return &record_string_;
}
inline const ::OuterMsg::RecordString& RecordRow::record_string(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordRow.record_string)
  return record_string_.Get(index);
}
inline ::OuterMsg::RecordString* RecordRow::add_record_string() {
  // @@protoc_insertion_point(field_add:OuterMsg.RecordRow.record_string)
  return record_string_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordString >&
RecordRow::record_string() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RecordRow.record_string)
  return record_string_;
}

// repeated .OuterMsg.RecordObject record_object = 5;
inline int RecordRow::record_object_size() const {
  return record_object_.size();
}
inline void RecordRow::clear_record_object() {
  record_object_.Clear();
}
inline ::OuterMsg::RecordObject* RecordRow::mutable_record_object(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordRow.record_object)
  return record_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordObject >*
RecordRow::mutable_record_object() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RecordRow.record_object)
  return &record_object_;
}
inline const ::OuterMsg::RecordObject& RecordRow::record_object(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordRow.record_object)
  return record_object_.Get(index);
}
inline ::OuterMsg::RecordObject* RecordRow::add_record_object() {
  // @@protoc_insertion_point(field_add:OuterMsg.RecordRow.record_object)
  return record_object_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordObject >&
RecordRow::record_object() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RecordRow.record_object)
  return record_object_;
}

// -------------------------------------------------------------------

// Record

// bytes name = 1;
inline void Record::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Record::name() const {
  // @@protoc_insertion_point(field_get:OuterMsg.Record.name)
  return name_.GetNoArena();
}
inline void Record::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.Record.name)
}
inline void Record::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.Record.name)
}
inline void Record::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.Record.name)
}
inline void Record::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.Record.name)
}
inline std::string* Record::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.Record.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_name() {
  // @@protoc_insertion_point(field_release:OuterMsg.Record.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.Record.name)
}

// repeated .OuterMsg.RecordRow row_data = 2;
inline int Record::row_data_size() const {
  return row_data_.size();
}
inline void Record::clear_row_data() {
  row_data_.Clear();
}
inline ::OuterMsg::RecordRow* Record::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.Record.row_data)
  return row_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordRow >*
Record::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.Record.row_data)
  return &row_data_;
}
inline const ::OuterMsg::RecordRow& Record::row_data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.Record.row_data)
  return row_data_.Get(index);
}
inline ::OuterMsg::RecordRow* Record::add_row_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.Record.row_data)
  return row_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::RecordRow >&
Record::row_data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.Record.row_data)
  return row_data_;
}

// -------------------------------------------------------------------

// RecordList

// repeated .OuterMsg.Record record = 1;
inline int RecordList::record_size() const {
  return record_.size();
}
inline void RecordList::clear_record() {
  record_.Clear();
}
inline ::OuterMsg::Record* RecordList::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.RecordList.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::Record >*
RecordList::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.RecordList.record)
  return &record_;
}
inline const ::OuterMsg::Record& RecordList::record(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.RecordList.record)
  return record_.Get(index);
}
inline ::OuterMsg::Record* RecordList::add_record() {
  // @@protoc_insertion_point(field_add:OuterMsg.RecordList.record)
  return record_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::Record >&
RecordList::record() const {
  // @@protoc_insertion_point(field_list:OuterMsg.RecordList.record)
  return record_;
}

// -------------------------------------------------------------------

// ObjectRecordList

// .OuterMsg.GUID ident = 1;
inline bool ObjectRecordList::has_ident() const {
  return this != internal_default_instance() && ident_ != nullptr;
}
inline void ObjectRecordList::clear_ident() {
  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
}
inline const ::OuterMsg::GUID& ObjectRecordList::ident() const {
  const ::OuterMsg::GUID* p = ident_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectRecordList.ident)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ObjectRecordList::release_ident() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectRecordList.ident)
  
  ::OuterMsg::GUID* temp = ident_;
  ident_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ObjectRecordList::mutable_ident() {
  
  if (ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectRecordList.ident)
  return ident_;
}
inline void ObjectRecordList::set_allocated_ident(::OuterMsg::GUID* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ident_;
  }
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    
  } else {
    
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectRecordList.ident)
}

// .OuterMsg.RecordList record_list = 2;
inline bool ObjectRecordList::has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline void ObjectRecordList::clear_record_list() {
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
inline const ::OuterMsg::RecordList& ObjectRecordList::record_list() const {
  const ::OuterMsg::RecordList* p = record_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectRecordList.record_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RecordList*>(
      &::OuterMsg::_RecordList_default_instance_);
}
inline ::OuterMsg::RecordList* ObjectRecordList::release_record_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectRecordList.record_list)
  
  ::OuterMsg::RecordList* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::RecordList* ObjectRecordList::mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RecordList>(GetArenaNoVirtual());
    record_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectRecordList.record_list)
  return record_list_;
}
inline void ObjectRecordList::set_allocated_record_list(::OuterMsg::RecordList* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete record_list_;
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectRecordList.record_list)
}

// -------------------------------------------------------------------

// ObjectDataPack

// .OuterMsg.GUID ident = 1;
inline bool ObjectDataPack::has_ident() const {
  return this != internal_default_instance() && ident_ != nullptr;
}
inline void ObjectDataPack::clear_ident() {
  if (GetArenaNoVirtual() == nullptr && ident_ != nullptr) {
    delete ident_;
  }
  ident_ = nullptr;
}
inline const ::OuterMsg::GUID& ObjectDataPack::ident() const {
  const ::OuterMsg::GUID* p = ident_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectDataPack.ident)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* ObjectDataPack::release_ident() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectDataPack.ident)
  
  ::OuterMsg::GUID* temp = ident_;
  ident_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* ObjectDataPack::mutable_ident() {
  
  if (ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectDataPack.ident)
  return ident_;
}
inline void ObjectDataPack::set_allocated_ident(::OuterMsg::GUID* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ident_;
  }
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    
  } else {
    
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectDataPack.ident)
}

// .OuterMsg.PropertyList property_list = 2;
inline bool ObjectDataPack::has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline void ObjectDataPack::clear_property_list() {
  if (GetArenaNoVirtual() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
inline const ::OuterMsg::PropertyList& ObjectDataPack::property_list() const {
  const ::OuterMsg::PropertyList* p = property_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectDataPack.property_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::PropertyList*>(
      &::OuterMsg::_PropertyList_default_instance_);
}
inline ::OuterMsg::PropertyList* ObjectDataPack::release_property_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectDataPack.property_list)
  
  ::OuterMsg::PropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::PropertyList* ObjectDataPack::mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::PropertyList>(GetArenaNoVirtual());
    property_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectDataPack.property_list)
  return property_list_;
}
inline void ObjectDataPack::set_allocated_property_list(::OuterMsg::PropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete property_list_;
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectDataPack.property_list)
}

// .OuterMsg.RecordList record_list = 3;
inline bool ObjectDataPack::has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline void ObjectDataPack::clear_record_list() {
  if (GetArenaNoVirtual() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
inline const ::OuterMsg::RecordList& ObjectDataPack::record_list() const {
  const ::OuterMsg::RecordList* p = record_list_;
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectDataPack.record_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::RecordList*>(
      &::OuterMsg::_RecordList_default_instance_);
}
inline ::OuterMsg::RecordList* ObjectDataPack::release_record_list() {
  // @@protoc_insertion_point(field_release:OuterMsg.ObjectDataPack.record_list)
  
  ::OuterMsg::RecordList* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::OuterMsg::RecordList* ObjectDataPack::mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::RecordList>(GetArenaNoVirtual());
    record_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectDataPack.record_list)
  return record_list_;
}
inline void ObjectDataPack::set_allocated_record_list(::OuterMsg::RecordList* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete record_list_;
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.ObjectDataPack.record_list)
}

// repeated .OuterMsg.ObjectDataPack child = 4;
inline int ObjectDataPack::child_size() const {
  return child_.size();
}
inline void ObjectDataPack::clear_child() {
  child_.Clear();
}
inline ::OuterMsg::ObjectDataPack* ObjectDataPack::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.ObjectDataPack.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ObjectDataPack >*
ObjectDataPack::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.ObjectDataPack.child)
  return &child_;
}
inline const ::OuterMsg::ObjectDataPack& ObjectDataPack::child(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.ObjectDataPack.child)
  return child_.Get(index);
}
inline ::OuterMsg::ObjectDataPack* ObjectDataPack::add_child() {
  // @@protoc_insertion_point(field_add:OuterMsg.ObjectDataPack.child)
  return child_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::ObjectDataPack >&
ObjectDataPack::child() const {
  // @@protoc_insertion_point(field_list:OuterMsg.ObjectDataPack.child)
  return child_;
}

// -------------------------------------------------------------------

// PBData

// int32 v_type = 1;
inline void PBData::clear_v_type() {
  v_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBData::v_type() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PBData.v_type)
  return v_type_;
}
inline void PBData::set_v_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v_type_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PBData.v_type)
}

// int64 v_int = 2;
inline void PBData::clear_v_int() {
  v_int_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PBData::v_int() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PBData.v_int)
  return v_int_;
}
inline void PBData::set_v_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  v_int_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PBData.v_int)
}

// double v_float = 3;
inline void PBData::clear_v_float() {
  v_float_ = 0;
}
inline double PBData::v_float() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PBData.v_float)
  return v_float_;
}
inline void PBData::set_v_float(double value) {
  
  v_float_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PBData.v_float)
}

// bytes v_string = 4;
inline void PBData::clear_v_string() {
  v_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PBData::v_string() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PBData.v_string)
  return v_string_.GetNoArena();
}
inline void PBData::set_v_string(const std::string& value) {
  
  v_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PBData.v_string)
}
inline void PBData::set_v_string(std::string&& value) {
  
  v_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PBData.v_string)
}
inline void PBData::set_v_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PBData.v_string)
}
inline void PBData::set_v_string(const void* value, size_t size) {
  
  v_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PBData.v_string)
}
inline std::string* PBData::mutable_v_string() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PBData.v_string)
  return v_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PBData::release_v_string() {
  // @@protoc_insertion_point(field_release:OuterMsg.PBData.v_string)
  
  return v_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PBData::set_allocated_v_string(std::string* v_string) {
  if (v_string != nullptr) {
    
  } else {
    
  }
  v_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_string);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PBData.v_string)
}

// .OuterMsg.GUID v_guid = 5;
inline bool PBData::has_v_guid() const {
  return this != internal_default_instance() && v_guid_ != nullptr;
}
inline void PBData::clear_v_guid() {
  if (GetArenaNoVirtual() == nullptr && v_guid_ != nullptr) {
    delete v_guid_;
  }
  v_guid_ = nullptr;
}
inline const ::OuterMsg::GUID& PBData::v_guid() const {
  const ::OuterMsg::GUID* p = v_guid_;
  // @@protoc_insertion_point(field_get:OuterMsg.PBData.v_guid)
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterMsg::GUID*>(
      &::OuterMsg::_GUID_default_instance_);
}
inline ::OuterMsg::GUID* PBData::release_v_guid() {
  // @@protoc_insertion_point(field_release:OuterMsg.PBData.v_guid)
  
  ::OuterMsg::GUID* temp = v_guid_;
  v_guid_ = nullptr;
  return temp;
}
inline ::OuterMsg::GUID* PBData::mutable_v_guid() {
  
  if (v_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterMsg::GUID>(GetArenaNoVirtual());
    v_guid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OuterMsg.PBData.v_guid)
  return v_guid_;
}
inline void PBData::set_allocated_v_guid(::OuterMsg::GUID* v_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete v_guid_;
  }
  if (v_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      v_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v_guid, submessage_arena);
    }
    
  } else {
    
  }
  v_guid_ = v_guid;
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PBData.v_guid)
}

// -------------------------------------------------------------------

// PBDataList

// repeated .OuterMsg.PBData v_data = 1;
inline int PBDataList::v_data_size() const {
  return v_data_.size();
}
inline void PBDataList::clear_v_data() {
  v_data_.Clear();
}
inline ::OuterMsg::PBData* PBDataList::mutable_v_data(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PBDataList.v_data)
  return v_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PBData >*
PBDataList::mutable_v_data() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PBDataList.v_data)
  return &v_data_;
}
inline const ::OuterMsg::PBData& PBDataList::v_data(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PBDataList.v_data)
  return v_data_.Get(index);
}
inline ::OuterMsg::PBData* PBDataList::add_v_data() {
  // @@protoc_insertion_point(field_add:OuterMsg.PBDataList.v_data)
  return v_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OuterMsg::PBData >&
PBDataList::v_data() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PBDataList.v_data)
  return v_data_;
}

// -------------------------------------------------------------------

// PackMysqlParam

// bytes strRecordName = 1;
inline void PackMysqlParam::clear_strRecordName() {
  strRecordName_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PackMysqlParam::strRecordName() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.strRecordName)
  return strRecordName_.GetNoArena();
}
inline void PackMysqlParam::set_strRecordName(const std::string& value) {
  
  strRecordName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.strRecordName)
}
inline void PackMysqlParam::set_strRecordName(std::string&& value) {
  
  strRecordName_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PackMysqlParam.strRecordName)
}
inline void PackMysqlParam::set_strRecordName(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strRecordName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlParam.strRecordName)
}
inline void PackMysqlParam::set_strRecordName(const void* value, size_t size) {
  
  strRecordName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlParam.strRecordName)
}
inline std::string* PackMysqlParam::mutable_strRecordName() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlParam.strRecordName)
  return strRecordName_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackMysqlParam::release_strRecordName() {
  // @@protoc_insertion_point(field_release:OuterMsg.PackMysqlParam.strRecordName)
  
  return strRecordName_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlParam::set_allocated_strRecordName(std::string* strRecordName) {
  if (strRecordName != nullptr) {
    
  } else {
    
  }
  strRecordName_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strRecordName);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PackMysqlParam.strRecordName)
}

// bytes strKey = 2;
inline void PackMysqlParam::clear_strKey() {
  strKey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PackMysqlParam::strKey() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.strKey)
  return strKey_.GetNoArena();
}
inline void PackMysqlParam::set_strKey(const std::string& value) {
  
  strKey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.strKey)
}
inline void PackMysqlParam::set_strKey(std::string&& value) {
  
  strKey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PackMysqlParam.strKey)
}
inline void PackMysqlParam::set_strKey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strKey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlParam.strKey)
}
inline void PackMysqlParam::set_strKey(const void* value, size_t size) {
  
  strKey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlParam.strKey)
}
inline std::string* PackMysqlParam::mutable_strKey() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlParam.strKey)
  return strKey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackMysqlParam::release_strKey() {
  // @@protoc_insertion_point(field_release:OuterMsg.PackMysqlParam.strKey)
  
  return strKey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlParam::set_allocated_strKey(std::string* strKey) {
  if (strKey != nullptr) {
    
  } else {
    
  }
  strKey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strKey);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PackMysqlParam.strKey)
}

// repeated bytes fieldVecList = 3;
inline int PackMysqlParam::fieldVecList_size() const {
  return fieldVecList_.size();
}
inline void PackMysqlParam::clear_fieldVecList() {
  fieldVecList_.Clear();
}
inline const std::string& PackMysqlParam::fieldVecList(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.fieldVecList)
  return fieldVecList_.Get(index);
}
inline std::string* PackMysqlParam::mutable_fieldVecList(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlParam.fieldVecList)
  return fieldVecList_.Mutable(index);
}
inline void PackMysqlParam::set_fieldVecList(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.fieldVecList)
  fieldVecList_.Mutable(index)->assign(value);
}
inline void PackMysqlParam::set_fieldVecList(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.fieldVecList)
  fieldVecList_.Mutable(index)->assign(std::move(value));
}
inline void PackMysqlParam::set_fieldVecList(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fieldVecList_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlParam.fieldVecList)
}
inline void PackMysqlParam::set_fieldVecList(int index, const void* value, size_t size) {
  fieldVecList_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlParam.fieldVecList)
}
inline std::string* PackMysqlParam::add_fieldVecList() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.PackMysqlParam.fieldVecList)
  return fieldVecList_.Add();
}
inline void PackMysqlParam::add_fieldVecList(const std::string& value) {
  fieldVecList_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.PackMysqlParam.fieldVecList)
}
inline void PackMysqlParam::add_fieldVecList(std::string&& value) {
  fieldVecList_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.PackMysqlParam.fieldVecList)
}
inline void PackMysqlParam::add_fieldVecList(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fieldVecList_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.PackMysqlParam.fieldVecList)
}
inline void PackMysqlParam::add_fieldVecList(const void* value, size_t size) {
  fieldVecList_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.PackMysqlParam.fieldVecList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PackMysqlParam::fieldVecList() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PackMysqlParam.fieldVecList)
  return fieldVecList_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PackMysqlParam::mutable_fieldVecList() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PackMysqlParam.fieldVecList)
  return &fieldVecList_;
}

// repeated bytes valueVecList = 4;
inline int PackMysqlParam::valueVecList_size() const {
  return valueVecList_.size();
}
inline void PackMysqlParam::clear_valueVecList() {
  valueVecList_.Clear();
}
inline const std::string& PackMysqlParam::valueVecList(int index) const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.valueVecList)
  return valueVecList_.Get(index);
}
inline std::string* PackMysqlParam::mutable_valueVecList(int index) {
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlParam.valueVecList)
  return valueVecList_.Mutable(index);
}
inline void PackMysqlParam::set_valueVecList(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.valueVecList)
  valueVecList_.Mutable(index)->assign(value);
}
inline void PackMysqlParam::set_valueVecList(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.valueVecList)
  valueVecList_.Mutable(index)->assign(std::move(value));
}
inline void PackMysqlParam::set_valueVecList(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valueVecList_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlParam.valueVecList)
}
inline void PackMysqlParam::set_valueVecList(int index, const void* value, size_t size) {
  valueVecList_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlParam.valueVecList)
}
inline std::string* PackMysqlParam::add_valueVecList() {
  // @@protoc_insertion_point(field_add_mutable:OuterMsg.PackMysqlParam.valueVecList)
  return valueVecList_.Add();
}
inline void PackMysqlParam::add_valueVecList(const std::string& value) {
  valueVecList_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterMsg.PackMysqlParam.valueVecList)
}
inline void PackMysqlParam::add_valueVecList(std::string&& value) {
  valueVecList_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterMsg.PackMysqlParam.valueVecList)
}
inline void PackMysqlParam::add_valueVecList(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valueVecList_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterMsg.PackMysqlParam.valueVecList)
}
inline void PackMysqlParam::add_valueVecList(const void* value, size_t size) {
  valueVecList_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterMsg.PackMysqlParam.valueVecList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PackMysqlParam::valueVecList() const {
  // @@protoc_insertion_point(field_list:OuterMsg.PackMysqlParam.valueVecList)
  return valueVecList_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PackMysqlParam::mutable_valueVecList() {
  // @@protoc_insertion_point(field_mutable_list:OuterMsg.PackMysqlParam.valueVecList)
  return &valueVecList_;
}

// int64 bExit = 5;
inline void PackMysqlParam::clear_bExit() {
  bExit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlParam::bExit() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.bExit)
  return bExit_;
}
inline void PackMysqlParam::set_bExit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bExit_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.bExit)
}

// int64 nreqid = 6;
inline void PackMysqlParam::clear_nreqid() {
  nreqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlParam::nreqid() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.nreqid)
  return nreqid_;
}
inline void PackMysqlParam::set_nreqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nreqid_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.nreqid)
}

// int64 nRet = 7;
inline void PackMysqlParam::clear_nRet() {
  nRet_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlParam::nRet() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.nRet)
  return nRet_;
}
inline void PackMysqlParam::set_nRet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nRet_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.nRet)
}

// int64 eType = 8;
inline void PackMysqlParam::clear_eType() {
  eType_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlParam::eType() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlParam.eType)
  return eType_;
}
inline void PackMysqlParam::set_eType(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  eType_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlParam.eType)
}

// -------------------------------------------------------------------

// PackMysqlServerInfo

// int64 nRconnectTime = 1;
inline void PackMysqlServerInfo::clear_nRconnectTime() {
  nRconnectTime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlServerInfo::nRconnectTime() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.nRconnectTime)
  return nRconnectTime_;
}
inline void PackMysqlServerInfo::set_nRconnectTime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nRconnectTime_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.nRconnectTime)
}

// int64 nRconneCount = 2;
inline void PackMysqlServerInfo::clear_nRconneCount() {
  nRconneCount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlServerInfo::nRconneCount() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.nRconneCount)
  return nRconneCount_;
}
inline void PackMysqlServerInfo::set_nRconneCount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nRconneCount_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.nRconneCount)
}

// int64 nPort = 3;
inline void PackMysqlServerInfo::clear_nPort() {
  nPort_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlServerInfo::nPort() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.nPort)
  return nPort_;
}
inline void PackMysqlServerInfo::set_nPort(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nPort_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.nPort)
}

// bytes strDBName = 4;
inline void PackMysqlServerInfo::clear_strDBName() {
  strDBName_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PackMysqlServerInfo::strDBName() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.strDBName)
  return strDBName_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strDBName(const std::string& value) {
  
  strDBName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.strDBName)
}
inline void PackMysqlServerInfo::set_strDBName(std::string&& value) {
  
  strDBName_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PackMysqlServerInfo.strDBName)
}
inline void PackMysqlServerInfo::set_strDBName(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strDBName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlServerInfo.strDBName)
}
inline void PackMysqlServerInfo::set_strDBName(const void* value, size_t size) {
  
  strDBName_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlServerInfo.strDBName)
}
inline std::string* PackMysqlServerInfo::mutable_strDBName() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlServerInfo.strDBName)
  return strDBName_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackMysqlServerInfo::release_strDBName() {
  // @@protoc_insertion_point(field_release:OuterMsg.PackMysqlServerInfo.strDBName)
  
  return strDBName_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strDBName(std::string* strDBName) {
  if (strDBName != nullptr) {
    
  } else {
    
  }
  strDBName_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strDBName);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PackMysqlServerInfo.strDBName)
}

// bytes strDnsIp = 5;
inline void PackMysqlServerInfo::clear_strDnsIp() {
  strDnsIp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PackMysqlServerInfo::strDnsIp() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.strDnsIp)
  return strDnsIp_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strDnsIp(const std::string& value) {
  
  strDnsIp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.strDnsIp)
}
inline void PackMysqlServerInfo::set_strDnsIp(std::string&& value) {
  
  strDnsIp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PackMysqlServerInfo.strDnsIp)
}
inline void PackMysqlServerInfo::set_strDnsIp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strDnsIp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlServerInfo.strDnsIp)
}
inline void PackMysqlServerInfo::set_strDnsIp(const void* value, size_t size) {
  
  strDnsIp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlServerInfo.strDnsIp)
}
inline std::string* PackMysqlServerInfo::mutable_strDnsIp() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlServerInfo.strDnsIp)
  return strDnsIp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackMysqlServerInfo::release_strDnsIp() {
  // @@protoc_insertion_point(field_release:OuterMsg.PackMysqlServerInfo.strDnsIp)
  
  return strDnsIp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strDnsIp(std::string* strDnsIp) {
  if (strDnsIp != nullptr) {
    
  } else {
    
  }
  strDnsIp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strDnsIp);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PackMysqlServerInfo.strDnsIp)
}

// bytes strDBUser = 6;
inline void PackMysqlServerInfo::clear_strDBUser() {
  strDBUser_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PackMysqlServerInfo::strDBUser() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.strDBUser)
  return strDBUser_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strDBUser(const std::string& value) {
  
  strDBUser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.strDBUser)
}
inline void PackMysqlServerInfo::set_strDBUser(std::string&& value) {
  
  strDBUser_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PackMysqlServerInfo.strDBUser)
}
inline void PackMysqlServerInfo::set_strDBUser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strDBUser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlServerInfo.strDBUser)
}
inline void PackMysqlServerInfo::set_strDBUser(const void* value, size_t size) {
  
  strDBUser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlServerInfo.strDBUser)
}
inline std::string* PackMysqlServerInfo::mutable_strDBUser() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlServerInfo.strDBUser)
  return strDBUser_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackMysqlServerInfo::release_strDBUser() {
  // @@protoc_insertion_point(field_release:OuterMsg.PackMysqlServerInfo.strDBUser)
  
  return strDBUser_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strDBUser(std::string* strDBUser) {
  if (strDBUser != nullptr) {
    
  } else {
    
  }
  strDBUser_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strDBUser);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PackMysqlServerInfo.strDBUser)
}

// bytes strDBPwd = 7;
inline void PackMysqlServerInfo::clear_strDBPwd() {
  strDBPwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PackMysqlServerInfo::strDBPwd() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.strDBPwd)
  return strDBPwd_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strDBPwd(const std::string& value) {
  
  strDBPwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.strDBPwd)
}
inline void PackMysqlServerInfo::set_strDBPwd(std::string&& value) {
  
  strDBPwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.PackMysqlServerInfo.strDBPwd)
}
inline void PackMysqlServerInfo::set_strDBPwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strDBPwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.PackMysqlServerInfo.strDBPwd)
}
inline void PackMysqlServerInfo::set_strDBPwd(const void* value, size_t size) {
  
  strDBPwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.PackMysqlServerInfo.strDBPwd)
}
inline std::string* PackMysqlServerInfo::mutable_strDBPwd() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.PackMysqlServerInfo.strDBPwd)
  return strDBPwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackMysqlServerInfo::release_strDBPwd() {
  // @@protoc_insertion_point(field_release:OuterMsg.PackMysqlServerInfo.strDBPwd)
  
  return strDBPwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strDBPwd(std::string* strDBPwd) {
  if (strDBPwd != nullptr) {
    
  } else {
    
  }
  strDBPwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strDBPwd);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.PackMysqlServerInfo.strDBPwd)
}

// int64 nServerID = 8;
inline void PackMysqlServerInfo::clear_nServerID() {
  nServerID_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackMysqlServerInfo::nServerID() const {
  // @@protoc_insertion_point(field_get:OuterMsg.PackMysqlServerInfo.nServerID)
  return nServerID_;
}
inline void PackMysqlServerInfo::set_nServerID(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nServerID_ = value;
  // @@protoc_insertion_point(field_set:OuterMsg.PackMysqlServerInfo.nServerID)
}

// -------------------------------------------------------------------

// SqlExecute

// bytes SqlScript = 1;
inline void SqlExecute::clear_SqlScript() {
  SqlScript_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SqlExecute::SqlScript() const {
  // @@protoc_insertion_point(field_get:OuterMsg.SqlExecute.SqlScript)
  return SqlScript_.GetNoArena();
}
inline void SqlExecute::set_SqlScript(const std::string& value) {
  
  SqlScript_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OuterMsg.SqlExecute.SqlScript)
}
inline void SqlExecute::set_SqlScript(std::string&& value) {
  
  SqlScript_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OuterMsg.SqlExecute.SqlScript)
}
inline void SqlExecute::set_SqlScript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  SqlScript_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OuterMsg.SqlExecute.SqlScript)
}
inline void SqlExecute::set_SqlScript(const void* value, size_t size) {
  
  SqlScript_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OuterMsg.SqlExecute.SqlScript)
}
inline std::string* SqlExecute::mutable_SqlScript() {
  
  // @@protoc_insertion_point(field_mutable:OuterMsg.SqlExecute.SqlScript)
  return SqlScript_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SqlExecute::release_SqlScript() {
  // @@protoc_insertion_point(field_release:OuterMsg.SqlExecute.SqlScript)
  
  return SqlScript_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SqlExecute::set_allocated_SqlScript(std::string* SqlScript) {
  if (SqlScript != nullptr) {
    
  } else {
    
  }
  SqlScript_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), SqlScript);
  // @@protoc_insertion_point(field_set_allocated:OuterMsg.SqlExecute.SqlScript)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OuterMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OuterBase_2eproto
